<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-03-27T07:23:52.607Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Xayahion</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>系统启动异常进入recovery模式</title>
    <link href="http://example.com/2024/03/27/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%BC%82%E5%B8%B8%E8%BF%9B%E5%85%A5recovery%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2024/03/27/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%BC%82%E5%B8%B8%E8%BF%9B%E5%85%A5recovery%E6%A8%A1%E5%BC%8F/</id>
    <published>2024-03-27T07:12:51.852Z</published>
    <updated>2024-03-27T07:23:52.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h2><p>系统启动后蓝灯一直闪烁，重启也是相同的现象。</p><p>拆机后连接串口，开机启动，一直报recover_data，经过一段很长的时间后，系统恢复正常</p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240228112100344.png" alt="image-20240228112100344"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">binder::Status <span class="title">VoldNativeService::mountFstab</span><span class="params">(<span class="type">const</span> std::string&amp; blkDevice,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             <span class="type">const</span> std::string&amp; mountPoint)</span> </span>&#123;</span><br><span class="line">    ENFORCE_SYSTEM_OR_ROOT;</span><br><span class="line">    ACQUIRE_LOCK;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">translateBool</span>(</span><br><span class="line">            <span class="built_in">fscrypt_mount_metadata_encrypted</span>(blkDevice, mountPoint, <span class="literal">false</span>, <span class="literal">false</span>, <span class="string">&quot;null&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Usage: fsck.f2fs [options] device<br>[options]:<br>  -a check&#x2F;fix potential corruption, reported by f2fs<br>  -c <num-cache-entry>  set number of cache entries (default 0)<br>  -m <max-hash-collision>  set max cache hash collision (default 16)<br>  -C encoding[:flag1,flag2] Set options for enabling casefolding<br>  -d debug level [default:0]<br>  -f check&#x2F;fix entire partition<br>  -g add default options<br>  -l show superblock&#x2F;checkpoint<br>  -O feature1[feature2,feature3,…] e.g. “encrypt”<br>  -p preen mode [default:0 the same as -a [0|1]]<br>  -S sparse_mode<br>  -t show directory tree<br>  -q preserve quota limits<br>  -y fix all the time<br>  -V print the version number and exit<br>  –dry-run do not really fix corruptions<br>  –no-kernel-check skips detecting kernel change<br>  –kernel-check checks kernel change<br>  –debug-cache to debug cache when -c is used</p></blockquote><p>1.查看日志是进行fsck修复工作</p><p>2.本地暂时无法执行fsck操作，无法进行umount data分区的操作</p><h2 id="2-resize-f2fs"><a href="#2-resize-f2fs" class="headerlink" title="2.resize_f2fs"></a>2.resize_f2fs</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (is_f2fs(entry.fs_type)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!read_f2fs_superblock(blk_device, &amp;fs_stat)) &#123;</span><br><span class="line">        <span class="keyword">return</span> fs_stat;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*add for resizeof /data/ 20231019 ,for recovery-mode*/</span></span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> RECOVERY_MODE_BUG</span></span><br><span class="line">    LINFO &lt;&lt; <span class="string">&quot;resize_f2fs set &quot;</span>;</span><br><span class="line">    resize_f2fs(blk_device);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">bool</span> <span class="title function_">read_f2fs_superblock</span><span class="params">(<span class="type">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; blk_device, <span class="type">int</span>* fs_stat)</span> &#123;</span><br><span class="line">    android::base::unique_fd <span class="title function_">fd</span><span class="params">(TEMP_FAILURE_RETRY(open(blk_device.c_str(), O_RDONLY | O_CLOEXEC)))</span>;</span><br><span class="line">    __le32 sb1, sb2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        PERROR &lt;&lt; <span class="string">&quot;Failed to open &#x27;&quot;</span> &lt;&lt; blk_device &lt;&lt; <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (TEMP_FAILURE_RETRY(pread(fd, &amp;sb1, <span class="keyword">sizeof</span>(sb1), F2FS_SUPER_OFFSET)) != <span class="keyword">sizeof</span>(sb1)) &#123;</span><br><span class="line">        PERROR &lt;&lt; <span class="string">&quot;Can&#x27;t read &#x27;&quot;</span> &lt;&lt; blk_device &lt;&lt; <span class="string">&quot;&#x27; superblock1&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (TEMP_FAILURE_RETRY(pread(fd, &amp;sb2, <span class="keyword">sizeof</span>(sb2), F2FS_BLKSIZE + F2FS_SUPER_OFFSET)) !=</span><br><span class="line">        <span class="keyword">sizeof</span>(sb2)) &#123;</span><br><span class="line">        PERROR &lt;&lt; <span class="string">&quot;Can&#x27;t read &#x27;&quot;</span> &lt;&lt; blk_device &lt;&lt; <span class="string">&quot;&#x27; superblock2&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sb1 != cpu_to_le32(F2FS_SUPER_MAGIC) &amp;&amp; sb2 != cpu_to_le32(F2FS_SUPER_MAGIC)) &#123;</span><br><span class="line">        LINFO &lt;&lt; <span class="string">&quot;Invalid f2fs superblock on &#x27;&quot;</span> &lt;&lt; blk_device &lt;&lt; <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">        *fs_stat |= FS_STAT_INVALID_MAGIC;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="疑问1：读取f2fs的超级块信息成功，为啥要进行resize-f2fs操作？"><a href="#疑问1：读取f2fs的超级块信息成功，为啥要进行resize-f2fs操作？" class="headerlink" title="疑问1：读取f2fs的超级块信息成功，为啥要进行resize f2fs操作？"></a>疑问1：读取f2fs的超级块信息成功，为啥要进行resize f2fs操作？</h3><p>确保文件系统大小和实际的剩余文件系统大小空间一致</p><blockquote><p>01-01 08:00:21.121   695   695 I vold    : [libfs_mgr]resize_f2fs set<br>01-01 08:00:21.121   695   695 I vold    : [libfs_mgr]Running &#x2F;system&#x2F;bin&#x2F;resize.f2fs -s&#x2F;dev&#x2F;block&#x2F;dm-20<br>01-01 08:00:21.134     0     0 I resize.f2fs: Info: No support kernel version!<br>01-01 08:00:21.140     0     0 I resize.f2fs: Info: Segments per section &#x3D; 1<br>01-01 08:00:21.145     0     0 I resize.f2fs: Info: Sections per zone &#x3D; 1<br>01-01 08:00:21.150     0     0 I resize.f2fs: Info: sector size &#x3D; 4096<br>01-01 08:00:21.155     0     0 I resize.f2fs: Info: total sectors &#x3D; 27395539 (107013 MB)<br>01-01 08:00:21.161     0     0 I resize.f2fs: Info: MKFS version<br>01-01 08:00:21.166     0     0 I resize.f2fs: “5.4.0-164-generic #181-Ubuntu SMP Fri Sep 1 13:41:22 UTC 2023”<br>01-01 08:00:21.174     0     0 I resize.f2fs: Info: FSCK version<br>01-01 08:00:21.179     0     0 I resize.f2fs: from “4.19.157-perf”<br>01-01 08:00:21.183     0     0 I resize.f2fs: to “4.19.157-perf”<br>01-01 08:00:21.180   695   695 I vold    : [libfs_mgr]resize.f2fs returned status 0xff00</p></blockquote><p>0xff00返回值含义？</p><h2 id="3-fsck-f2fs"><a href="#3-fsck-f2fs" class="headerlink" title="3.fsck.f2fs"></a>3.fsck.f2fs</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mount前对fs进行操作</span></span><br><span class="line">prepare_fs_for_mount</span><br><span class="line">resize_f2fs</span><br><span class="line">    check_fs</span><br><span class="line">fsck.<span class="function">f2fs</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(is_f2fs(fs_type))</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* f2fs_fsck_argv[] = &#123;F2FS_FSCK_BIN,     <span class="string">&quot;-a&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;10000&quot;</span>, <span class="string">&quot;--debug-cache&quot;</span>,</span><br><span class="line">                                    blk_device.<span class="built_in">c_str</span>()&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* f2fs_fsck_forced_argv[] = &#123;</span><br><span class="line">            F2FS_FSCK_BIN, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;10000&quot;</span>, <span class="string">&quot;--debug-cache&quot;</span>, blk_device.<span class="built_in">c_str</span>()&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">should_force_check</span>(*fs_stat)) &#123;</span><br><span class="line">        LINFO &lt;&lt; <span class="string">&quot;Running &quot;</span> &lt;&lt; F2FS_FSCK_BIN &lt;&lt; <span class="string">&quot; -f -c 10000 --debug-cache &quot;</span></span><br><span class="line">              &lt;&lt; <span class="built_in">realpath</span>(blk_device);</span><br><span class="line">        ret = <span class="built_in">logwrap_fork_execvp</span>(<span class="built_in">ARRAY_SIZE</span>(f2fs_fsck_forced_argv), f2fs_fsck_forced_argv,</span><br><span class="line">                                  &amp;status, <span class="literal">false</span>, LOG_KLOG | LOG_FILE, <span class="literal">false</span>, <span class="literal">nullptr</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        LINFO &lt;&lt; <span class="string">&quot;Running &quot;</span> &lt;&lt; F2FS_FSCK_BIN &lt;&lt; <span class="string">&quot; -a -c 10000 --debug-cache &quot;</span></span><br><span class="line">              &lt;&lt; <span class="built_in">realpath</span>(blk_device);</span><br><span class="line">        ret = <span class="built_in">logwrap_fork_execvp</span>(<span class="built_in">ARRAY_SIZE</span>(f2fs_fsck_argv), f2fs_fsck_argv, &amp;status, <span class="literal">false</span>,</span><br><span class="line">                                  LOG_KLOG | LOG_FILE, <span class="literal">false</span>, <span class="literal">nullptr</span>); <span class="comment">//called</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240228115248075.png" alt="image-20240228115248075"></p><p>recover_inode -&gt; recover_dentry -&gt; recover_data</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f2fs_fill_super</span><br><span class="line">f2fs_recover_fsync_data</span><br><span class="line">recover_data</span><br><span class="line">recover_inode</span><br><span class="line">recover_dentry</span><br><span class="line">do_recover_data</span><br></pre></td></tr></table></figure><p>​</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fs/f2fs/recovery.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">recover_inode</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="keyword">struct</span> page *page)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    f2fs_notice(F2FS_I_SB(inode), <span class="string">&quot;recover_inode: ino = %x, name = %s, inline = %x&quot;</span>,</span><br><span class="line">                    ino_of_node(page), name, raw-&gt;i_inline);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">recover_data</span><span class="params">(<span class="keyword">struct</span> f2fs_sb_info *sbi, <span class="keyword">struct</span> list_head *inode_list,</span></span><br><span class="line"><span class="params">                <span class="keyword">struct</span> list_head *tmp_inode_list, <span class="keyword">struct</span> list_head *dir_list)</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (IS_INODE(page)) &#123;</span><br><span class="line">            err = recover_inode(entry-&gt;inode, page); <span class="comment">//called</span></span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    f2fs_put_page(page, <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (entry-&gt;last_dentry == blkaddr) &#123;</span><br><span class="line">            err = recover_dentry(entry-&gt;inode, page, dir_list); <span class="comment">//called</span></span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    f2fs_put_page(page, <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240228152822861.png" alt="image-20240228152822861"></p><h3 id="疑问2：ino-948少了recover-dentry流程？"><a href="#疑问2：ino-948少了recover-dentry流程？" class="headerlink" title="疑问2：ino&#x3D;948少了recover_dentry流程？"></a>疑问2：ino&#x3D;948少了recover_dentry流程？</h3><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240228154123995.png" alt="image-20240228154123995"></p><h3 id="疑问3：尝试本地复现查看没加resize-f2fs的logcat日志中是否存在fsck的报错，如果有说明和resize-f2fs无关"><a href="#疑问3：尝试本地复现查看没加resize-f2fs的logcat日志中是否存在fsck的报错，如果有说明和resize-f2fs无关" class="headerlink" title="疑问3：尝试本地复现查看没加resize.f2fs的logcat日志中是否存在fsck的报错，如果有说明和resize.f2fs无关"></a>疑问3：尝试本地复现查看没加resize.f2fs的logcat日志中是否存在fsck的报错，如果有说明和resize.f2fs无关</h3><p>复现方法：并行执行增加文件脚本；同步进行删除操作，会看到IO error，后续设备红灯，抓取过dump信息后，设备进入recovery模式</p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240229154053896.png" alt="image-20240229154053896"></p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240229154100772.png" alt="image-20240229154100772"></p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240229154033817.png" alt="image-20240229154033817"></p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240229154439955.png" alt="image-20240229154439955"></p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240229154538694.png" alt="image-20240229154538694"></p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240229154513419.png" alt="image-20240229154513419"></p><h2 id="4-oops"><a href="#4-oops" class="headerlink" title="4.oops"></a>4.oops</h2><blockquote><p>[ 3827.193599] ————[ cut here ]————<br>[ 3827.193621] WARNING: CPU: 7 PID: 20047 at fs&#x2F;f2fs&#x2F;segment.c:2600 change_curseg+0x320&#x2F;0x388<br>[ 3827.193621] Modules linked in: wlan(O) machine_dlkm(O) wcd938x_slave_dlkm(O) wcd938x_dlkm(O) wcd9xxx_dlkm(O) mbhc_dlkm(O) tx_macro_dlkm(O) rx_macro_dlkm(O) va_macro_dlkm(O) wsa_macro_dlkm(O) swr_ctrl_dlkm(O) bolero_cdc_dlkm(O) wsa881x_dlkm(O) wcd_core_dlkm(O) stub_dlkm(O) hdmi_dlkm(O) swr_dlkm(O) pinctrl_lpi_dlkm(O) pinctrl_wcd_dlkm(O) usf_dlkm(O) native_dlkm(O) platform_dlkm(O) q6_dlkm(O) adsp_loader_dlkm(O) apr_dlkm(O) s<br>nd_event_dlkm(O) q6_notifier_dlkm(O) q6_pdr_dlkm(O) msm_11ad_proxy<br>[ 3827.193644] CPU: 7 PID: 20047 Comm: kworker&#x2F;u16:18 Tainted: G S      W  O      4.19.157-perf #1<br>[ 3827.193645] Hardware name: Qualcomm Technologies, Inc. kona-xr-overlay Standalone (DT)<br>[ 3827.193649] Workqueue: writeback wb_workfn (flush-252:6)<br>[ 3827.193651] pstate: 60c00005 (nZCv daif +PAN +UAO)<br>[ 3827.193652] pc : change_curseg+0x320&#x2F;0x388<br>[ 3827.193653] lr : change_curseg+0x318&#x2F;0x388<br>[ 3827.193653] sp : ffffff80120f3400<br>[ 3827.193654] x29: ffffff80120f3420 x28: 0000000000000002<br>[ 3827.193655] x27: 0000000000000002 x26: fffffffbc7368d54<br>[ 3827.193656] x25: 0000000000000340 x24: fffffffbc7368d10<br>[ 3827.193657] x23: fffffffbc52a8348 x22: fffffffbc7368cf0<br>[ 3827.193658] x21: 0000000000000001 x20: ffffffffffffff8b<br>[ 3827.193659] x19: fffffffbc72e6000 x18: 0000000000000034<br>[ 3827.193659] x17: ffffffae55466000 x16: 0000000000000050<br>[ 3827.193660] x15: 0000000000000050 x14: 0000000000000086<br>[ 3827.193661] x13: 0000000000000034 x12: 0000000000000000<br>[ 3827.193662] x11: 0000000000000000 x10: ffffffae54d99a58<br>[ 3827.193663] x9 : 15bbbd23809c8500 x8 : 15bbbd23809c8500<br>[ 3827.193664] x7 : 0000000000000000 x6 : fffffffbffacf240<br>[ 3827.193665] x5 : 0000000000000000 x4 : 0000000000000006<br>[ 3827.193666] x3 : 0000000000002d2d x2 : fffffffbffbe6c98<br>[ 3827.193667] x1 : fffffffbc72e6050 x0 : 0000000000000004<br>[ 3827.193668] Call trace:<br>[ 3827.193670]  change_curseg+0x320&#x2F;0x388<br>[ 3827.193672]  allocate_segment_by_default+0x17c&#x2F;0x1cc<br>[ 3827.193673]  f2fs_allocate_data_block+0x4d4&#x2F;0x770<br>[ 3827.193674]  do_write_page+0x80&#x2F;0x1a8<br>[ 3827.193675]  f2fs_outplace_write_data+0x58&#x2F;0x130<br>[ 3827.193676]  f2fs_do_write_data_page+0x3e4&#x2F;0x7d8<br>[ 3827.193677]  f2fs_write_single_data_page+0x4d8&#x2F;0x780<br>[ 3827.193678]  f2fs_write_data_pages+0x4d8&#x2F;0x700<br>[ 3827.193681]  do_writepages+0x64&#x2F;0x118<br>[ 3827.193682]  __writeback_single_inode+0xdc&#x2F;0x4b0<br>[ 3827.193683]  writeback_sb_inodes+0x468&#x2F;0x9e0<br>[ 3827.193684]  __writeback_inodes_wb+0xa4&#x2F;0x1b0<br>[ 3827.193685]  wb_writeback+0x270&#x2F;0x438<br>[ 3827.193686]  wb_workfn+0x3a8&#x2F;0x630<br>[ 3827.193689]  process_one_work+0x27c&#x2F;0x448<br>[ 3827.193690]  worker_thread+0x264&#x2F;0x4b0<br>[ 3827.193691]  kthread+0x144&#x2F;0x158<br>[ 3827.193693]  ret_from_fork+0x10&#x2F;0x1c<br>[ 3827.193694] —[ end trace e0724141b9490fbe ]—<br>[ 3827.193697] Unable to handle kernel paging request at virtual address ffffffffffffe2c0<br>[ 3827.202313] Mem abort info:<br>[ 3827.205220]   ESR &#x3D; 0x96000005<br>[ 3827.206126] init: Service ‘logcatd’ (pid 1702) exited with status 1<br>[ 3827.208419] init: Sending signal 9 to service ‘logcatd’ (pid 1702) process group…<br>[ 3827.208469]   Exception class &#x3D; DABT (current EL), IL &#x3D; 32 bits<br>[ 3827.208531] libprocessgroup: Successfully killed process cgroup uid 1036 pid 1702 in 0ms<br>[ 3827.214626]   SET &#x3D; 0, FnV &#x3D; 0<br>[ 3827.217814]   EA &#x3D; 0, S1PTW &#x3D; 0<br>[ 3827.220899] init: starting service ‘logcatd’…<br>[ 3827.221090] Data abort info:<br>[ 3827.224208]   ISV &#x3D; 0, ISS &#x3D; 0x00000005<br>[ 3827.228169]   CM &#x3D; 0, WnR &#x3D; 0<br>[ 3827.231219] swapper pgtable: 4k pages, 39-bit VAs, pgdp &#x3D; 000000004968e943<br>[ 3827.238314] [ffffffffffffe2c0] pgd&#x3D;0000000000000000, pud&#x3D;0000000000000000<br>[ 3827.245316] Internal error: Oops: 96000005 [#1] PREEMPT SMP<br>[ 3827.251036] Modules linked in: wlan(O) machine_dlkm(O) wcd938x_slave_dlkm(O) wcd938x_dlkm(O) wcd9xxx_dlkm(O) mbhc_dlkm(O) tx_macro_dlkm(O) rx_macro_dlkm(O) va_macro_dlkm(O) wsa_macro_dlkm(O) swr_ctrl_dlkm(O) bolero_cdc_dlkm(O) wsa881x_dlkm(O) wcd_core_dlkm(O) stub_dlkm(O) hdmi_dlkm(O) swr_dlkm(O) pinctrl_lpi_dlkm(O) pinctrl_wcd_dlkm(O) usf_dlkm(O) native_dlkm(O) platform_dlkm(O) q6_dlkm(O) adsp_loader_dlkm(O) apr_dlkm(O) snd_event_dlkm(O) q6_notifier_dlkm(O) q6_pdr_dlkm(O) msm_11ad_proxy<br>[ 3827.295302] Process kworker&#x2F;u16:18 (pid: 20047, stack limit &#x3D; 0x00000000ec2b678c)<br>[ 3827.302977] CPU: 7 PID: 20047 Comm: kworker&#x2F;u16:18 Tainted: G S      W  O      4.19.157-perf #1<br>[ 3827.311902] Hardware name: Qualcomm Technologies, Inc. kona-xr-overlay Standalone (DT)<br>[ 3827.320031] Workqueue: writeback wb_workfn (flush-252:6)<br>[ 3827.325484] pstate: 20c00005 (nzCv daif +PAN +UAO)<br>[ 3827.330411] pc : __memcpy+0x100&#x2F;0x180<br>[ 3827.334173] lr : change_curseg+0x298&#x2F;0x388<br>[ 3827.338377] sp : ffffff80120f3400<br>[ 3827.341783] x29: ffffff80120f3420 x28: 0000000000000002<br>[ 3827.347232] x27: 0000000000000002 x26: fffffffbc7368d54<br>[ 3827.352681] x25: 0000000000000340 x24: fffffffbc7368d10<br>[ 3827.358131] x23: fffffffbc52a8348 x22: fffffffbc7368cf0<br>[ 3827.363583] x21: 0000000000000001 x20: ffffffffffffff8b<br>[ 3827.369042] x19: fffffffbc72e6000 x18: 0000000000000034<br>[ 3827.374493] x17: ffffffae55466000 x16: 0000000000000050<br>[ 3827.379950] x15: 0000000000000050 x14: 0000000000000086<br>[ 3827.385400] x13: 0000000000000034 x12: 0000000000000000<br>[ 3827.390849] x11: 0000000000000000 x10: ffffffae54d99a58<br>[ 3827.396299] x9 : 15bbbd23809c8500 x8 : ffffffffffffe2c0<br>[ 3827.401747] x7 : 0000000000000000 x6 : fffffffbc8c2e000<br>[ 3827.407201] x5 : 0000000000000000 x4 : 0000000000000000<br>[ 3827.412651] x3 : 0000000000002d2d x2 : 0000000000000d80<br>[ 3827.418104] x1 : ffffffffffffe2c0 x0 : fffffffbc8c2e000<br>[ 3827.423554] Call trace:<br>[ 3827.426073]  __memcpy+0x100&#x2F;0x180<br>[ 3827.429481]  allocate_segment_by_default+0x17c&#x2F;0x1cc<br>[ 3827.434582]  f2fs_allocate_data_block+0x4d4&#x2F;0x770<br>[ 3827.439410]  do_write_page+0x80&#x2F;0x1a8<br>[ 3827.443173]  f2fs_outplace_write_data+0x58&#x2F;0x130<br>[ 3827.447920]  f2fs_do_write_data_page+0x3e4&#x2F;0x7d8<br>[ 3827.452666]  f2fs_write_single_data_page+0x4d8&#x2F;0x780<br>[ 3827.457769]  f2fs_write_data_pages+0x4d8&#x2F;0x700<br>[ 3827.462340]  do_writepages+0x64&#x2F;0x118<br>[ 3827.466104]  __writeback_single_inode+0xdc&#x2F;0x4b0<br>[ 3827.470851]  writeback_sb_inodes+0x468&#x2F;0x9e0<br>[ 3827.475239]  __writeback_inodes_wb+0xa4&#x2F;0x1b0<br>[ 3827.479715]  wb_writeback+0x270&#x2F;0x438<br>[ 3827.483477]  wb_workfn+0x3a8&#x2F;0x630<br>[ 3827.486972]  process_one_work+0x27c&#x2F;0x448<br>[ 3827.564345]  worker_thread+0x264&#x2F;0x4b0<br>[ 3827.568197]  kthread+0x144&#x2F;0x158<br>[ 3827.571515]  ret_from_fork+0x10&#x2F;0x1c</p></blockquote><h3 id="4-1-WARN-ON打印"><a href="#4-1-WARN-ON打印" class="headerlink" title="4.1 WARN_ON打印"></a>4.1 WARN_ON打印</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ 3827.193621] WARNING: CPU: 7 PID: 20047 at fs/f2fs/segment.c:2600 change_curseg+0x320/0x388</span><br></pre></td></tr></table></figure><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240229162039839.png" alt="image-20240229162039839"></p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240229162103126.png" alt="image-20240229162103126"></p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240229162321094.png" alt="image-20240229162321094"></p><h3 id="4-2-Unable-to-handle-kernel-paging-request-at-virtual-address"><a href="#4-2-Unable-to-handle-kernel-paging-request-at-virtual-address" class="headerlink" title="4.2 Unable to handle kernel paging request at virtual address"></a>4.2 Unable to handle kernel paging request at virtual address</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[ 3827.330411] pc : __memcpy+0x100/0x180</span><br><span class="line">[ 3827.334173] lr : change_curseg+0x298/0x388</span><br><span class="line">[ 3827.338377] sp : ffffff80120f3400</span><br><span class="line">[ 3827.341783] x29: ffffff80120f3420 x28: 0000000000000002 </span><br><span class="line">[ 3827.347232] x27: 0000000000000002 x26: fffffffbc7368d54 </span><br><span class="line">[ 3827.352681] x25: 0000000000000340 x24: fffffffbc7368d10 </span><br><span class="line">[ 3827.358131] x23: fffffffbc52a8348 x22: fffffffbc7368cf0 </span><br><span class="line">[ 3827.363583] x21: 0000000000000001 x20: ffffffffffffff8b </span><br><span class="line">[ 3827.369042] x19: fffffffbc72e6000 x18: 0000000000000034 </span><br><span class="line">[ 3827.374493] x17: ffffffae55466000 x16: 0000000000000050 </span><br><span class="line">[ 3827.379950] x15: 0000000000000050 x14: 0000000000000086 </span><br><span class="line">[ 3827.385400] x13: 0000000000000034 x12: 0000000000000000 </span><br><span class="line">[ 3827.390849] x11: 0000000000000000 x10: ffffffae54d99a58 </span><br><span class="line">[ 3827.396299] x9 : 15bbbd23809c8500 x8 : ffffffffffffe2c0 </span><br><span class="line">[ 3827.401747] x7 : 0000000000000000 x6 : fffffffbc8c2e000 </span><br><span class="line">[ 3827.407201] x5 : 0000000000000000 x4 : 0000000000000000 </span><br><span class="line">[ 3827.412651] x3 : 0000000000002d2d x2 : 0000000000000d80 </span><br><span class="line">[ 3827.418104] x1 : ffffffffffffe2c0 x0 : fffffffbc8c2e000 </span><br><span class="line">[ 3827.423554] Call trace:</span><br><span class="line">[ 3827.426073]  __memcpy+0x100/0x180</span><br><span class="line">[ 3827.429481]  allocate_segment_by_default+0x17c/0x1cc</span><br><span class="line">[ 3827.434582]  f2fs_allocate_data_block+0x4d4/0x770</span><br><span class="line">[ 3827.439410]  do_write_page+0x80/0x1a8</span><br><span class="line">[ 3827.443173]  f2fs_outplace_write_data+0x58/0x130</span><br><span class="line">[ 3827.447920]  f2fs_do_write_data_page+0x3e4/0x7d8</span><br><span class="line">[ 3827.452666]  f2fs_write_single_data_page+0x4d8/0x780</span><br><span class="line">[ 3827.457769]  f2fs_write_data_pages+0x4d8/0x700</span><br><span class="line">[ 3827.462340]  do_writepages+0x64/0x118</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">crash&gt; </span><span class="language-bash">dis -l __memcpy+0x100</span></span><br><span class="line">/data/jenkins/workspace/StationPro_new/sxr2130p_repo/emdoor/LINUX/android/kernel/msm-4.19/arch/arm64/lib/copy_template.S: 167</span><br><span class="line">0xffffffae53e6bb40 &lt;memcpy+256&gt;:        ldp     x7, x8, [x1], #16</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">crash&gt; </span><span class="language-bash">dis -l allocate_segment_by_default+0x17c</span></span><br><span class="line">/data/jenkins/workspace/StationPro_new/sxr2130p_repo/emdoor/LINUX/android/kernel/msm-4.19/fs/f2fs/segment.c: 2677</span><br><span class="line">0xffffffae52cd6514 &lt;allocate_segment_by_default+380&gt;:   b       0xffffffae52cd6530 &lt;allocate_segment_by_default+408&gt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240229155152870.png" alt="image-20240229155152870"></p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240229155114373.png" alt="image-20240229155114373"></p><h4 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/data/jenkins/workspace/StationPro_new/sxr2130p_repo/emdoor/LINUX/android/kernel/msm-4.19/fs/f2fs/segment.c: 2602</span><br><span class="line">0xffffffae52cceac4 &lt;change_curseg+644&gt;: ldr     x0, [x24]</span><br><span class="line">/data/jenkins/workspace/StationPro_new/sxr2130p_repo/emdoor/LINUX/android/kernel/msm-4.19/include/linux/mm.h: 1246</span><br><span class="line">0xffffffae52cceac8 &lt;change_curseg+648&gt;: lsl     x8, x20, #6</span><br><span class="line">0xffffffae52cceacc &lt;change_curseg+652&gt;: orr     x1, x8, #0xffffffc000000000</span><br><span class="line">/data/jenkins/workspace/StationPro_new/sxr2130p_repo/emdoor/LINUX/android/kernel/msm-4.19/fs/f2fs/segment.c: 2602</span><br><span class="line">0xffffffae52ccead0 &lt;change_curseg+656&gt;: mov     w2, #0xe00                      // #3584</span><br><span class="line">0xffffffae52ccead4 &lt;change_curseg+660&gt;: bl      0xffffffae53e6ba40 &lt;__memcpy&gt;</span><br></pre></td></tr></table></figure><h4 id="memcpy"><a href="#memcpy" class="headerlink" title="memcpy"></a>memcpy</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">crash&gt; dis -l __memcpy+0x100</span><br><span class="line">/data/jenkins/workspace/StationPro_new/sxr2130p_repo/emdoor/LINUX/android/kernel/msm-4.19/arch/arm64/lib/copy_template.S: 167</span><br><span class="line">0xffffffae53e6bb40 &lt;memcpy+256&gt;:        ldp     x7, x8, [x1], #16</span><br></pre></td></tr></table></figure><p>注：</p><p>LDP指令从目标内存地址中加载数据，并将其存储到和或和寄存器中。加载的数据可以是32位或64位，具体取决于使用的寄存器。<br>以下示例演示了如何使用LDP指令从内存中加载两个通用寄存器的值：</p><blockquote><p>LDP X0, X1, [X2]    从[X2]地址中加载值到X0和X1寄存器<br>LDP W3, W4, [SP, #16]从[SP+16]地址中加载值到W3和W4寄存器</p></blockquote><p>&#x3D;&#x3D;&gt; </p><p>x7 &#x3D; x1+16 </p><p>x8 &#x3D; x1+16</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copy a buffer from src to dest (alignment handled by the hardware)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Parameters:</span></span><br><span class="line"><span class="comment"> *      x0 - dest</span></span><br><span class="line"><span class="comment"> *      x1 - src</span></span><br><span class="line"><span class="comment"> *      x2 - n</span></span><br><span class="line"><span class="comment"> * Returns:</span></span><br><span class="line"><span class="comment"> *      x0 - dest</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">dstin   .req    x0</span><br><span class="line">src     .req    x1</span><br><span class="line">count   .req    x2</span><br><span class="line">tmp1    .req    x3</span><br><span class="line">tmp1w   .req    w3</span><br><span class="line">tmp2    .req    x4</span><br><span class="line">tmp2w   .req    w4</span><br><span class="line">dst     .req    x6</span><br><span class="line"></span><br><span class="line">A_l     .req    x7</span><br><span class="line">A_h     .req    x8</span><br><span class="line">B_l     .req    x9</span><br><span class="line">B_h     .req    x10</span><br><span class="line">C_l     .req    x11</span><br><span class="line">C_h     .req    x12</span><br><span class="line">D_l     .req    x13</span><br><span class="line">D_h     .req    x14</span><br><span class="line"></span><br><span class="line">b.eq    .LSrcAligned</span><br><span class="line">    </span><br><span class="line">.LSrcAligned:</span><br><span class="line">        cmp     count, #<span class="number">64</span></span><br><span class="line">        b.ge    .Lcpy_over64</span><br><span class="line">            </span><br><span class="line">.Lcpy_over64:</span><br><span class="line">        subs    count, count, #<span class="number">128</span></span><br><span class="line">        b.ge    .Lcpy_body_large</span><br><span class="line">        </span><br><span class="line">.Lcpy_body_large:</span><br><span class="line">        <span class="comment">/* pre-get 64 bytes data. */</span></span><br><span class="line">        ldp1    A_l, A_h, src, #<span class="number">16</span> <span class="comment">//called</span></span><br></pre></td></tr></table></figure><h4 id="x1寄存器的赋值情况，截断到memcpy"><a href="#x1寄存器的赋值情况，截断到memcpy" class="headerlink" title="x1寄存器的赋值情况，截断到memcpy"></a>x1寄存器的赋值情况，截断到memcpy</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0xffffffae52cce894 &lt;change_curseg+84&gt;:  ldr     x1, [x24, #32]!</span><br><span class="line">0xffffffae52cce8dc &lt;change_curseg+156&gt;: add     x1, x8, x25, lsl #3</span><br><span class="line">0xffffffae52cce8e0 &lt;change_curseg+160&gt;: ldr     x8, [x1]</span><br><span class="line">0xffffffae52cce8f8 &lt;change_curseg+184&gt;: ldsetal x0, x0, [x1]</span><br><span class="line">0xffffffae52cce91c &lt;change_curseg+220&gt;: add     x1, x9, w11, uxtw #3</span><br><span class="line">0xffffffae52cce924 &lt;change_curseg+228&gt;: ldr     x8, [x1]</span><br><span class="line">0xffffffae52cce944 &lt;change_curseg+260&gt;: ldsetal x0, x0, [x1]</span><br><span class="line">0xffffffae52cce984 &lt;change_curseg+324&gt;: add     x1, x9, x25, lsl #3</span><br><span class="line">0xffffffae52cce988 &lt;change_curseg+328&gt;: ldr     x9, [x1]</span><br><span class="line">0xffffffae52cce9a0 &lt;change_curseg+352&gt;: ldclral x0, x0, [x1]</span><br><span class="line">0xffffffae52cceacc &lt;change_curseg+652&gt;: orr     x1, x8, #0xffffffc000000000</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="number">3827.412651</span>] x3 : <span class="number">0000000000002</span>d2d x2 : <span class="number">0000000000000</span>d80 </span><br><span class="line">[ <span class="number">3827.418104</span>] x1 : ffffffffffffe2c0 x0 : fffffffbc8c2e000</span><br><span class="line"></span><br><span class="line"><span class="title function_">memcpy</span><span class="params">(curseg-&gt;sum_blk, sum_node, SUM_ENTRY_SIZE)</span>;</span><br><span class="line"></span><br><span class="line">curseg-&gt;sum_blk -&gt; x0</span><br><span class="line">sum_node -&gt; x1</span><br><span class="line">SUM_ENTRY_SIZE -&gt; x2</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ENTRIES_IN_SUM512</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>SUMMARY_SIZE(7)<span class="comment">/* sizeof(struct summary) */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>SUM_FOOTER_SIZE(5)<span class="comment">/* sizeof(struct summary_footer) */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SUM_ENTRY_SIZE(SUMMARY_SIZE * ENTRIES_IN_SUM)</span></span><br></pre></td></tr></table></figure><p>x1地址有问题，即sum_node地址有问题，来自于sum_page</p><h3 id="猜测：f2fs一致性损坏，当回写时触发oops"><a href="#猜测：f2fs一致性损坏，当回写时触发oops" class="headerlink" title="猜测：f2fs一致性损坏，当回写时触发oops"></a>猜测：f2fs一致性损坏，当回写时触发oops</h3><h3 id="4-3-change-curseg"><a href="#4-3-change-curseg" class="headerlink" title="4.3 change_curseg"></a>4.3 change_curseg</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[ 3827.193599] ------------[ cut here ]------------</span><br><span class="line">[ 3827.193621] WARNING: CPU: 7 PID: 20047 at fs/f2fs/segment.c:2600 change_curseg+0x320/0x388</span><br><span class="line">[ 3827.193621] Modules linked in: wlan(O) machine_dlkm(O) wcd938x_slave_dlkm(O) wcd938x_dlkm(O) wcd9xxx_dlkm(O) mbhc_dlkm(O) tx_macro_dlkm(O) rx_macro_dlkm(O) va_macro_dlkm(O) wsa_macro_dlkm(O) swr_ctrl_dlkm(O) bolero_cdc_dlkm(O) wsa881x_dlkm(O) wcd_core_dlkm(O) stub_dlkm(O) hdmi_dlkm(O) swr_dlkm(O) pinctrl_lpi_dlkm(O) pinctrl_wcd_dlkm(O) usf_dlkm(O) native_dlkm(O) platform_dlkm(O) q6_dlkm(O) adsp_loader_dlkm(O) apr_dlkm(O) s</span><br><span class="line">nd_event_dlkm(O) q6_notifier_dlkm(O) q6_pdr_dlkm(O) msm_11ad_proxy</span><br><span class="line">[ 3827.193644] CPU: 7 PID: 20047 Comm: kworker/u16:18 Tainted: G S      W  O      4.19.157-perf #1</span><br><span class="line">[ 3827.193645] Hardware name: Qualcomm Technologies, Inc. kona-xr-overlay Standalone (DT)</span><br><span class="line">[ 3827.193649] Workqueue: writeback wb_workfn (flush-252:6)</span><br><span class="line">[ 3827.193651] pstate: 60c00005 (nZCv daif +PAN +UAO)</span><br><span class="line">[ 3827.193652] pc : change_curseg+0x320/0x388</span><br><span class="line">[ 3827.193653] lr : change_curseg+0x318/0x388</span><br><span class="line">[ 3827.193653] sp : ffffff80120f3400</span><br><span class="line">[ 3827.193654] x29: ffffff80120f3420 x28: 0000000000000002 </span><br><span class="line">[ 3827.193655] x27: 0000000000000002 x26: fffffffbc7368d54 </span><br><span class="line">[ 3827.193656] x25: 0000000000000340 x24: fffffffbc7368d10 </span><br><span class="line">[ 3827.193657] x23: fffffffbc52a8348 x22: fffffffbc7368cf0 </span><br><span class="line">[ 3827.193658] x21: 0000000000000001 x20: ffffffffffffff8b </span><br><span class="line">[ 3827.193659] x19: fffffffbc72e6000 x18: 0000000000000034 </span><br><span class="line">[ 3827.193659] x17: ffffffae55466000 x16: 0000000000000050 </span><br><span class="line">[ 3827.193660] x15: 0000000000000050 x14: 0000000000000086 </span><br><span class="line">[ 3827.193661] x13: 0000000000000034 x12: 0000000000000000 </span><br><span class="line">[ 3827.193662] x11: 0000000000000000 x10: ffffffae54d99a58 </span><br><span class="line">[ 3827.193663] x9 : 15bbbd23809c8500 x8 : 15bbbd23809c8500 </span><br><span class="line">[ 3827.193664] x7 : 0000000000000000 x6 : fffffffbffacf240 </span><br><span class="line">[ 3827.193665] x5 : 0000000000000000 x4 : 0000000000000006 </span><br><span class="line">[ 3827.193666] x3 : 0000000000002d2d x2 : fffffffbffbe6c98 </span><br><span class="line">[ 3827.193667] x1 : fffffffbc72e6050 x0 : 0000000000000004 </span><br><span class="line">[ 3827.193668] Call trace:</span><br><span class="line">[ 3827.193670]  change_curseg+0x320/0x388</span><br><span class="line">[ 3827.193672]  allocate_segment_by_default+0x17c/0x1cc</span><br></pre></td></tr></table></figure><p>在memcpy前执行了change_curseg</p><p>当前调用栈在change_curseg+0x320</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">crash&gt; </span><span class="language-bash">dis -l change_curseg+0x320</span></span><br><span class="line">/data/jenkins/workspace/StationPro_new/sxr2130p_repo/emdoor/LINUX/android/kernel/msm-4.19/fs/f2fs/segment.c: 2600</span><br><span class="line">0xffffffae52cceb60 &lt;change_curseg+800&gt;: brk     #0x800</span><br><span class="line"></span><br><span class="line">f2fs_bug_on(sbi, IS_ERR(sum_page));</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">define f2fs_bug_on(sbi, condition)\</span></span><br><span class="line"><span class="language-bash"><span class="keyword">do</span> &#123;\</span></span><br><span class="line"><span class="language-bash"><span class="keyword">if</span> (unlikely(condition)) &#123;\</span></span><br><span class="line"><span class="language-bash">WARN_ON(1);\</span></span><br><span class="line"><span class="language-bash">set_sbi_flag(sbi, SBI_NEED_FSCK);\</span></span><br><span class="line"><span class="language-bash">&#125;\</span></span><br><span class="line"><span class="language-bash">&#125; <span class="keyword">while</span> (0)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">整合一下</span></span><br><span class="line">/data/jenkins/workspace/StationPro_new/sxr2130p_repo/emdoor/LINUX/android/kernel/msm-4.19/fs/f2fs/segment.c: 2600</span><br><span class="line">0xffffffae52cceabc &lt;change_curseg+636&gt;: cmn     x0, #0xfff -&gt; IS_ERR(sum_page)</span><br><span class="line">0xffffffae52cceac0 &lt;change_curseg+640&gt;: b.cs    0xffffffae52cceb4c &lt;change_curseg+780&gt;  // b.hs, b.nlast</span><br><span class="line">//b.hs指令是判断是否无符号小于</span><br><span class="line">/data/jenkins/workspace/StationPro_new/sxr2130p_repo/emdoor/LINUX/android/kernel/msm-4.19/fs/f2fs/segment.c: 2600</span><br><span class="line">0xffffffae52cceb4c &lt;change_curseg+780&gt;: adrp    x0, 0xffffffae54712000</span><br><span class="line">0xffffffae52cceb50 &lt;change_curseg+784&gt;: add     x0, x0, #0xe0 </span><br><span class="line">0xffffffae52cceb54 &lt;change_curseg+788&gt;: bl      0xffffffae529580b8 &lt;printk&gt;</span><br><span class="line">/data/jenkins/workspace/StationPro_new/sxr2130p_repo/emdoor/LINUX/android/kernel/msm-4.19/fs/f2fs/segment.c: 2600</span><br><span class="line">0xffffffae52cceb60 &lt;change_curseg+800&gt;: brk     #0x800</span><br></pre></td></tr></table></figure><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240229205911145.png" alt="image-20240229205911145"></p><h2 id="5-ARM虚拟地址空间布局"><a href="#5-ARM虚拟地址空间布局" class="headerlink" title="5.ARM虚拟地址空间布局"></a>5.ARM虚拟地址空间布局</h2><p><a href="https://blog.csdn.net/longwang155069/article/details/105381709">根据crash学习ARM64虚拟地址空间布局_address between user and kernel address ranges-CSDN博客</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ 3827.231219] swapper pgtable: 4k pages, 39-bit VAs, pgdp = 000000004968e943</span><br><span class="line">[ 3827.238314] [ffffffffffffe2c0] pgd=0000000000000000, pud=0000000000000000</span><br><span class="line">[ 3827.245316] Internal error: Oops: 96000005 [#1] PREEMPT SMP</span><br></pre></td></tr></table></figure><h2 id="6-f2fs不一致"><a href="#6-f2fs不一致" class="headerlink" title="6.f2fs不一致"></a>6.f2fs不一致</h2><p>F2FS-fs (dm-6): invalid blkaddr: 116238, type: 9, run fsck to fix.</p><p>F2FS-fs (dm-6): inconsistent node block, nid:1393, node_footer[nid:0,ino:0,ofs:0,cpver:0,blkaddr:0]</p><h3 id="6-1-invalid-blkaddr"><a href="#6-1-invalid-blkaddr" class="headerlink" title="6.1 invalid blkaddr"></a>6.1 invalid blkaddr</h3><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><blockquote><p>[ 3776.954849] WARNING: CPU: 6 PID: 1443 at fs&#x2F;f2fs&#x2F;f2fs.h:3109 f2fs_submit_page_write+0x398&#x2F;0x820<br>[ 3776.954850] Modules linked in: wlan(O) machine_dlkm(O) wcd938x_slave_dlkm(O) wcd938x_dlkm(O) wcd9xxx_dlkm(O) mbhc_dlkm(O) tx_macro_dlkm(O) rx_macro_dlkm(O) va_macro_dlkm(O) wsa_macro_dlkm(O) swr_ctrl_dlkm(O) bolero_cdc_dlkm(O) wsa881x_dlkm(O) wcd_core_dlkm(O) stub_dlkm(O) hdmi_dlkm(O) swr_dlkm(O) pinctrl_lpi_dlkm(O) pinctrl_wcd_dlkm(O) usf_dlkm(O) native_dlkm(O) platform_dlkm(O) q6_dlkm(O) adsp_loader_dlkm(O) apr_dlkm(O) snd_event_dlkm(O) q6_notifier_dlkm(O) q6_pdr_dlkm(O) msm_11ad_proxy<br>[ 3776.954858] CPU: 6 PID: 1443 Comm: watchdog Tainted: G S      W  O      4.19.157-perf #1<br>[ 3776.954858] Hardware name: Qualcomm Technologies, Inc. kona-xr-overlay Standalone (DT)<br>[ 3776.954859] pstate: 60400005 (nZCv daif +PAN -UAO)<br>[ 3776.954860] pc : f2fs_submit_page_write+0x398&#x2F;0x820<br>[ 3776.954860] lr : f2fs_submit_page_write+0x390&#x2F;0x820<br>[ 3776.954861] sp : ffffff8009b93630<br>[ 3776.954861] x29: ffffff8009b93670 x28: 000000000001c602<br>[ 3776.954862] x27: fffffffbc72e6000 x26: fffffffbc72e6000<br>[ 3776.954863] x25: 0000000000000009 x24: 00000000ffffffff<br>[ 3776.954864] x23: fffffffbcadfd018 x22: 0000000000000088<br>[ 3776.954864] x21: ffffff8009b936d0 x20: fffffffbcadfd008<br>[ 3776.954865] x19: fffffffbcadfd000 x18: 0000000000000034<br>[ 3776.954866] x17: ffffffae55466000 x16: 00000000000000c0<br>[ 3776.954867] x15: 00000000000000c0 x14: 0000000000000086<br>[ 3776.954867] x13: 0000000000000034 x12: 0000000000000000<br>[ 3776.954868] x11: 0000000000000000 x10: 0000000000000007<br>[ 3776.954869] x9 : 15bbbd23809c8500 x8 : 15bbbd23809c8500<br>[ 3776.954870] x7 : 0000000000000000 x6 : fffffffbffa845dc<br>[ 3776.954871] x5 : 0000000000000000 x4 : 0000000000000006<br>[ 3776.954871] x3 : 0000000000002d2d x2 : 0000000000000007<br>[ 3776.954872] x1 : fffffffbc72e6050 x0 : 0000000000000004<br>[ 3776.954873] Call trace:<br>[ 3776.954874]  f2fs_submit_page_write+0x398&#x2F;0x820<br>[ 3776.954875]  f2fs_do_write_meta_page+0xd0&#x2F;0x200<br>[ 3776.954876]  __f2fs_write_meta_page+0x13c&#x2F;0x1c0<br>[ 3776.954877]  f2fs_sync_meta_pages+0x1a0&#x2F;0x330<br>[ 3776.954879]  f2fs_write_checkpoint+0x5b0&#x2F;0x1598<br>[ 3776.954880]  f2fs_sync_fs+0x124&#x2F;0x180<br>[ 3776.954881]  f2fs_do_sync_file+0x57c&#x2F;0xa18<br>[ 3776.954882]  f2fs_sync_file+0x54&#x2F;0x70<br>[ 3776.954883]  __arm64_sys_fdatasync+0x4c&#x2F;0x98<br>[ 3776.954885]  el0_svc_common+0x9c&#x2F;0x168<br>[ 3776.954886]  el0_svc_handler+0x6c&#x2F;0x88<br>[ 3776.954887]  el0_svc+0x8&#x2F;0x380<br>[ 3776.954887] —[ end trace e0724141b9490f67 ]—<br>[ 3776.954897] F2FS-fs (dm-6): invalid blkaddr: 116227, type: 9, run fsck to fix.</p></blockquote><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f2fs_submit_page_write(<span class="keyword">struct</span> f2fs_io_info *fio)</span><br><span class="line">verify_fio_blkaddr(<span class="keyword">struct</span> f2fs_io_info *fio)</span><br><span class="line">verify_blkaddr(sbi, fio-&gt;old_blkaddr, __is_meta_io(fio) ? META_GENERIC : DATA_GENERIC);</span><br><span class="line">!f2fs_is_valid_blkaddr(sbi, blkaddr, type) <span class="comment">//return 0</span></span><br><span class="line">    <span class="comment">//invalid blkaddr</span></span><br></pre></td></tr></table></figure><p>因为type是9，所以走META_GENERIC分支</p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240301111114033.png" alt="image-20240301111114033"></p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240301111104791.png" alt="image-20240301111104791"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAIN_BLKADDR(sbi)\</span></span><br><span class="line"><span class="meta">(SM_I(sbi) ? SM_I(sbi)-&gt;main_blkaddr : \</span></span><br><span class="line"><span class="meta">le32_to_cpu(F2FS_RAW_SUPER(sbi)-&gt;main_blkaddr))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SEG0_BLKADDR(sbi)\</span></span><br><span class="line"><span class="meta">(SM_I(sbi) ? SM_I(sbi)-&gt;seg0_blkaddr : \</span></span><br><span class="line"><span class="meta">le32_to_cpu(F2FS_RAW_SUPER(sbi)-&gt;segment0_blkaddr))</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/RiweiPan/F2FS-NOTES/raw/master/img/F2FS-Layout/sb_layout2.png" alt="sb_layout"></p><p>f2fs_sm_info是内存中管理segment的总体结构，主要是为了方便查找可用的block以及高效执行gc、discard等操作。</p><ul><li>seg0_blkaddr：与SuperBlock的介绍一样，是第一个segment的地址。</li><li>main_blkaddr：Main Area的开始地址。</li></ul><p>blkaddr由fio-&gt;old_blkaddr赋值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">f2fs_do_write_meta_page</span><span class="params">(<span class="keyword">struct</span> f2fs_sb_info *sbi, <span class="keyword">struct</span> page *page,</span></span><br><span class="line"><span class="params"><span class="keyword">enum</span> iostat_type io_type)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">f2fs_io_info</span> <span class="title">fio</span> =</span> &#123;</span><br><span class="line">.sbi = sbi,</span><br><span class="line">.type = META,</span><br><span class="line">.temp = HOT,</span><br><span class="line">.op = REQ_OP_WRITE,</span><br><span class="line">.op_flags = REQ_SYNC | REQ_META | REQ_PRIO,</span><br><span class="line">.old_blkaddr = page-&gt;index, <span class="comment">//！！！</span></span><br><span class="line">.new_blkaddr = page-&gt;index,</span><br><span class="line">.page = page,</span><br><span class="line">.encrypted_page = <span class="literal">NULL</span>,</span><br><span class="line">.in_list = <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (unlikely(page-&gt;index &gt;= MAIN_BLKADDR(sbi)))</span><br><span class="line">fio.op_flags &amp;= ~REQ_META;</span><br><span class="line"></span><br><span class="line">set_page_writeback(page);</span><br><span class="line">ClearPageError(page);</span><br><span class="line">f2fs_submit_page_write(&amp;fio);<span class="comment">//called</span></span><br><span class="line"></span><br><span class="line">stat_inc_meta_count(sbi, page-&gt;index);</span><br><span class="line">f2fs_update_iostat(sbi, io_type, F2FS_BLKSIZE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fio-&gt;old_blkaddr来自于page-&gt;index</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f2fs_sync_meta_pages</span><br><span class="line">__f2fs_write_meta_page(page)</span><br><span class="line">f2fs_do_write_meta_page(sbi,page)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f2fs_sync_meta_pages</span><br><span class="line"><span class="title function_">pagevec_lookup_tag</span><span class="params">(&amp;pvec, mapping, &amp;index, PAGECACHE_TAG_DIRTY)</span></span><br><span class="line">    <span class="keyword">struct</span> page *page = pvec.pages[i];</span><br><span class="line">__f2fs_write_meta_page(page, &amp;wbc, io_type)</span><br></pre></td></tr></table></figure><p>page来自于pvec</p><h4 id="pvec参数传递流程"><a href="#pvec参数传递流程" class="headerlink" title="pvec参数传递流程"></a>pvec参数传递流程</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pagevec_lookup_tag(&amp;pvec, mapping, &amp;index, PAGECACHE_TAG_DIRTY)</span><br><span class="line">pagevec_lookup_range_tag(pvec, mapping, index, (<span class="type">pgoff_t</span>)<span class="number">-1</span>, tag)</span><br><span class="line">find_get_pages_range_tag(mapping, index, end, tag, PAGEVEC_SIZE, pvec-&gt;pages)</span><br><span class="line">    radix_tree_for_each_tagged(slot, &amp;mapping-&gt;i_pages, &amp;iter, *index, tag)&#123;</span><br><span class="line">    page = radix_tree_deref_slot(slot) <span class="comment">//called</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>page是在指定范围地址空间搜索得到</p><h4 id="f2fs-sm-info"><a href="#f2fs-sm-info" class="headerlink" title="f2fs_sm_info"></a>f2fs_sm_info</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="keyword">struct</span> f2fs_sb_info *<span class="title function_">F2FS_SB</span><span class="params">(<span class="keyword">struct</span> super_block *sb)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">return</span> sb-&gt;s_fs_info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="keyword">struct</span> f2fs_sm_info *<span class="title function_">SM_I</span><span class="params">(<span class="keyword">struct</span> f2fs_sb_info *sbi)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">struct</span> f2fs_sm_info *)(sbi-&gt;sm_info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">crash&gt; super_block -xo | grep s_fs_info</span><br><span class="line">  [<span class="number">0x440</span>] <span class="type">void</span> *s_fs_info;</span><br><span class="line"></span><br><span class="line">fffffffa5da1f000 + <span class="number">0x440</span> = fffffffa5da1f440</span><br><span class="line"></span><br><span class="line">crash&gt; rd fffffffa5da1f440</span><br><span class="line">fffffffa5da1f440:  fffffffbc72e6000                    .`......  </span><br><span class="line">    </span><br><span class="line">f2fs_sb_info fffffffbc72e6000</span><br><span class="line">    </span><br><span class="line">crash&gt; f2fs_sb_info -xo | grep sm_info</span><br><span class="line">   [<span class="number">0x88</span>] <span class="keyword">struct</span> f2fs_sm_info *sm_info;</span><br><span class="line"></span><br><span class="line">fffffffbc72e6000 + <span class="number">0x88</span> = fffffffbc72e6088</span><br><span class="line">    </span><br><span class="line">crash&gt; rd fffffffbc72e6088</span><br><span class="line">fffffffbc72e6088:  fffffffbc8ce1600                    ........</span><br><span class="line">    </span><br><span class="line">f2fs_sm_info fffffffbc8ce1600</span><br></pre></td></tr></table></figure><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240301160740133.png" alt="image-20240301160740133"></p><h3 id="6-2-inconsistent-node-block"><a href="#6-2-inconsistent-node-block" class="headerlink" title="6.2 inconsistent node block"></a>6.2 inconsistent node block</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f2fs_get_node_page</span><br><span class="line">__get_node_page</span><br><span class="line">nid != nid_of_node(page)</span><br><span class="line"><span class="comment">//inconsistent node block</span></span><br></pre></td></tr></table></figure><p>没有任何操作 设备猛刷但是没有oops</p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240301162357465.png" alt="image-20240301162357465"></p><p>写裸盘操作</p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240304101717471.png" alt="image-20240304101717471"></p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240304102521981.png" alt="image-20240304102521981"></p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240304105218169.png" alt="image-20240304105218169"></p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240304105613917.png" alt="image-20240304105613917"></p><h3 id="另一种报错"><a href="#另一种报错" class="headerlink" title="另一种报错"></a>另一种报错</h3><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240304112839926.png" alt="image-20240304112839926"></p><h3 id="疑问4：直接对裸设备按照物理地址写操作，破坏了关键文件的node数据区域；那么为啥增删文件会复现"><a href="#疑问4：直接对裸设备按照物理地址写操作，破坏了关键文件的node数据区域；那么为啥增删文件会复现" class="headerlink" title="疑问4：直接对裸设备按照物理地址写操作，破坏了关键文件的node数据区域；那么为啥增删文件会复现"></a>疑问4：直接对裸设备按照物理地址写操作，破坏了关键文件的node数据区域；那么为啥增删文件会复现</h3><h2 id="7-查看data分区"><a href="#7-查看data分区" class="headerlink" title="7.查看data分区"></a>7.查看data分区</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">super_block fffffffa5da1f000</span><br><span class="line"></span><br><span class="line">super_block + 0x440 = f2fs_sb_info* fffffffa5da1f440</span><br><span class="line"></span><br><span class="line">rd fffffffa5da1f440 -&gt; f2fs_sb_info fffffffbc72e6000</span><br><span class="line"></span><br><span class="line">rd fffffffbc72e6010 -&gt; f2fs_super_block fffffffbc72e0000</span><br></pre></td></tr></table></figure><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240229221413574.png" alt="image-20240229221413574"></p><p>53279*2M &#x2F; 1024 （G） &#x3D; 104G</p><p>也差不多满了</p><h2 id="8-dump-f2fs"><a href="#8-dump-f2fs" class="headerlink" title="8.dump.f2fs"></a>8.dump.f2fs</h2><blockquote><p>stationPro:&#x2F; # dump.f2fs &#x2F;dev&#x2F;block&#x2F;dm-10<br>        Info: No support kernel version!<br>Info: Segments per section &#x3D; 1<br>Info: Sections per zone &#x3D; 1<br>Info: sector size &#x3D; 4096<br>Info: total sectors &#x3D; 27395539 (107013 MB)<br>        Invalid SB CRC offset: 2343108685<br>        Can’t find a valid F2FS superblock at 0x0<br>Magic Mismatch, valid(0xf2f52010) - read(0xdc209e9e)<br>        Can’t find a valid F2FS superblock at 0x1</p></blockquote><h3 id="Invalid-SB-CRC-offset"><a href="#Invalid-SB-CRC-offset" class="headerlink" title="Invalid SB CRC offset"></a>Invalid SB CRC offset</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> F2FS_SUPER_MAGIC        0xF2F52010      <span class="comment">/* F2FS Magic Number */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CP_CHKSUM_OFFSET        4092</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SB_CHKSUM_OFFSET        3068</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">verify_sb_chksum</span><span class="params">(<span class="keyword">struct</span> f2fs_super_block *sb)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span> (SB_CHKSUM_OFFSET != get_sb(checksum_offset)) &#123;</span><br><span class="line">                MSG(<span class="number">0</span>, <span class="string">&quot;\tInvalid SB CRC offset: %u\n&quot;</span>,</span><br><span class="line">                                        get_sb(checksum_offset));</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (f2fs_crc_valid(get_sb(crc), sb,</span><br><span class="line">                        get_sb(checksum_offset))) &#123;</span><br><span class="line">                MSG(<span class="number">0</span>, <span class="string">&quot;\tInvalid SB CRC: 0x%x\n&quot;</span>, get_sb(crc));</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;c</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> get_sb(member)          \</span></span><br><span class="line"><span class="meta">                        (&#123;                                              \</span></span><br><span class="line"><span class="meta">                                typeof(sb-&gt;member) t;                   \</span></span><br><span class="line"><span class="meta">                                switch (sizeof(t)) &#123;                    \</span></span><br><span class="line"><span class="meta">                                case 8: t = get_sb_le64(member); break; \</span></span><br><span class="line"><span class="meta">                                case 4: t = get_sb_le32(member); break; \</span></span><br><span class="line"><span class="meta">                                case 2: t = get_sb_le16(member); break; \</span></span><br><span class="line"><span class="meta">                                &#125;                                       \</span></span><br><span class="line"><span class="meta">                                t; \</span></span><br><span class="line"><span class="meta">                        &#125;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> get_sb_le32(member)                     le32_to_cpu(sb-&gt;member)</span></span><br></pre></td></tr></table></figure><h3 id="Magic-Mismatch-valid"><a href="#Magic-Mismatch-valid" class="headerlink" title="Magic Mismatch, valid"></a>Magic Mismatch, valid</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sanity_check_raw_super</span><span class="params">(<span class="keyword">struct</span> f2fs_super_block *sb, <span class="keyword">enum</span> SB_ADDR sb_addr)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> blocksize;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> segment_count, segs_per_sec, secs_per_zone, segs_per_zone;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> total_sections, blocks_per_seg;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((get_sb(feature) &amp; F2FS_FEATURE_SB_CHKSUM) &amp;&amp;</span><br><span class="line">                                        verify_sb_chksum(sb))</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (F2FS_SUPER_MAGIC != get_sb(magic)) &#123;</span><br><span class="line">                MSG(<span class="number">0</span>, <span class="string">&quot;Magic Mismatch, valid(0x%x) - read(0x%x)\n&quot;</span>,</span><br><span class="line">                        F2FS_SUPER_MAGIC, get_sb(magic));</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Can’t-find-a-valid"><a href="#Can’t-find-a-valid" class="headerlink" title="Can’t find a valid"></a>Can’t find a valid</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">f2fs_do_mount</span><span class="params">(<span class="keyword">struct</span> f2fs_sb_info *sbi)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    ret = validate_super_block(sbi, SB0_ADDR);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">            ret = validate_super_block(sbi, SB1_ADDR);</span><br><span class="line">            <span class="keyword">if</span> (ret)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">validate_super_block</span><br><span class="line">sanity_check_raw_super</span><br><span class="line">verify_sb_chksum</span><br><span class="line"><span class="string">&quot;Can&#x27;t find a valid F2FS superblock&quot;</span></span><br></pre></td></tr></table></figure><h3 id="正常文件系统"><a href="#正常文件系统" class="headerlink" title="正常文件系统"></a>正常文件系统</h3><h4 id="SIT部分"><a href="#SIT部分" class="headerlink" title="SIT部分"></a>SIT部分</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">stationPro:/data/test # dump.f2fs -s 0~-1 /dev/block/by-name/userdata</span><br><span class="line">        Info: No support kernel version!</span><br><span class="line">Info: Segments per section = 1</span><br><span class="line">Info: Sections per zone = 1</span><br><span class="line">Info: sector size = 4096</span><br><span class="line">Info: total sectors = 27395539 (107013 MB)</span><br><span class="line">Info: MKFS version</span><br><span class="line">  &quot;5.4.0-33-generic #37-Ubuntu SMP Thu May 21 12:53:59 UTC 2020&quot;</span><br><span class="line">Info: FSCK version</span><br><span class="line">  from &quot;4.19.157-perf&quot;</span><br><span class="line">    to &quot;4.19.157-perf&quot;</span><br><span class="line">Info: version timestamp cur: 1709547949, prev: 1709534712</span><br><span class="line">Info: superblock features = 481 :  encrypt verity quota_ino</span><br><span class="line">Info: superblock encrypt level = 0, salt = 00000000000000000000000000000000</span><br><span class="line">Info: total FS sectors = 27395539 (107013 MB)</span><br><span class="line">Info: CKPT version = 529c0a72</span><br><span class="line">Info: checkpoint state = 10c0 :  nat_bits crc disabled sudden-power-off</span><br><span class="line"></span><br><span class="line">Done: 0.092350 secs</span><br></pre></td></tr></table></figure><h4 id="SSA部分"><a href="#SSA部分" class="headerlink" title="SSA部分"></a>SSA部分</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">stationPro:/data/test # dump.f2fs -a 0~-1 /dev/block/by-name/userdata</span><br><span class="line">        Info: No support kernel version!</span><br><span class="line">Info: Segments per section = 1</span><br><span class="line">Info: Sections per zone = 1</span><br><span class="line">Info: sector size = 4096</span><br><span class="line">Info: total sectors = 27395539 (107013 MB)</span><br><span class="line">Info: MKFS version</span><br><span class="line">  &quot;5.4.0-33-generic #37-Ubuntu SMP Thu May 21 12:53:59 UTC 2020&quot;</span><br><span class="line">Info: FSCK version</span><br><span class="line">  from &quot;4.19.157-perf&quot;</span><br><span class="line">    to &quot;4.19.157-perf&quot;</span><br><span class="line">Info: version timestamp cur: 1709547986, prev: 1709534712</span><br><span class="line">Info: superblock features = 481 :  encrypt verity quota_ino</span><br><span class="line">Info: superblock encrypt level = 0, salt = 00000000000000000000000000000000</span><br><span class="line">Info: total FS sectors = 27395539 (107013 MB)</span><br><span class="line">Info: CKPT version = 529c0a72</span><br><span class="line">Info: checkpoint state = 10c0 :  nat_bits crc disabled sudden-power-off</span><br><span class="line"></span><br><span class="line">Done: 21.470205 secs</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020082519461895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MjMyNDM3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>从结构图可以知道，SSA区域由N个struct f2fs_summary_block组成，每一个struct f2fs_summary_block包含了512个struct f2fs_summary_entry，刚好对应一个segment。segment里面的每一个block(物理地址)对应一个的struct f2fs_summary_entry，它记录了物理地址到逻辑地址的映射信息。它包含了三个变量: nid(该物理地址是属于哪一个node的)，version(用于数据恢复)，ofs_in_node(该物理地址属于该nid对应的node的第ofs_in_node个block,偏移量)。</p><p>可以通过导出日志查看nid与物理地址的映射关系</p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240310150427018.png" alt="image-20240310150427018"></p><h4 id="NAT部分"><a href="#NAT部分" class="headerlink" title="NAT部分"></a>NAT部分</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">stationPro:/data/test # dump.f2fs -n 0~-1 /dev/block/by-name/userdata</span><br><span class="line">        Info: No support kernel version!</span><br><span class="line">Info: Segments per section = 1</span><br><span class="line">Info: Sections per zone = 1</span><br><span class="line">Info: sector size = 4096</span><br><span class="line">Info: total sectors = 27395539 (107013 MB)</span><br><span class="line">Info: MKFS version</span><br><span class="line">  &quot;5.4.0-33-generic #37-Ubuntu SMP Thu May 21 12:53:59 UTC 2020&quot;</span><br><span class="line">Info: FSCK version</span><br><span class="line">  from &quot;4.19.157-perf&quot;</span><br><span class="line">    to &quot;4.19.157-perf&quot;</span><br><span class="line">Info: version timestamp cur: 1709547912, prev: 1709534712</span><br><span class="line">Info: superblock features = 481 :  encrypt verity quota_ino</span><br><span class="line">Info: superblock encrypt level = 0, salt = 00000000000000000000000000000000</span><br><span class="line">Info: total FS sectors = 27395539 (107013 MB)</span><br><span class="line">Info: CKPT version = 529c0a72</span><br><span class="line">Segmentation fault</span><br></pre></td></tr></table></figure><h2 id="9-回写"><a href="#9-回写" class="headerlink" title="9.回写"></a>9.回写</h2><h3 id="9-1-报错调用栈"><a href="#9-1-报错调用栈" class="headerlink" title="9.1 报错调用栈"></a>9.1 报错调用栈</h3><blockquote><p>[ 3827.193668] Call trace:<br>[ 3827.193670]  change_curseg+0x320&#x2F;0x388<br>[ 3827.193672]  allocate_segment_by_default+0x17c&#x2F;0x1cc<br>[ 3827.193673]  f2fs_allocate_data_block+0x4d4&#x2F;0x770<br>[ 3827.193674]  do_write_page+0x80&#x2F;0x1a8<br>[ 3827.193675]  f2fs_outplace_write_data+0x58&#x2F;0x130<br>[ 3827.193676]  f2fs_do_write_data_page+0x3e4&#x2F;0x7d8<br>[ 3827.193677]  f2fs_write_single_data_page+0x4d8&#x2F;0x780<br>[ 3827.193678]  f2fs_write_data_pages+0x4d8&#x2F;0x700<br>[ 3827.193681]  do_writepages+0x64&#x2F;0x118<br>[ 3827.193682]  __writeback_single_inode+0xdc&#x2F;0x4b0<br>[ 3827.193683]  writeback_sb_inodes+0x468&#x2F;0x9e0<br>[ 3827.193684]  __writeback_inodes_wb+0xa4&#x2F;0x1b0<br>[ 3827.193685]  wb_writeback+0x270&#x2F;0x438<br>[ 3827.193686]  wb_workfn+0x3a8&#x2F;0x630<br>[ 3827.193689]  process_one_work+0x27c&#x2F;0x448<br>[ 3827.193690]  worker_thread+0x264&#x2F;0x4b0<br>[ 3827.193691]  kthread+0x144&#x2F;0x158<br>[ 3827.193693]  ret_from_fork+0x10&#x2F;0x1c<br>[ 3827.193694] —[ end trace e0724141b9490fbe ]—</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">wb_workfn</span><br><span class="line">    wb_do_writeback</span><br><span class="line">        wb_check_background_flush</span><br><span class="line">            wb_check_background_flush</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">wb_check_background_flush</span><span class="params">(<span class="keyword">struct</span> bdi_writeback *wb)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (wb_over_bg_thresh(wb)) &#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">wb_writeback_work</span> <span class="title">work</span> =</span> &#123;</span><br><span class="line">.nr_pages= LONG_MAX,</span><br><span class="line">.sync_mode= WB_SYNC_NONE,</span><br><span class="line">.for_background= <span class="number">1</span>,</span><br><span class="line">.range_cyclic= <span class="number">1</span>,</span><br><span class="line">.reason= WB_REASON_BACKGROUND, <span class="comment">//脏页到达阈值</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> wb_writeback(wb, &amp;work);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-尝试复现"><a href="#9-2-尝试复现" class="headerlink" title="9.2 尝试复现"></a>9.2 尝试复现</h3><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240310165131085.png" alt="image-20240310165131085"></p><p>脏页超过10%，但是回写流程没有走到f2fs_writeback</p><p>复现步骤如下：</p><p>1.先写裸盘</p><p>dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;dev&#x2F;block&#x2F;by-name&#x2F;userdata bs&#x3D;1g count&#x3D;100</p><p>2.写文件到data分区，触发脏页回写</p><p>d if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;data&#x2F;test bs&#x3D;1g count&#x3D;100</p><p>3.查看flush进程调用栈</p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240310170115101.png" alt="image-20240310170115101"></p><blockquote><p>[&lt;0&gt;] __switch_to+0x11c&#x2F;0x128<br>[&lt;0&gt;] get_request+0x788&#x2F;0x988<br>[&lt;0&gt;] blk_queue_bio+0x20c&#x2F;0x500<br>[&lt;0&gt;] generic_make_request+0x218&#x2F;0x388<br>[&lt;0&gt;] submit_bio+0x60&#x2F;0x228<br>[&lt;0&gt;] __submit_merged_bio+0x398&#x2F;0x510<br>[&lt;0&gt;] f2fs_submit_page_write+0x484&#x2F;0x840 &#x2F;&#x2F;!!!!!<br>[&lt;0&gt;] do_write_page+0x98&#x2F;0x1a8<br>[&lt;0&gt;] f2fs_outplace_write_data+0x58&#x2F;0x130<br>[&lt;0&gt;] f2fs_do_write_data_page+0x3e4&#x2F;0x7d8<br>[&lt;0&gt;] f2fs_write_single_data_page+0x4d8&#x2F;0x780<br>[&lt;0&gt;] f2fs_write_data_pages+0x4d8&#x2F;0x700<br>[&lt;0&gt;] do_writepages+0x64&#x2F;0x118<br>[&lt;0&gt;] __writeback_single_inode+0xdc&#x2F;0x4b0<br>[&lt;0&gt;] writeback_sb_inodes+0x468&#x2F;0x9e0<br>[&lt;0&gt;] __writeback_inodes_wb+0xa4&#x2F;0x1b0<br>[&lt;0&gt;] wb_writeback+0x270&#x2F;0x438<br>[&lt;0&gt;] wb_workfn+0x3a8&#x2F;0x630<br>[&lt;0&gt;] process_one_work+0x27c&#x2F;0x448<br>[&lt;0&gt;] worker_thread+0x264&#x2F;0x4b0<br>[&lt;0&gt;] kthread+0x144&#x2F;0x158<br>[&lt;0&gt;] ret_from_fork+0x10&#x2F;0x1c<br>[&lt;0&gt;] 0xffffffffffffffff</p></blockquote><p>在data分区下写入文件，会走到f2fs_write_data_page，</p><p>对比问题调用栈发现正常流程不会挂在f2fs_allocate_data_block里面</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">do_write_page</span><span class="params">(<span class="keyword">struct</span> f2fs_summary *sum, <span class="keyword">struct</span> f2fs_io_info *fio)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> type = __get_segment_type(fio);</span><br><span class="line"><span class="type">bool</span> keep_order = (f2fs_lfs_mode(fio-&gt;sbi) &amp;&amp; type == CURSEG_COLD_DATA);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (keep_order)</span><br><span class="line">down_read(&amp;fio-&gt;sbi-&gt;io_order_lock);</span><br><span class="line">reallocate:</span><br><span class="line">f2fs_allocate_data_block(fio-&gt;sbi, fio-&gt;page, fio-&gt;old_blkaddr,</span><br><span class="line">&amp;fio-&gt;new_blkaddr, sum, type, fio, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">if</span> (GET_SEGNO(fio-&gt;sbi, fio-&gt;old_blkaddr) != NULL_SEGNO)</span><br><span class="line">invalidate_mapping_pages(META_MAPPING(fio-&gt;sbi),</span><br><span class="line">fio-&gt;old_blkaddr, fio-&gt;old_blkaddr);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* writeout dirty page into bdev */</span></span><br><span class="line">f2fs_submit_page_write(fio); <span class="comment">//本地复现走到这里</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>错误调用栈：</p><p>[ 3827.193670]  change_curseg+0x320&#x2F;0x388</p><p>[ 3827.193672]  allocate_segment_by_default+0x17c&#x2F;0x1cc</p><p>[ 3827.193673]  f2fs_allocate_data_block+0x4d4&#x2F;0x770</p><p>[ 3827.193674]  do_write_page+0x80&#x2F;0x1a8</p></blockquote><p>说明本地复现在f2fs_allocate_data_block函数没有问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">f2fs_allocate_data_block</span><span class="params">(<span class="keyword">struct</span> f2fs_sb_info *sbi, <span class="keyword">struct</span> page *page,</span></span><br><span class="line"><span class="params"><span class="type">block_t</span> old_blkaddr, <span class="type">block_t</span> *new_blkaddr,</span></span><br><span class="line"><span class="params"><span class="keyword">struct</span> f2fs_summary *sum, <span class="type">int</span> type,</span></span><br><span class="line"><span class="params"><span class="keyword">struct</span> f2fs_io_info *fio, <span class="type">bool</span> add_list)</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (!__has_curseg_space(sbi, type))</span><br><span class="line">sit_i-&gt;s_ops-&gt;allocate_segment(sbi, type, <span class="literal">false</span>); </span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> __has_curseg_space(<span class="keyword">struct</span> f2fs_sb_info *sbi, <span class="type">int</span> type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">curseg_info</span> *<span class="title">curseg</span> =</span> CURSEG_I(sbi, type);</span><br><span class="line"><span class="keyword">if</span> (curseg-&gt;next_blkoff &lt; sbi-&gt;blocks_per_seg)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="加打印发现正常流程也会走到"><a href="#加打印发现正常流程也会走到" class="headerlink" title="加打印发现正常流程也会走到"></a>加打印发现正常流程也会走到</h4><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240311111335764.png" alt="image-20240311111335764"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">f2fs_sb_info fffffffbc72e6000</span><br><span class="line"></span><br><span class="line">f2fs_sm_info = f2fs_sb_info -&gt; sm_info</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">crash&gt; </span><span class="language-bash">f2fs_sb_info -xo | grep sm_info</span></span><br><span class="line">   [0x88] struct f2fs_sm_info *sm_info;</span><br><span class="line">   </span><br><span class="line">rd fffffffbc72e6088 -&gt; f2fs_sm_info fffffffbc8ce1600</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">crash&gt; </span><span class="language-bash">f2fs_sm_info -xo | grep curseg</span></span><br><span class="line">  [0x18] struct curseg_info *curseg_array;</span><br><span class="line">  </span><br><span class="line">rd fffffffbc8ce1618 -&gt; curseg_info fffffffbc7368c00</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">bool</span> __has_curseg_space(<span class="keyword">struct</span> f2fs_sb_info *sbi, <span class="type">int</span> type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">curseg_info</span> *<span class="title">curseg</span> =</span> CURSEG_I(sbi, type);</span><br><span class="line"><span class="keyword">if</span> (curseg-&gt;next_blkoff &lt; sbi-&gt;blocks_per_seg)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">crash&gt; curseg_info fffffffbc7368c00 | grep next_blkoff</span><br><span class="line">  next_blkoff = <span class="number">400</span>,</span><br><span class="line"></span><br><span class="line">crash&gt; f2fs_sb_info fffffffbc72e6000 | grep -w blocks_per_seg</span><br><span class="line">  blocks_per_seg = <span class="number">512</span>,</span><br><span class="line"></span><br><span class="line">crash&gt; curseg_info -xo | grep sum_blk</span><br><span class="line">  [<span class="number">0x20</span>] <span class="keyword">struct</span> f2fs_summary_block *sum_blk;</span><br><span class="line"></span><br><span class="line">f2fs_summary_block* = curseg_info + <span class="number">0x20</span> = fffffffbc7368c20</span><br><span class="line">    </span><br><span class="line">f2fs_summary_block fffffffbc8c2b000</span><br></pre></td></tr></table></figure><p>偶然recovery，清理data分区后启动日志</p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240311115854167.png" alt="image-20240311115854167"></p><h2 id="10-复现"><a href="#10-复现" class="headerlink" title="10.复现"></a>10.复现</h2><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240312110804499.png" alt="image-20240312110804499"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">verify_checksum_chksum</span><span class="params">(<span class="keyword">struct</span> f2fs_checkpoint *cp)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> chksum_offset = get_cp(checksum_offset);</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> crc, cal_crc;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (chksum_offset &lt; CP_MIN_CHKSUM_OFFSET ||</span><br><span class="line">                        chksum_offset &gt; CP_CHKSUM_OFFSET) &#123;</span><br><span class="line">                MSG(<span class="number">0</span>, <span class="string">&quot;\tInvalid CP CRC offset: %u\n&quot;</span>, chksum_offset);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CP_BITMAP_OFFSET        \</span></span><br><span class="line"><span class="meta">        (offsetof(struct f2fs_checkpoint, sit_nat_version_bitmap))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CP_MIN_CHKSUM_OFFSET    CP_BITMAP_OFFSET</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CP_CHKSUM_OFFSET        4092</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240312110952723.png" alt="image-20240312110952723"></p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240312112037639.png" alt="image-20240312112037639"></p><h2 id="3-10问题进展同步"><a href="#3-10问题进展同步" class="headerlink" title="3-10问题进展同步"></a>3-10问题进展同步</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>按表象应该可以分为2个问题：</p><p>1.f2fs文件系统损坏-&gt;recovery模式</p><p>2.f2fs文件系统损坏-&gt;f2fs oops（梦云复现）-&gt; 红灯 -&gt; 收集完QPST内存数据后进入recovery</p><h3 id="当前进展："><a href="#当前进展：" class="headerlink" title="当前进展："></a>当前进展：</h3><p>（1）亿境复现recovery问题，recovery原因和&#x2F;data&#x2F;tombstons有关，与之前fs_mgr_mount_all原因不同；亿境建议合入补丁disable掉tombstones的加密策略，待复现查看tombstones日志排除进程crash的影响</p><p>![60a4f2ace4837deb6353c3c9aa9ce64](C:\Users\rokid\Documents\WeChat Files\wxid_9qt4buce6r2v22\FileStorage\Temp\60a4f2ace4837deb6353c3c9aa9ce64.png)</p><h3 id="历史进展："><a href="#历史进展：" class="headerlink" title="历史进展："></a>历史进展：</h3><p>（1）与亿境对齐，疑问点中resize.f2fs的返回值0xff00含义表示命令正常执行结束；</p><p>（2）invalid blkaddr打印重启修复补丁已打入，待复现后验证有效性；</p><p>（3）dump.f2fs思路不可行，元数据信息会被加密，无法得知物理地址被什么内容写入；</p><p>（4）排查最近提交，都是apk相关修改，无异常点</p><h3 id="计划："><a href="#计划：" class="headerlink" title="计划："></a>计划：</h3><p>1.为啥fsck.f2fs会在inode&#x3D;948处循环很久？此疑问待找到必现或者高概率复现方法再加打印继续分析</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>1、<a href="https://zhuanlan.zhihu.com/p/637700821">f2fs文件系统（三）SIT介绍 - 知乎 (zhihu.com)</a></p><p>2、<a href="https://juejin.cn/post/7260677992338014266">一个F2FS文件系统Data分区损坏的真实案例 - 掘金 (juejin.cn)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1.背景&quot;&gt;&lt;/a&gt;1.背景&lt;/h2&gt;&lt;p&gt;系统启动后蓝灯一直闪烁，重启也是相同的现象。&lt;/p&gt;
&lt;p&gt;拆机后连接串口，开机启动，一直报recover_data，经过一</summary>
      
    
    
    
    
    <category term="problem" scheme="http://example.com/tags/problem/"/>
    
  </entry>
  
  <entry>
    <title>sudoers修复</title>
    <link href="http://example.com/2024/03/27/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/sudoers%E4%BF%AE%E5%A4%8D/"/>
    <id>http://example.com/2024/03/27/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/sudoers%E4%BF%AE%E5%A4%8D/</id>
    <published>2024-03-27T07:12:51.846Z</published>
    <updated>2024-03-27T07:22:18.567Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p><img src="https://static.dingtalk.com/media/lQLPJxgQw9cSyHzMn80CcrBbOT-LeJvcbQUfeuB7FicA_626_159.png" alt="img"></p><p>为了修改User权限，手动用vim 修改了&#x2F;etc&#x2F;sudoers文件，结果导致报错</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>1、打开两个ssh终端，都是用同一个ubuntu用户登录</p><p>2、在第一个终端输入以下命令，获取pid</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $$</span><br></pre></td></tr></table></figure><p>3、在第二个终端，输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkttyagent --process 刚刚得到的pid</span><br></pre></td></tr></table></figure><p>4、这个时候，第二个终端会卡住，在第一个终端输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkexec visudo</span><br></pre></td></tr></table></figure><p>5、然后，第二个终端也卡主，回到第一个终端，会提示输入当前用户密码，输入</p><p>6、好吧，输入完密码，第一个终端卡主了，回到第二个终端，会发现，出现了sudoers的内容，编辑出错的地方，保存即可。</p><p>7、完成任务，修改完成，发现就可以继续使用sudo命令了，over</p><p>PS：这里用的编辑器是nano，以下是nano简单的保存方式：</p><p>linux下在编辑状态下退出请按Ctrl+X，会有两种情形：<br>①、如果文件未修改，直接退出；<br>②、如果修改了文件，下面会询问是否需要保存修改。输入Y确认保存，输入N不保存，按Ctrl+C取消返回。如果输入了Y，下一步会提示输入想要保存的文件名。如果不需要修改文件名直接回车就行；若想要保存成别的名字（也就是另存为）则输入新名称然后确定，这个时候也可用Ctrl+C来取消返回</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://blog.csdn.net/li_ellin/article/details/108666014">错误：&#x2F;etc&#x2F;sudoers: syntax error near line-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://static.dingtalk.com/media/lQLPJxgQw9cSyHzMn80CcrBbOT</summary>
      
    
    
    
    
    <category term="problem" scheme="http://example.com/tags/problem/"/>
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>station2使用perfetto</title>
    <link href="http://example.com/2024/03/27/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/station2%E4%BD%BF%E7%94%A8perfetto/"/>
    <id>http://example.com/2024/03/27/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/station2%E4%BD%BF%E7%94%A8perfetto/</id>
    <published>2024-03-27T07:12:51.844Z</published>
    <updated>2024-03-27T07:21:47.637Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>station2使用perfetto得到的trace文件很小</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="1-logcat查看日志"><a href="#1-logcat查看日志" class="headerlink" title="1.logcat查看日志"></a>1.logcat查看日志</h3><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240325165241669.png" alt="image-20240325165241669"></p><h3 id="2-社区已知问题"><a href="#2-社区已知问题" class="headerlink" title="2.社区已知问题"></a>2.社区已知问题</h3><p><a href="https://github.com/google/perfetto/issues/646">A crash happens in libperfetto.so when capture perfetto-trace · Issue #646 · google&#x2F;perfetto (github.com)</a></p><p>社区提交</p><p><a href="https://android-review.googlesource.com/c/platform/external/perfetto/+/2583173/1/src/traced/probes/ftrace/proto_translation_table.cc">…&#x2F;proto_translation_table.cc · Gerrit Code Review (googlesource.com)</a></p><h3 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h3><p>1.编译perfetto</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd la_qssi13</span><br><span class="line">source build/envsetup.sh &amp;&amp; lunch qssi-userdebug</span><br><span class="line">mmma external/perfetto</span><br><span class="line"># or</span><br><span class="line">m traced traced_probes perfetto</span><br></pre></td></tr></table></figure><p>编译参考：<a href="https://perfetto.dev/docs/contributing/build-instructions">Perfetto build instructions - Perfetto Tracing Docs</a></p><p>2.替换so和bin文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">out/target/product/qssi/system/lib64/libperfetto.so</span><br><span class="line">out/target/product/qssi/system/bin/perfetto</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;station2使用perfetto得到的trace文件很小&lt;/p&gt;
&lt;h2 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="problem" scheme="http://example.com/tags/problem/"/>
    
  </entry>
  
  <entry>
    <title>station2卡顿</title>
    <link href="http://example.com/2024/03/27/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/station2%E5%8D%A1%E9%A1%BF/"/>
    <id>http://example.com/2024/03/27/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/station2%E5%8D%A1%E9%A1%BF/</id>
    <published>2024-03-27T07:12:51.842Z</published>
    <updated>2024-03-27T07:21:24.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-问题背景"><a href="#1-问题背景" class="headerlink" title="1.问题背景"></a>1.问题背景</h1><p>station2设备滑动屏幕感到明显卡顿</p><h1 id="2-分析过程"><a href="#2-分析过程" class="headerlink" title="2.分析过程"></a>2.分析过程</h1><h2 id="2-1-trace信息"><a href="#2-1-trace信息" class="headerlink" title="2.1 trace信息"></a>2.1 trace信息</h2><p>adb登录到板端，进入sdcard目录，然后运行：</p><p>atrace -b 19200 -o .&#x2F;sdcard&#x2F;mytrace gfx input view webview wm am sm hal res dalvik rs ss sched freq power camera -t 20<br>adb pull将mytrace传到本地，<br>使用systrace.py转换成html格式</p><p>.&#x2F;systrace.py –from-file mytrace</p><p><img src="D:\DingTalkAppData\DingTalk\216604157_v2\resource_cache\c7\c7cbc29b0aad4d04e5fbc26d1c2612bb.png" alt="c7cbc29b0aad4d04e5fbc26d1c2612bb"></p><h3 id="流程梳理"><a href="#流程梳理" class="headerlink" title="流程梳理"></a>流程梳理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ops-&gt;wait_for_commit_done</span><br><span class="line">sde_encoder_phys_wb_wait_for_commit_done</span><br><span class="line">_sde_encoder_phys_wb_wait_for_idle</span><br><span class="line">wait_info.wq = &amp;phys_enc-&gt;pending_kickoff_wq; <span class="comment">//Wait queue for blocking until kickoff completes</span></span><br><span class="line">_sde_encoder_wait_timeout</span><br></pre></td></tr></table></figure><h3 id="正常vs异常日志对比"><a href="#正常vs异常日志对比" class="headerlink" title="正常vs异常日志对比"></a>正常vs异常日志对比</h3><p>1.正常日志</p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240326111508593.png" alt="image-20240326111508593"></p><p>2.异常日志</p><p>异常打印：</p><p><img src="https://static.dingtalk.com/media/lQLPJwWXZJoQWFnMrs0D6bA0C31KiBlddwXoUCA_X7gA_1001_174.png" alt="img"></p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240320164642418.png" alt="image-20240320164642418"></p><h2 id="2-2-使能drm日志"><a href="#2-2-使能drm日志" class="headerlink" title="2.2 使能drm日志"></a>2.2 使能drm日志</h2><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240319215059045.png" alt="image-20240319215059045"></p><p>echo 0x1ff &gt; &#x2F;sys&#x2F;module&#x2F;drm&#x2F;parameters&#x2F;debug</p><h3 id="2-2-1-wait-timeout等待时存在-sde-fence-trigger"><a href="#2-2-1-wait-timeout等待时存在-sde-fence-trigger" class="headerlink" title="2.2.1 wait_timeout等待时存在_sde_fence_trigger"></a>2.2.1 wait_timeout等待时存在_sde_fence_trigger</h3><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240320165437477.png" alt="image-20240320165437477"></p><h3 id="2-2-2-异常日志中存在DRM-IOCTL-WAIT-VBLANK"><a href="#2-2-2-异常日志中存在DRM-IOCTL-WAIT-VBLANK" class="headerlink" title="2.2.2 异常日志中存在DRM_IOCTL_WAIT_VBLANK"></a>2.2.2 异常日志中存在DRM_IOCTL_WAIT_VBLANK</h3><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240320182713784.png" alt="image-20240320182713784"></p><p>正常日志：</p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240320182728940.png" alt="image-20240320182728940"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sde_crtc_get_vblank_counter</span><br><span class="line">drm_update_vblank_count</span><br><span class="line">sde_crtc_vblank_cb</span><br><span class="line">drm_wait_vblank_ioctl</span><br></pre></td></tr></table></figure><h3 id="2-2-3-drm-vblank"><a href="#2-2-3-drm-vblank" class="headerlink" title="2.2.3 drm_vblank"></a>2.2.3 drm_vblank</h3><p>drm用vblank来抽象vsync，vsync是display模块产生的，正常情况下开启后会按照一定时间触发中断。</p><p>drm driver中会注册vsync的中断服务程序，便于软件进行处理异常，包括vsync。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#la_vendor/kernel_platform/msm-kernel/drivers/gpu/drm/msm/disp/dpu1/dpu_crtc.c</span><br><span class="line"><span class="type">void</span> <span class="title function_">dpu_crtc_vblank_callback</span><span class="params">(<span class="keyword">struct</span> drm_crtc *crtc)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">dpu_crtc</span> *<span class="title">dpu_crtc</span> =</span> to_dpu_crtc(crtc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* keep statistics on vblank callback - with auto reset via debugfs */</span></span><br><span class="line">        <span class="keyword">if</span> (ktime_compare(dpu_crtc-&gt;vblank_cb_time, ktime_set(<span class="number">0</span>, <span class="number">0</span>)) == <span class="number">0</span>)</span><br><span class="line">                dpu_crtc-&gt;vblank_cb_time = ktime_get();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                dpu_crtc-&gt;vblank_cb_count++;</span><br><span class="line">        drm_crtc_handle_vblank(crtc);</span><br><span class="line">        trace_dpu_crtc_vblank_cb(DRMID(crtc));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/89fa7adc5b2d42f9858d234892151bd6.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">dp_display_request_irq</span><br><span class="line">devm_request_irq(dp_display-&gt;drm_dev-&gt;dev, dp-&gt;irq,</span><br><span class="line">                     dp_display_irq_handler,</span><br><span class="line">                     IRQF_TRIGGER_HIGH, &quot;dp_display_isr&quot;, dp);</span><br><span class="line"> </span><br><span class="line">irq-&gt;name = &quot;vsync_irq&quot;;</span><br><span class="line">irq-&gt;cb.func = dpu_encoder_phys_vid_underrun_irq;</span><br><span class="line">dpu_encoder_phys_vid_vblank_irq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">static const struct dpu_encoder_virt_ops dpu_encoder_parent_ops = &#123;</span><br><span class="line">        .handle_vblank_virt = dpu_encoder_vblank_callback,</span><br><span class="line">        .handle_underrun_virt = dpu_encoder_underrun_callback,</span><br><span class="line">        .handle_frame_done = dpu_encoder_frame_done_callback,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">dpu_encoder_vblank_callback</span><br><span class="line">    dpu_crtc_vblank_callback</span><br><span class="line">drm_crtc_handle_vblank</span><br><span class="line"></span><br><span class="line">drm_crtc_handle_vblank</span><br><span class="line">drm_handle_vblank</span><br><span class="line">drm_update_vblank_count(dev, pipe, true);</span><br></pre></td></tr></table></figure><p>看到store_vblank里会把vblank-&gt;count+1; 然后会唤醒等待队列。</p><p>中断里把vblank count+1；中断是display模块产生的，如果刷新率为60帧，每16.6ms就会来一个中断，这个操作与user space无关。</p><p>drm_wait_vblank_ioctl等到vblank count之后就会唤醒进程，并返回给user。</p><p><img src="https://img-blog.csdnimg.cn/direct/dfd6d08eba3a428d92f01be7861d8015.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">[  192.136009] [drm:_sde_encoder_wait_timeout:369] [sde error]zyr wait_event_timeout1 info-&gt;atomic_cnt:0, info-&gt;count_check:0</span><br><span class="line">[  192.136222] [drm:sde_encoder_phys_vid_vblank_irq:536] [sde error]zyr sde_encoder_phys_vid_vblank_irq1 pending_retire_fence_cnt:0</span><br><span class="line">[  192.136229] [drm:sde_encoder_phys_vid_vblank_irq:543] [sde error]zyr sde_encoder_phys_vid_vblank_irq2 pending_retire_fence_cnt:0</span><br><span class="line">1.第一次drm_handle_vblank</span><br><span class="line">drm_update_vblank_count</span><br><span class="line">__get_vblank_counter</span><br><span class="line">crtc-&gt;funcs-&gt;get_vblank_counter</span><br><span class="line">sde_crtc_get_vblank_counter</span><br><span class="line">[  192.136892] [drm:sde_crtc_get_vblank_counter [msm_drm]] crtc:115 enc:56 is_built_in:1 vblank_cnt:1397</span><br><span class="line">[  192.137526] [drm:sde_crtc_get_vblank_counter [msm_drm]] crtc:115 enc:56 is_built_in:1 vblank_cnt:1397</span><br><span class="line">[  192.137543] msm_drm ae00000.qcom,mdss_mdp: [drm:drm_update_vblank_count] updating vblank count on crtc 0: current=1397, diff=1, hw=1397 hw_last=1396</span><br><span class="line">drm_handle_vblank_events</span><br><span class="line">[  192.137557] msm_drm ae00000.qcom,mdss_mdp: [drm:drm_handle_vblank_events] vblank event on 1398, current 1398</span><br><span class="line">vblank_disable_fn</span><br><span class="line">[  192.137565] msm_drm ae00000.qcom,mdss_mdp: [drm:drm_vblank_put] disabling vblank on crtc 0</span><br><span class="line">vblank_disable_fn</span><br><span class="line">drm_vblank_disable_and_save</span><br><span class="line">drm_update_vblank_count</span><br><span class="line">[  192.138190] [drm:sde_crtc_get_vblank_counter [msm_drm]] crtc:115 enc:56 is_built_in:1 vblank_cnt:1397</span><br><span class="line">[  192.138817] [drm:sde_crtc_get_vblank_counter [msm_drm]] crtc:115 enc:56 is_built_in:1 vblank_cnt:1397</span><br><span class="line">[  192.138831] msm_drm ae00000.qcom,mdss_mdp: [drm:drm_update_vblank_count] updating vblank count on crtc 0: current=1398, diff=0, hw=1397 hw_last=1397</span><br><span class="line">__disable_vblank</span><br><span class="line">crtc-&gt;funcs-&gt;disable_vblank</span><br><span class="line">sde_crtc_disable_vblank</span><br><span class="line">[  192.139459] [drm:sde_crtc_disable_vblank [msm_drm]] dev=ffffff8049651000, crtc=0</span><br><span class="line">vblank_ctrl_queue_work</span><br><span class="line">vblank_ctrl_worker</span><br><span class="line">sde_crtc_vblank</span><br><span class="line">_sde_crtc_vblank_enable</span><br><span class="line">sde_encoder_register_vblank_callback</span><br><span class="line">sde_crtc_vblank_cb</span><br><span class="line">[  192.140176] [drm:sde_crtc_vblank_cb [msm_drm]] crtc115, ts:192119469</span><br><span class="line">[  192.140814] [drm:sde_encoder_register_vblank_callback [msm_drm]] enc56 </span><br><span class="line">sde_encoder_register_vblank_callback</span><br><span class="line">sde_encoder_phys_vid_control_vblank_irq</span><br><span class="line">[  192.142159] [drm:sde_encoder_phys_vid_control_vblank_irq [msm_drm]] enc56 intf1 [sde_encoder_register_vblank_callback+0x13c/0x210 [msm_drm]] enable=0/2</span><br><span class="line"></span><br><span class="line">2.DRM_IOCTL_WAIT_VBLANK SDM_EventThread调用</span><br><span class="line"></span><br><span class="line">[  443.228239] CPU: 2 PID: 1201 Comm: SDM_EventThread Tainted: G        W  O      5.10.198-qki-consolidate-android12-9-g436c7dd2d5cf-dirty #1</span><br><span class="line">[  443.228272] Hardware name: Qualcomm Technologies, Inc. Parrot WCN6750 QRD (DT)</span><br><span class="line">[  443.228299] Call trace:</span><br><span class="line">[  443.229730] dump_backtrace.cfi_jt+0x0/0x8</span><br><span class="line">[  443.229749] show_stack+0x1c/0x2c</span><br><span class="line">[  443.229768] dump_stack_lvl+0xf0/0x164</span><br><span class="line">[  443.229780] dump_stack+0x1c/0x2c</span><br><span class="line">[  443.231180] sde_crtc_enable_vblank+0x4c/0xe8 [msm_drm]</span><br><span class="line">[  443.231220] drm_vblank_enable+0xb8/0x220</span><br><span class="line">[  443.231235] drm_vblank_get+0x80/0x16c</span><br><span class="line">[  443.231250] drm_wait_vblank_ioctl+0x15c/0x738</span><br><span class="line">[  443.232686] drm_ioctl_kernel+0x100/0x1d4</span><br><span class="line">[  443.232699] drm_ioctl+0x228/0x34c</span><br><span class="line">[  443.232718] __arm64_sys_ioctl+0xa8/0x110</span><br><span class="line">[  443.232736] el0_svc_common.llvm.4263132210126967612+0xd8/0x20c</span><br><span class="line">[  443.232748] do_el0_svc+0x28/0x98</span><br><span class="line">[  443.232765] el0_svc+0x24/0x38</span><br><span class="line">[  443.232777] el0_sync_handler+0x88/0xec</span><br><span class="line">[  443.232793] el0_sync+0x1b8/0x1c0</span><br><span class="line"></span><br><span class="line">[  192.142406] [drm:drm_ioctl] comm=&quot;SDM_EventThread&quot; pid=1222, dev=0xe200, auth=1, DRM_IOCTL_WAIT_VBLANK</span><br><span class="line">DRM_IOCTL_DEF(DRM_IOCTL_WAIT_VBLANK, drm_wait_vblank_ioctl, DRM_UNLOCKED) //la_vendor/kernel_platform/msm-kernel/drivers/gpu/drm/drm_ioctl.c</span><br><span class="line">drm_wait_vblank_ioctl</span><br><span class="line">drm_vblank_get</span><br><span class="line">drm_vblank_enable</span><br><span class="line">__enable_vblank</span><br><span class="line">crtc-&gt;funcs-&gt;enable_vblank</span><br><span class="line">sde_crtc_enable_vblank</span><br><span class="line">[  192.143057] [drm:sde_crtc_enable_vblank [msm_drm]] dev=ffffff8049651000, crtc=0</span><br><span class="line">[  192.143126] msm_drm ae00000.qcom,mdss_mdp: [drm:drm_vblank_enable] enabling vblank on crtc 0, ret: 0</span><br><span class="line">drm_update_vblank_count</span><br><span class="line">sde_crtc_get_vblank_counter</span><br><span class="line">[  192.143764] [drm:sde_crtc_get_vblank_counter [msm_drm]] crtc:115 enc:56 is_built_in:1 vblank_cnt:1397</span><br><span class="line">[  192.143945] [drm:sde_encoder_register_vblank_callback [msm_drm]] enc56 </span><br><span class="line">[  192.144570] [drm:sde_crtc_get_vblank_counter [msm_drm]] crtc:115 enc:56 is_built_in:1 vblank_cnt:1397</span><br><span class="line">[  192.144915] [drm:sde_encoder_phys_vid_control_vblank_irq [msm_drm]] enc56 intf1 [sde_encoder_register_vblank_callback+0x13c/0x210 [msm_drm]] enable=1/1</span><br><span class="line">[  192.144924] msm_drm ae00000.qcom,mdss_mdp: [drm:drm_update_vblank_count] updating vblank count on crtc 0: current=1398, diff=0, hw=1397 hw_last=1397</span><br><span class="line">[  192.145073] msm_drm ae00000.qcom,mdss_mdp: [drm:drm_wait_vblank_ioctl] event on vblank count 1399, current 1398, crtc 0</span><br><span class="line">[  192.148365] [drm:drm_mode_object_get] OBJ ID: 57 (6)</span><br><span class="line">[  192.148383] [drm:drm_atomic_get_connector_state] Added [CONNECTOR:57:DSI-1] ffffff87c4eea000 state to ffffff87f4783600</span><br><span class="line">[  192.148410] [drm:drm_mode_object_get] OBJ ID: 172 (3)</span><br><span class="line">[  192.148423] [drm:drm_atomic_get_crtc_state] Added [CRTC:115:crtc-0] ffffff80495a8000 state to ffffff87f4783600</span><br><span class="line">[  192.149174] [drm:msm_property_atomic_set [msm_drm]] RETIRE_FENCE_OFFSET - 1</span><br><span class="line">[  192.152909] [drm:sde_encoder_phys_vid_vblank_irq:536] [sde error]zyr sde_encoder_phys_vid_vblank_irq1 pending_retire_fence_cnt:0</span><br><span class="line">[  192.152919] [drm:sde_encoder_phys_vid_vblank_irq:543] [sde error]zyr sde_encoder_phys_vid_vblank_irq2 pending_retire_fence_cnt:0</span><br><span class="line">[  192.153611] [drm:sde_crtc_get_vblank_counter [msm_drm]] crtc:115 enc:56 is_built_in:1 vblank_cnt:1398</span><br><span class="line">[  192.154246] [drm:sde_crtc_get_vblank_counter [msm_drm]] crtc:115 enc:56 is_built_in:1 vblank_cnt:1398</span><br><span class="line">[  192.154266] msm_drm ae00000.qcom,mdss_mdp: [drm:drm_update_vblank_count] updating vblank count on crtc 0: current=1398, diff=1, hw=1398 hw_last=1397</span><br><span class="line">[  192.154279] msm_drm ae00000.qcom,mdss_mdp: [drm:drm_handle_vblank_events] vblank event on 1399, current 1399</span><br><span class="line">[  192.154288] msm_drm ae00000.qcom,mdss_mdp: [drm:drm_vblank_put] disabling vblank on crtc 0</span><br><span class="line">[  192.154922] [drm:sde_crtc_get_vblank_counter [msm_drm]] crtc:115 enc:56 is_built_in:1 vblank_cnt:1398</span><br><span class="line">[  192.155554] [drm:sde_crtc_get_vblank_counter [msm_drm]] crtc:115 enc:56 is_built_in:1 vblank_cnt:1398</span><br><span class="line">[  192.155572] msm_drm ae00000.qcom,mdss_mdp: [drm:drm_update_vblank_count] updating vblank count on crtc 0: current=1399, diff=0, hw=1398 hw_last=1398</span><br><span class="line">[  192.156208] [drm:sde_crtc_disable_vblank [msm_drm]] dev=ffffff8049651000, crtc=0</span><br><span class="line">[  192.156924] [drm:sde_crtc_vblank_cb [msm_drm]] crtc115, ts:192136153</span><br><span class="line">[  192.157566] [drm:sde_encoder_register_vblank_callback [msm_drm]] enc56 </span><br><span class="line">[  192.158975] [drm:sde_encoder_phys_vid_control_vblank_irq [msm_drm]] enc56 intf1 [sde_encoder_register_vblank_callback+0x13c/0x210 [msm_drm]] enable=0/2</span><br><span class="line"></span><br><span class="line">[  192.159147] [drm:drm_ioctl] comm=&quot;SDM_EventThread&quot; pid=1222, dev=0xe200, auth=1, DRM_IOCTL_WAIT_VBLANK</span><br><span class="line">[  192.159794] [drm:sde_crtc_enable_vblank [msm_drm]] dev=ffffff8049651000, crtc=0</span><br><span class="line">[  192.159874] msm_drm ae00000.qcom,mdss_mdp: [drm:drm_vblank_enable] enabling vblank on crtc 0, ret: 0</span><br><span class="line">[  192.160514] [drm:sde_crtc_get_vblank_counter [msm_drm]] crtc:115 enc:56 is_built_in:1 vblank_cnt:1398</span><br><span class="line">[  192.161157] [drm:sde_crtc_get_vblank_counter [msm_drm]] crtc:115 enc:56 is_built_in:1 vblank_cnt:1398</span><br><span class="line">[  192.161342] [drm:sde_encoder_register_vblank_callback [msm_drm]] enc56 </span><br><span class="line">[  192.161353] msm_drm ae00000.qcom,mdss_mdp: [drm:drm_update_vblank_count] updating vblank count on crtc 0: current=1399, diff=0, hw=1398 hw_last=1398</span><br><span class="line">[  192.161747] [drm:sde_encoder_phys_vid_control_vblank_irq [msm_drm]] enc56 intf1 [sde_encoder_register_vblank_callback+0x13c/0x210 [msm_drm]] enable=1/1</span><br><span class="line">[  192.161760] [drm:_sde_encoder_wait_timeout:373] [sde error]zyr wait_event_timeout2 info-&gt;atomic_cnt:0, info-&gt;count_check:0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240321161154281.png" alt="image-20240321161154281"></p><p><img src="https://static.dingtalk.com/media/lQLPJx6RI95fnPXNA3nNBYKwI_0gmcX9SfQF6YlcuEm2AQ_1410_889.png" alt="img"></p><p><img src="https://static.dingtalk.com/media/lQLPKHTo9YWTLPXNAtvNBuqwk1yOyzWEbAEF6YlcuEm2AA_1770_731.png" alt="img"></p><h4 id="1-内核态"><a href="#1-内核态" class="headerlink" title="1.内核态"></a>1.内核态</h4><blockquote><p>[  443.228239] CPU: 2 PID: 1201 Comm: SDM_EventThread Tainted: G        W  O      5.10.198-qki-consolidate-android12-9-g436c7dd2d5cf-dirty #1<br>[  443.228272] Hardware name: Qualcomm Technologies, Inc. Parrot WCN6750 QRD (DT)<br>[  443.228299] Call trace:<br>[  443.229730] dump_backtrace.cfi_jt+0x0&#x2F;0x8<br>[  443.229749] show_stack+0x1c&#x2F;0x2c<br>[  443.229768] dump_stack_lvl+0xf0&#x2F;0x164<br>[  443.229780] dump_stack+0x1c&#x2F;0x2c<br>[  443.231180] sde_crtc_enable_vblank+0x4c&#x2F;0xe8 [msm_drm]<br>[  443.231220] drm_vblank_enable+0xb8&#x2F;0x220<br>[  443.231235] drm_vblank_get+0x80&#x2F;0x16c<br>[  443.231250] drm_wait_vblank_ioctl+0x15c&#x2F;0x738<br>[  443.232686] drm_ioctl_kernel+0x100&#x2F;0x1d4<br>[  443.232699] drm_ioctl+0x228&#x2F;0x34c<br>[  443.232718] __arm64_sys_ioctl+0xa8&#x2F;0x110<br>[  443.232736] el0_svc_common.llvm.4263132210126967612+0xd8&#x2F;0x20c<br>[  443.232748] do_el0_svc+0x28&#x2F;0x98<br>[  443.232765] el0_svc+0x24&#x2F;0x38<br>[  443.232777] el0_sync_handler+0x88&#x2F;0xec<br>[  443.232793] el0_sync+0x1b8&#x2F;0x1c0</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">dp_display_request_irq</span><br><span class="line">devm_request_irq(dp_display-&gt;drm_dev-&gt;dev, dp-&gt;irq,</span><br><span class="line">                     dp_display_irq_handler,</span><br><span class="line">                     IRQF_TRIGGER_HIGH, &quot;dp_display_isr&quot;, dp);</span><br><span class="line"> </span><br><span class="line">irq-&gt;name = &quot;vsync_irq&quot;;</span><br><span class="line">irq-&gt;cb.func = dpu_encoder_phys_vid_underrun_irq;</span><br><span class="line">dpu_encoder_phys_vid_vblank_irq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">static const struct dpu_encoder_virt_ops dpu_encoder_parent_ops = &#123;</span><br><span class="line">        .handle_vblank_virt = dpu_encoder_vblank_callback,</span><br><span class="line">        .handle_underrun_virt = dpu_encoder_underrun_callback,</span><br><span class="line">        .handle_frame_done = dpu_encoder_frame_done_callback,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">dpu_encoder_vblank_callback</span><br><span class="line">    dpu_crtc_vblank_callback</span><br><span class="line">drm_crtc_handle_vblank</span><br></pre></td></tr></table></figure><h4 id="2-用户态"><a href="#2-用户态" class="headerlink" title="2.用户态"></a>2.用户态</h4><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240321160541228.png" alt="image-20240321160541228"></p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240321191611493.png" alt="image-20240321191611493"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">VSyncWorker::Routine</span><br><span class="line">drmWaitVBlank</span><br><span class="line">ret = ioctl(fd, DRM_IOCTL_WAIT_VBLANK, vbl);</span><br></pre></td></tr></table></figure><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240322143446276.png" alt="image-20240322143446276"></p><p>vsync-sf有边沿跳变 但是还是在等待；</p><hr><p>看下dsi-display.c代码</p><h2 id="2-3-DisplayBase-PerformHwCommit-耗时长达1s"><a href="#2-3-DisplayBase-PerformHwCommit-耗时长达1s" class="headerlink" title="2.3 DisplayBase::PerformHwCommit::耗时长达1s"></a>2.3 DisplayBase::PerformHwCommit::耗时长达1s</h2><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240325115224336.png" alt="image-20240325115224336" style="zoom:150%;" /><h3 id="1-HWC框架【CS架构】"><a href="#1-HWC框架【CS架构】" class="headerlink" title="1.HWC框架【CS架构】"></a>1.HWC框架【CS架构】</h3><p><a href="https://blog.csdn.net/runafterhit/article/details/118884165">android多媒体框架介绍（四）显示图形系统之hwc叠加器_hwc layers-CSDN博客</a></p><p>Android 8.0 及更高版本使用一个名为Composer HAL 的 HIDL 接口，用于在 HWC 和 SurfaceFlinger 之间binderized IPC通信。即将上层Androd和底层HAL分别采用两个不用的进程实现，最终调用到vender的具体实现hwc中，中间采用Binder进行通信。形成如下几个关键部分：<br><img src="https://img-blog.csdnimg.cn/20210720080023873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1bmFmdGVyaGl0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>HWC2 Client</strong>在surfaceFlinger的service进程上下文中。<strong>HWC2 Server</strong>表示hwc的hal层服务端有独立的进程process【composer-servic】；</p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240326142729911.png" alt="image-20240326142729911"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HIDL::IComposerClient::executeCommands_2_2::client</span><br><span class="line"></span><br><span class="line">/la_vendor/hardware/qcom/display/composer/QtiComposerClient.cpp</span><br><span class="line">HIDL::IComposerClient::executeCommands_2_2::server(QtiComposerClient)</span><br></pre></td></tr></table></figure><p>SurfaceFlinger传入HWC的过程，都会调用beginCommand,最终都会通过QtiComposerClient::CommandReader::parseCommonCmd来解析</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QtiComposerClient::executeCommands_2_2</span><br><span class="line">QtiComposerClient::CommandReader::parse</span><br><span class="line">QtiComposerClient::CommandReader::parseCommonCmd</span><br><span class="line">QtiComposerClient::CommandReader::parsePresentOrValidateDisplay</span><br><span class="line">HWCDisplayBuiltIn::CommitOrPrepare::</span><br></pre></td></tr></table></figure><p>如果没有Client合成的话，会尝试parsePresentOrValidateDisplay(PRESENT_OR_VALIDATE_DISPLAY)送显</p><p><a href="https://blog.csdn.net/qq_40405527/article/details/123395261">Android Qcom Display学习(四)_presentdisplay-CSDN博客</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HWCDisplayBuiltIn::CommitOrPrepare::</span><br><span class="line">    HWCDisplay::CommitOrPrepare::</span><br><span class="line">        DisplayBase::CommitOrPrepare::</span><br><span class="line">            DisplayBase::<span class="built_in">SetUpCommit</span>(layer_stack)</span><br><span class="line">                DisplayBase::<span class="built_in">Commit</span>(display_comp_ctx_, &amp;disp_layer_stack_)</span><br><span class="line">                    DisplayBase::CommitLocked</span><br><span class="line">                        DisplayBase::PerformHwCommit</span><br><span class="line">                            Fence::Wait</span><br></pre></td></tr></table></figure><h3 id="2-函数调用"><a href="#2-函数调用" class="headerlink" title="2.函数调用"></a>2.函数调用</h3><p>PerformHwCommit -&gt; Fence::wait -&gt; SyncWait(Fence::Get(fence), 1000)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/la_vendor/hardware/qcom/display/sdm/libs/core/display_base.<span class="function">cpp</span></span><br><span class="line"><span class="function">DisplayError <span class="title">DisplayBase::PerformHwCommit</span><span class="params">(HWLayersInfo *hw_layers_info)</span> </span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">1554    <span class="comment">// TODO(user): Workaround for messenger app flicker issue in CWB idle fallback,</span></span></span><br><span class="line"><span class="function">1555    <span class="comment">// to be removed when issue is fixed.</span></span></span><br><span class="line"><span class="function">1556    <span class="title">if</span> <span class="params">(cwb_fence_wait_ &amp;&amp; hw_layers_info-&gt;output_buffer &amp;&amp;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="number">1557</span>        (hw_layers_info-&gt;output_buffer-&gt;release_fence != <span class="literal">nullptr</span>))</span> </span>&#123;</span><br><span class="line"><span class="number">1558</span>      <span class="keyword">if</span> (Fence::<span class="built_in">Wait</span>(hw_layers_info-&gt;output_buffer-&gt;release_fence) != kErrorNone) &#123;</span><br><span class="line"><span class="number">1559</span>        <span class="built_in">DLOGW</span>(<span class="string">&quot;sync_wait error errno = %d, desc = %s&quot;</span>, errno, <span class="built_in">strerror</span>(errno));</span><br><span class="line"><span class="number">1560</span>      &#125;</span><br><span class="line"><span class="number">1561</span>    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/la_vendor/hardware/qcom/display/sdm/libs/utils/fence.cpp</span><br><span class="line"></span><br><span class="line"><span class="number">118</span>  <span class="function"><span class="type">int</span> <span class="title">Fence::Wait</span><span class="params">(<span class="type">const</span> shared_ptr&lt;Fence&gt; &amp;fence)</span> </span>&#123;</span><br><span class="line"><span class="number">119</span>    <span class="built_in">ASSERT_IF_NO_BUFFER_SYNC</span>(g_buffer_sync_handler_);</span><br><span class="line"><span class="number">120</span>  </span><br><span class="line"><span class="number">121</span>    <span class="keyword">return</span> g_buffer_sync_handler_-&gt;<span class="built_in">SyncWait</span>(Fence::<span class="built_in">Get</span>(fence), <span class="number">1000</span>);</span><br><span class="line"><span class="number">122</span>  &#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240325144727986.png" alt="image-20240325144727986"></p><h3 id="3-Wait入参"><a href="#3-Wait入参" class="headerlink" title="3.Wait入参"></a>3.Wait入参</h3><blockquote><p>Fence::Wait(hw_layers_info-&gt;output_buffer-&gt;release_fence)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DisplayError DisplayBase::SetUpCommit(LayerStack *layer_stack)</span><br><span class="line">disp_layer_stack_.info.output_buffer = layer_stack-&gt;output_buffer;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DisplayBuiltIn::SetUpCommit</span><br><span class="line">DisplayBase::SetUpCommit</span><br></pre></td></tr></table></figure><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240325144808392.png" alt="image-20240325144808392"></p><p>可以看到是在performHWcommit中执行了Fence::Wait，后者调用SyncWait(Fence::Get(fence), 1000)等待了1s，与trace中耗时匹配</p><h1 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3.解决方案"></a>3.解决方案</h1><p>注释Fence::wait代码段</p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240326112910428.png" alt="image-20240326112910428"></p><p>注：fence等待代码看注释是去解决messenger应用（facebook）闪烁问题，目前看来对station2无影响，暂时忽略</p><h1 id="4-延伸学习"><a href="#4-延伸学习" class="headerlink" title="4.延伸学习"></a>4.延伸学习</h1><h2 id="4-1-Vsync"><a href="#4-1-Vsync" class="headerlink" title="4.1 Vsync"></a>4.1 Vsync</h2><h3 id="1-Vsync虚拟化"><a href="#1-Vsync虚拟化" class="headerlink" title="1.Vsync虚拟化"></a>1.Vsync虚拟化</h3><p><img src="https://pic1.zhimg.com/80/v2-b506717057826c9e593182544913b17e_720w.webp?source=2c26e567" alt="img"></p><p>SurfaceFlinger中的DisplayVSync（Android S后改名为VsyncController）就是虚拟的VSync源，其需要两个参数来保证与硬件VSync的同步性，第一个是参考点，第二个就是周期。这些都可以开启硬件VSync同步解决。</p><h3 id="2-Vsync同步"><a href="#2-Vsync同步" class="headerlink" title="2.Vsync同步"></a>2.Vsync同步</h3><p>VSync虚拟化的本质就是在软件层面模拟硬件VSync，既然是软件模拟，那么就会存在托盘，如果自己的托盘比较大，那么就需要开启硬件VSync同步来进行安排。</p><p>首先是如何发现间隙比较大？答案是通过fence机制。SurfaceFlinger在每一帧交换HWC的时候，同时都会从HWC那里得到这一帧的PresentFence，它就是这一帧开始刷新到屏幕的信号的时候。</p><p>那驱动什么时候开始刷新一帧至屏幕呢，答案是屏幕VSync来的时候。根据PresentFence的信号时间就可以知道真实的VSync时间。</p><p><img src="D:\DingTalkAppData\DingTalk\216604157_v2\ImageFiles\1711080285888_72073935-8679-4e9e-85E7-3E8C95CD867E.png" alt="1711080285888_72073935-8679-4e9e-85E7-3E8C95CD867E"></p><h3 id="3-Vsync分配"><a href="#3-Vsync分配" class="headerlink" title="3.Vsync分配"></a>3.Vsync分配</h3><p><img src="https://picx.zhimg.com/80/v2-9ac6437e04a24c407b4b578aea49b07b_720w.webp?source=2c26e567" alt="img"></p><h2 id="4-2-Qcom-display"><a href="#4-2-Qcom-display" class="headerlink" title="4.2 Qcom display"></a>4.2 Qcom display</h2><h3 id="1-图显系统框架图"><a href="#1-图显系统框架图" class="headerlink" title="1.图显系统框架图"></a>1.图显系统框架图</h3><p><img src="https://img-blog.csdnimg.cn/c03d564c64374a0393762fd3b0a83fd3.png" alt="drm"></p><p>libdrm:对底层定义在drm_ioctl.c 中各种IOCTL接口进行封装，向上层提供通用的API接口<br>GEM:Graphic Execution Manager，主要负责显示buffer的分配和释放，也是GPU唯一用到DRM的地方。<br>KMS:Kernel Mode Setting，负责显示buffer的切换，多图层的合成方式，显示位置。设置分辨率、刷新率等</p><p>KMS和DRM两者都是通过libdrm来进行调用的，但两者是具有相对独立性的，DPU对应的KMS对应于系统侧的HWC Composer，其重点是在于送显，而GPU对应DRM则侧重应用侧相关的渲染绘制。</p><h3 id="2-KMS流程"><a href="#2-KMS流程" class="headerlink" title="2.KMS流程"></a>2.KMS流程</h3><p><img src="https://img-blog.csdnimg.cn/f827da455ca14ce48788724e7a99765c.png" alt="在这里插入图片描述"></p><h3 id="3-SurfaceFlinger传入HWC的过程"><a href="#3-SurfaceFlinger传入HWC的过程" class="headerlink" title="3.SurfaceFlinger传入HWC的过程"></a>3.SurfaceFlinger传入HWC的过程</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HWCSession::PresentDisplay</span><br><span class="line">HWCDisplayBuiltIn::Present</span><br><span class="line">HWCDisplay::CommitLayerStack  <span class="comment">// DumpInputBuffers() 高通dump inputbuffer的地方</span></span><br><span class="line">DisplayBuiltIn::Commit</span><br><span class="line">DisplayBase::Commit</span><br><span class="line"></span><br><span class="line">HWPeripheralDRM::Commit</span><br><span class="line">HWDeviceDRM::AtomicCommit</span><br><span class="line">    HWDeviceDRM::SetupAtomic <span class="comment">// fb id用于对应framebuffer</span></span><br><span class="line">DRMAtomicReq::Commit</span><br><span class="line">drmModeAtomicCommit</span><br><span class="line">drm_atomic_commit</span><br></pre></td></tr></table></figure><h3 id="4-fence机制"><a href="#4-fence机制" class="headerlink" title="4.fence机制"></a>4.fence机制</h3><p>fence：android4.4开始引入的一种资源同步机制，主要用于处理跨硬件场景，如CPU、GPU、HWC之间的buffer资源同步。可以将fence理解为一种资源锁。</p><p>举个例子，customer使用producer提供的buffer，使用完成后要还给producer生产，如果没有fence，通常是customer完全使用完成后开始归还转移buffer，拥有权&#x2F;使用权 一起给到producer，producer获取到后可以马上使用。</p><p>从资源并发访问的原则上看其实customer使用完成后producer已经可以写了，在buffer转移这个过程实际上没有任何人在使用这个buffer。</p><p>fence的目的就是customer可以在开始用甚至是收到buffer的时候 开始归还转移buffer，同时也转移这个buffer对应的fence，producer收到buffer后拿到拥有权但不一定能使用， 等到需要使用的时候通过wait fence来阻塞查看buffer是否被customer使用完，wait后拿到使用权开始写。</p><p>理想的buffer轮转如下，保证buffer始终有人在使用。</p><p><img src="https://img-blog.csdnimg.cn/20190414100532761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1bmFmdGVyaGl0,size_16,color_FFFFFF,t_70" alt="img"></p><h3 id="5-PLANE"><a href="#5-PLANE" class="headerlink" title="5.PLANE"></a>5.PLANE</h3><p>PLANE代表显示图层，每个 CRTC 需要定义一个 primary plane 以及可选的 overlay plane、cursor plane</p><p>PLANE 存在的意义主要有两点：增强系统灵活性、提高系统性能<br>(1)对于背景和光标等变化不频繁的基本图显输出，可用通用 plane 来实现。而那些频繁变化则可由专用的 plane 来实现。<br>(2)plane 具备图像缩放、剪裁、多图层叠加等基本的图像处理功能，因此，可以让 GPU 来将更多的精力放在图形渲染上。</p><h3 id="6-CRTC"><a href="#6-CRTC" class="headerlink" title="6.CRTC"></a>6.CRTC</h3><p>CRTC从drm_plane 接收RGB像素数据并将其混合到一起，传输给下级显示设备drm_encoder。<br>CRTC 模块存在的意义主要有以下三点：<br>(1)统一协调 FB、DRM、用户空间代码之间对图显输出的控制<br>(2)图显模式的配置权回收到 kernel 空间，避免用户空间代码直接控制图显控制器引起 kernel panic<br>(3)kernel 空间实现的图显输出暂停与恢复相关代码，可以方便的调用图显控制器的配置函数</p><h3 id="7-ENCODER"><a href="#7-ENCODER" class="headerlink" title="7.ENCODER"></a>7.ENCODER</h3><p>DRM Encoder 和 Connector 模块由图显外设抽象而来，Encoder 属于控制器部分，将内存的像素编码转换为显示器所需要的信号例如VGA、MIPI；Virutal Encoder管理一个逻辑显示，包含一个或多个物理encoder，每个物理encoder对应一个INTF硬件模块。</p><h3 id="8-CONNECTOR"><a href="#8-CONNECTOR" class="headerlink" title="8.CONNECTOR"></a>8.CONNECTOR</h3><p>Connector 包含外设 PHY 或者显示器参数，代表连接的显示设备连接状态，支持的视频模式等。</p><h1 id="5-疑问点"><a href="#5-疑问点" class="headerlink" title="5.疑问点"></a>5.疑问点</h1><h4 id="pending-kickoff-cnt"><a href="#pending-kickoff-cnt" class="headerlink" title="pending_kickoff_cnt"></a>pending_kickoff_cnt</h4><p>wait_timeout中atomic_cnt是pending_kickoff_cnt</p><p>打印值，为啥不为0</p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240321222749624.png" alt="image-20240321222749624"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static inline int sde_encoder_phys_inc_pending(struct sde_encoder_phys *phys)</span><br><span class="line">&#123;</span><br><span class="line">        SDE_ERROR(&quot;zyr sde_encoder_phys_inc_pending &amp;phys_enc-&gt;pending_kickoff_cnt 1:%d\n&quot;,atomic_read(&amp;phys-&gt;pending_kickoff_cnt));</span><br><span class="line">        return atomic_inc_return(&amp;phys-&gt;pending_kickoff_cnt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面加的1</p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240321223749901.png" alt="image-20240321223749901"></p><p>得看下sde_encoder_phys_vid_vblank_irq这个函数在做啥</p><p>1.399889-415972为啥有个_sde_crtc_vblank_enable</p><p>2.415972-425203 irq2到irq1为啥有10ms</p><h1 id="6-参考链接"><a href="#6-参考链接" class="headerlink" title="6.参考链接"></a>6.参考链接</h1><p>1.<a href="https://blog.csdn.net/fengchaochao123/article/details/135262216">DRM驱动（九）之drm_vblank_drmwaitvblank-CSDN博客</a></p><p>2.<a href="https://blog.csdn.net/dshj2007/article/details/106225175">vsync从中断到用户态的经历_hmid vsync中断-CSDN博客</a></p><p>3.<a href="https://zhuanlan.zhihu.com/p/616697833">帧同步依赖技术理解：安卓图形系统及Vsync - 知乎 (zhihu.com)</a></p><p>4.<a href="https://blog.csdn.net/runafterhit/article/details/89293013">简图记录-android fence机制-CSDN博客</a></p><p>5.<a href="https://blog.csdn.net/jinzhuojun/article/details/39698317">Android中的GraphicBuffer同步机制-Fence_android graphicbuffer-CSDN博客</a></p><p>6.<a href="https://blog.csdn.net/runafterhit/article/details/118884165">android多媒体框架介绍（四）显示图形系统之hwc叠加器_hwc layers-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-问题背景&quot;&gt;&lt;a href=&quot;#1-问题背景&quot; class=&quot;headerlink&quot; title=&quot;1.问题背景&quot;&gt;&lt;/a&gt;1.问题背景&lt;/h1&gt;&lt;p&gt;station2设备滑动屏幕感到明显卡顿&lt;/p&gt;
&lt;h1 id=&quot;2-分析过程&quot;&gt;&lt;a href=&quot;#2-分</summary>
      
    
    
    
    
    <category term="problem" scheme="http://example.com/tags/problem/"/>
    
  </entry>
  
  <entry>
    <title>使用mac充电后一直震动红灯</title>
    <link href="http://example.com/2024/03/27/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/mac%E5%85%85%E7%94%B5%E5%90%8E%E4%B8%80%E7%9B%B4%E9%9C%87%E5%8A%A8%E7%BA%A2%E7%81%AF/"/>
    <id>http://example.com/2024/03/27/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/mac%E5%85%85%E7%94%B5%E5%90%8E%E4%B8%80%E7%9B%B4%E9%9C%87%E5%8A%A8%E7%BA%A2%E7%81%AF/</id>
    <published>2024-03-27T07:12:51.839Z</published>
    <updated>2024-03-27T07:20:58.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>mac充电器充电（应该是插好的），早上来看电量没增加，插拔一次，震动了几下后红灯</p><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="number">3209.332272</span>] ---[ end trace c8d1c26a5a3e68b1 ]---</span><br><span class="line">[ <span class="number">3209.332286</span>] Unable to handle kernel <span class="literal">NULL</span> pointer dereference at virtual address <span class="number">0000000000000020</span></span><br><span class="line">[ <span class="number">3209.341529</span>] Mem <span class="built_in">abort</span> info:</span><br><span class="line">[ <span class="number">3209.344474</span>]   ESR = <span class="number">0x96000005</span></span><br><span class="line">[ <span class="number">3209.347662</span>]   Exception class = DABT (current EL), IL = <span class="number">32</span> bits</span><br><span class="line">[ <span class="number">3209.353795</span>]   SET = <span class="number">0</span>, FnV = <span class="number">0</span></span><br><span class="line">[ <span class="number">3209.357033</span>]   EA = <span class="number">0</span>, S1PTW = <span class="number">0</span></span><br><span class="line">[ <span class="number">3209.360358</span>] Data <span class="built_in">abort</span> info:</span><br><span class="line">[ <span class="number">3209.363410</span>]   ISV = <span class="number">0</span>, ISS = <span class="number">0x00000005</span></span><br><span class="line">[ <span class="number">3209.367457</span>]   CM = <span class="number">0</span>, WnR = <span class="number">0</span></span><br><span class="line">[ <span class="number">3209.370537</span>] user pgtable: <span class="number">4</span>k pages, <span class="number">39</span>-bit VAs, pgdp = <span class="number">000000000943e194</span></span><br><span class="line">[ <span class="number">3209.377427</span>] [<span class="number">0000000000000020</span>] pgd=<span class="number">0000000000000000</span>, pud=<span class="number">0000000000000000</span></span><br><span class="line">[ <span class="number">3209.384468</span>] Internal error: Oops: <span class="number">96000005</span> [#<span class="number">1</span>] PREEMPT SMP</span><br><span class="line">[ <span class="number">3209.390195</span>] Modules linked in: wlan(O) machine_dlkm(O) wcd938x_slave_dlkm(O) wcd938x_dlkm(O) wcd9xxx_dlkm(O) mbhc_dlkm(O) tx_macro_dlkm(O) rx_macro_dlkm(O) va_macro_dlkm(O) wsa_macro_dlkm(O) swr_ctrl_dlkm(O) bolero_cdc_dlkm(O) wsa881x_dlkm(O) wcd_core_dlkm(O) stub_dlkm(O) hdmi_dlkm(O) swr_dlkm(O) pinctrl_lpi_dlkm(O) pinctrl_wcd_dlkm(O) usf_dlkm(O) native_dlkm(O) platform_dlkm(O) q6_dlkm(O) adsp_loader_dlkm(O) apr_dlkm(O) snd_event_dlkm(O) q6_notifier_dlkm(O) q6_pdr_dlkm(O) msm_11ad_proxy</span><br><span class="line">[ <span class="number">3209.434453</span>] Process init (pid: <span class="number">1</span>, <span class="built_in">stack</span> limit = <span class="number">0x00000000aa1f60b5</span>)</span><br><span class="line">[ <span class="number">3209.440886</span>] CPU: <span class="number">4</span> PID: <span class="number">1</span> Comm: init Tainted: G S      W  O      <span class="number">4.19</span><span class="number">.157</span>-perf #<span class="number">1</span></span><br><span class="line">[ <span class="number">3209.448560</span>] Hardware name: Qualcomm Technologies, Inc. kona-xr-overlay Standalone (DT)</span><br><span class="line">[ <span class="number">3209.456681</span>] pstate: <span class="number">60400005</span> (nZCv daif +PAN -UAO)</span><br><span class="line">[ <span class="number">3209.461609</span>] pc : klist_del+<span class="number">0x20</span>/<span class="number">0x88</span></span><br><span class="line">[ <span class="number">3209.465292</span>] lr : device_del+<span class="number">0xa4</span>/<span class="number">0x4b0</span></span><br><span class="line">[ <span class="number">3209.469148</span>] sp : ffffff800805bb90</span><br><span class="line">[ <span class="number">3209.470791</span>] aw210xx_led <span class="number">1</span><span class="number">-0020</span>: usb: <span class="number">0</span>, pc_port: <span class="number">0</span></span><br><span class="line">[ <span class="number">3209.472558</span>] x29: ffffff800805bb90 x28: ffffffde408d9d80</span><br><span class="line">[ <span class="number">3209.472559</span>] x27: <span class="number">0000000000000000</span> x26: <span class="number">0000000000000000</span></span><br><span class="line">[ <span class="number">3209.472560</span>] x25: <span class="number">0000000056000000</span> x24: ffffffdfcc8254b8</span><br><span class="line">[ <span class="number">3209.472561</span>] x23: ffffffdfe99e2b20 x22: ffffffdfcc335008</span><br><span class="line">[ <span class="number">3209.472561</span>] x21: <span class="number">0000000000000000</span> x20: <span class="number">0000000000000000</span></span><br><span class="line">[ <span class="number">3209.472562</span>] x19: ffffffdf22ac2628 x18: <span class="number">000000000000004</span>c</span><br><span class="line">[ <span class="number">3209.472563</span>] x17: ffffff9313a66000 x16: <span class="number">0000000000000068</span></span><br><span class="line">[ <span class="number">3209.472563</span>] x15: <span class="number">0000000000000068</span> x14: <span class="number">0000000000000086</span></span><br><span class="line">[ <span class="number">3209.472564</span>] x13: <span class="number">000000000000004</span>c x12: <span class="number">0000000000000000</span></span><br><span class="line">[ <span class="number">3209.472565</span>] x11: <span class="number">0000000000000000</span> x10: <span class="number">0000000000000007</span></span><br><span class="line">[ <span class="number">3209.472565</span>] x9 : b8e204bfccbe9500 x8 : <span class="number">0000000000000000</span></span><br><span class="line">[ <span class="number">3209.472566</span>] x7 : <span class="number">0000000000000000</span> x6 : ffffffdfffaa6ba9</span><br><span class="line">[ <span class="number">3209.472567</span>] x5 : <span class="number">0000000000000000</span> x4 : <span class="number">0000000000000006</span></span><br><span class="line">[ <span class="number">3209.472568</span>] x3 : <span class="number">0000000000000027</span> x2 : <span class="number">0000000000000007</span></span><br><span class="line">[ <span class="number">3209.472568</span>] x1 : <span class="number">0000000000000007</span> x0 : <span class="number">0000000000000000</span></span><br><span class="line">[ <span class="number">3209.472570</span>] Call trace:</span><br><span class="line">[ <span class="number">3209.472572</span>]  klist_del+<span class="number">0x20</span>/<span class="number">0x88</span></span><br><span class="line">[ <span class="number">3209.472572</span>]  device_del+<span class="number">0xa4</span>/<span class="number">0x4b0</span></span><br><span class="line">[ <span class="number">3209.472574</span>]  device_unregister+<span class="number">0x14</span>/<span class="number">0x30</span></span><br><span class="line">[ <span class="number">3209.472576</span>]  typec_unregister_partner+<span class="number">0x18</span>/<span class="number">0x20</span></span><br><span class="line">[ <span class="number">3209.472579</span>]  handle_disconnect+<span class="number">0x24c</span>/<span class="number">0x2a0</span></span><br><span class="line">[ <span class="number">3209.581559</span>]  disconnect_store+<span class="number">0x58</span>/<span class="number">0x88</span></span><br><span class="line">[ <span class="number">3209.585496</span>]  dev_attr_store+<span class="number">0x18</span>/<span class="number">0x30</span></span><br><span class="line">[ <span class="number">3209.589266</span>]  sysfs_kf_write+<span class="number">0x38</span>/<span class="number">0x50</span></span><br><span class="line">[ <span class="number">3209.593034</span>]  kernfs_fop_write+<span class="number">0x130</span>/<span class="number">0x1d0</span></span><br><span class="line">[ <span class="number">3209.597151</span>]  __vfs_write+<span class="number">0x44</span>/<span class="number">0x148</span></span><br><span class="line">[ <span class="number">3209.600741</span>]  vfs_write+<span class="number">0xe0</span>/<span class="number">0x1a0</span></span><br><span class="line">[ <span class="number">3209.604152</span>]  ksys_write+<span class="number">0x6c</span>/<span class="number">0xd0</span></span><br><span class="line">[ <span class="number">3209.607562</span>]  __arm64_sys_write+<span class="number">0x18</span>/<span class="number">0x20</span></span><br><span class="line">[ <span class="number">3209.611588</span>]  el0_svc_common+<span class="number">0x98</span>/<span class="number">0x160</span></span><br><span class="line">[ <span class="number">3209.615446</span>]  el0_svc_handler+<span class="number">0x64</span>/<span class="number">0x80</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">crash&gt; dis -l klist_del+<span class="number">0x20</span></span><br><span class="line">/data/jenkins/workspace/StationPro_new/sxr2130p_repo/emdoor/LINUX/android/kernel/msm<span class="number">-4.19</span>/lib/klist.c: <span class="number">213</span></span><br><span class="line"><span class="number">0xffffff93127c2cd8</span> &lt;klist_del+<span class="number">32</span>&gt;:      ldr     x22, [x20, #<span class="number">32</span>]</span><br><span class="line"></span><br><span class="line">klist_del(&amp;dev-&gt;p-&gt;knode_parent);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">klist_del</span><span class="params">(<span class="keyword">struct</span> klist_node *n)</span></span><br><span class="line">&#123;</span><br><span class="line">        klist_put(n, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">struct</span> klist *<span class="title function_">knode_klist</span><span class="params">(<span class="keyword">struct</span> klist_node *knode)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">struct</span> klist *)</span><br><span class="line">                ((<span class="type">unsigned</span> <span class="type">long</span>)knode-&gt;n_klist &amp; KNODE_KLIST_MASK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">210</span> <span class="type">static</span> <span class="type">void</span> <span class="title function_">klist_put</span><span class="params">(<span class="keyword">struct</span> klist_node *n, <span class="type">bool</span> kill)</span></span><br><span class="line">211 &#123;</span><br><span class="line"><span class="number">212</span>         <span class="class"><span class="keyword">struct</span> <span class="title">klist</span> *<span class="title">k</span> =</span> knode_klist(n);</span><br><span class="line"><span class="number">213</span>         <span class="type">void</span> (*put)(<span class="keyword">struct</span> klist_node *) = k-&gt;put; <span class="comment">//put：函数指针，用于链表内的节点减少引用计数。</span></span><br><span class="line"><span class="number">214</span> </span><br><span class="line"><span class="number">215</span>         spin_lock(&amp;k-&gt;k_lock);</span><br><span class="line"><span class="number">216</span>         <span class="keyword">if</span> (kill)</span><br><span class="line"><span class="number">217</span>                 knode_kill(n);</span><br><span class="line"><span class="number">218</span>         <span class="keyword">if</span> (!klist_dec_and_del(n))</span><br><span class="line"><span class="number">219</span>                 put = <span class="literal">NULL</span>;</span><br><span class="line"><span class="number">220</span>         spin_unlock(&amp;k-&gt;k_lock);</span><br><span class="line"><span class="number">221</span>         <span class="keyword">if</span> (put)</span><br><span class="line"><span class="number">222</span>                 put(n);</span><br><span class="line"><span class="number">223</span> &#125;</span><br><span class="line"></span><br><span class="line">crash&gt; <span class="class"><span class="keyword">struct</span> <span class="title">klist</span> -<span class="title">xo</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">klist</span> &#123;</span></span><br><span class="line">   [<span class="number">0x0</span>] <span class="type">spinlock_t</span> k_lock;</span><br><span class="line">   [<span class="number">0x8</span>] <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">k_list</span>;</span></span><br><span class="line">  [<span class="number">0x18</span>] <span class="type">void</span> (*get)(<span class="keyword">struct</span> klist_node *);</span><br><span class="line">  [<span class="number">0x20</span>] <span class="type">void</span> (*put)(<span class="keyword">struct</span> klist_node *);</span><br><span class="line">&#125;</span><br><span class="line">SIZE: <span class="number">0x28</span></span><br><span class="line"></span><br><span class="line">put在klist_init中初始化</span><br><span class="line">put: The put function <span class="keyword">for</span> the embedding <span class="title function_">object</span> <span class="params">(<span class="literal">NULL</span> <span class="keyword">if</span> none)</span></span><br></pre></td></tr></table></figure><p>说明klist_node已经被释放，double free导致了空指针访问</p><p>下面日志说明&#x2F;sys&#x2F;class&#x2F;typec&#x2F;port0-partner&#x2F;没有power这个组信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="number">3209.332078</span>] ------------[ cut here ]------------</span><br><span class="line">[ <span class="number">3209.332082</span>] sysfs group <span class="string">&#x27;power&#x27;</span> not found <span class="keyword">for</span> kobject <span class="string">&#x27;port0-partner&#x27;</span></span><br><span class="line">[ <span class="number">3209.332126</span>] WARNING: CPU: <span class="number">4</span> PID: <span class="number">1</span> at fs/sysfs/group.c:<span class="number">255</span> sysfs_remove_group+<span class="number">0x4c</span>/<span class="number">0xe0</span></span><br><span class="line">[ <span class="number">3209.332128</span>] Modules linked in: wlan(O) machine_dlkm(O) wcd938x_slave_dlkm(O) wcd938x_dlkm(O) wcd9xxx_dlkm(O) mbhc_dlkm(O) tx_macro_dlkm(O) rx_macro_dlkm(O) va_macro_dlkm(O) wsa_macro_dlkm(O) swr_ctrl_dlkm(O) bolero_cdc_dlkm(O) wsa881x_dlkm(O) wcd_core_dlkm(O) stub_dlkm(O) hdmi_dlkm(O) swr_dlkm(O) pinctrl_lpi_dlkm(O) pinctrl_wcd_dlkm(O) usf_dlkm(O) native_dlkm(O) platform_dlkm(O) q6_dlkm(O) adsp_loader_dlkm(O) apr_dlkm(O) snd_event_dlkm(O) q6_notifier_dlkm(O) q6_pdr_dlkm(O) msm_11ad_proxy</span><br><span class="line">[ <span class="number">3209.332178</span>] CPU: <span class="number">4</span> PID: <span class="number">1</span> Comm: init Tainted: G S      W  O      <span class="number">4.19</span><span class="number">.157</span>-perf #<span class="number">1</span></span><br><span class="line">[ <span class="number">3209.332180</span>] Hardware name: Qualcomm Technologies, Inc. kona-xr-overlay <span class="title function_">Standalone</span> <span class="params">(DT)</span></span><br><span class="line">[ 3209.332183] pstate: 60400005 <span class="params">(nZCv daif +PAN -UAO)</span></span><br><span class="line">[ 3209.332186] pc : sysfs_remove_group+0x4c/0xe0</span><br><span class="line">[ 3209.332189] lr : sysfs_remove_group+0x4c/0xe0</span><br><span class="line">[ 3209.332190] sp : ffffff800805bb70</span><br><span class="line">[ 3209.332191] x29: ffffff800805bb70 x28: ffffffde408d9d80</span><br><span class="line">[ 3209.332194] x27: 0000000000000000 x26: 0000000000000000</span><br><span class="line">[ 3209.332196] x25: 0000000056000000 x24: ffffffdfcc8254b8</span><br><span class="line">[ 3209.332198] x23: ffffffdfe99e2b20 x22: ffffffdfcc335008</span><br><span class="line">[ 3209.332199] x21: ffffffdf77aca010 x20: 0000000000000000</span><br><span class="line">[ 3209.332201] x19: ffffff9312be3cd0 x18: 000000000000004c</span><br><span class="line">[ 3209.332203] x17: ffffff9313a66000 x16: 0000000000000068</span><br><span class="line">[ 3209.332204] x15: 0000000000000068 x14: 0000000000000086</span><br><span class="line">[ 3209.332209] x13: 000000000000004c x12: 0000000000000000</span><br><span class="line">[ 3209.332211] x11: 0000000000000000 x10: 0000000000000007</span><br><span class="line">[ 3209.332212] x9 : b8e204bfccbe9500 x8 : b8e204bfccbe9500</span><br><span class="line">[ 3209.332214] x7 : 0000000000000000 x6 : ffffffdfffaa6ba9</span><br><span class="line">[ 3209.332216] x5 : 0000000000000000 x4 : 0000000000000006</span><br><span class="line">[ 3209.332217] x3 : 0000000000000027 x2 : 0000000000000007</span><br><span class="line">[ 3209.332219] x1 : 0000000000000007 x0 : 0000000000000039</span><br><span class="line">[ 3209.332223] Call trace:</span><br><span class="line">[ 3209.332227]  sysfs_remove_group+0x4c/0xe0</span><br><span class="line">[ 3209.332234]  dpm_sysfs_remove+0x64/0x70</span><br><span class="line">[ 3209.332238]  device_del+0x94/0x4b0</span><br><span class="line">[ 3209.332240]  device_unregister+0x14/0x30</span><br><span class="line">[ 3209.332247]  typec_unregister_partner+0x18/0x20</span><br><span class="line">[ 3209.332249]  handle_disconnect+0x24c/0x2a0</span><br><span class="line">[ 3209.332250]  disconnect_store+0x58/0x88</span><br><span class="line">[ 3209.332252]  dev_attr_store+0x18/0x30</span><br><span class="line">[ 3209.332253]  sysfs_kf_write+0x38/0x50</span><br><span class="line">[ 3209.332255]  kernfs_fop_write+0x130/0x1d0</span><br><span class="line">[ 3209.332260]  __vfs_write+0x44/0x148</span><br><span class="line">[ 3209.332261]  vfs_write+0xe0/0x1a0</span><br><span class="line">[ 3209.332262]  ksys_write+0x6c/0xd0</span><br><span class="line">[ 3209.332263]  __arm64_sys_write+0x18/0x20</span><br><span class="line">[ 3209.332268]  el0_svc_common+0x98/0x160</span><br><span class="line">[ 3209.332270]  el0_svc_handler+0x64/0x80</span><br><span class="line">[ 3209.332271]  el0_svc+0x8/0x380</span><br><span class="line">[ 3209.332272] ---[ end trace c8d1c26a5a3e68b1 ]---</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>本地复现，插上mac充电器后一直震动，并且logcat一直刷以下日志，看上去是收到uevent事件，反复add,remove</p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20231117145408186.png" alt="image-20231117145408186" style="zoom:150%;" /><p>华为typec充电器</p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20231117154224970.png" alt="image-20231117154224970" style="zoom:200%;" /><p>mac充电器</p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20231117154257776.png" alt="image-20231117154257776"></p><p>另一个crash</p><p>日志如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">[  <span class="number">913.683162</span>] Unable to handle kernel <span class="literal">NULL</span> pointer dereference at virtual address <span class="number">0000000000000070</span></span><br><span class="line">[  <span class="number">913.719414</span>] Mem <span class="built_in">abort</span> info:[  <span class="number">913.722622</span>]   ESR = <span class="number">0x96000005</span></span><br><span class="line">[  <span class="number">913.725886</span>]   Exception class = DABT (current EL), IL = <span class="number">32</span> bits</span><br><span class="line">[  <span class="number">913.732107</span>]   SET = <span class="number">0</span>, FnV = <span class="number">0</span></span><br><span class="line">[  <span class="number">913.735294</span>]   EA = <span class="number">0</span>, S1PTW = <span class="number">0</span> </span><br><span class="line">[  <span class="number">913.738608</span>] Data <span class="built_in">abort</span> info:</span><br><span class="line">[  <span class="number">913.741712</span>]   ISV = <span class="number">0</span>, ISS = <span class="number">0x00000005</span></span><br><span class="line">[  <span class="number">913.745756</span>]   CM = <span class="number">0</span>, WnR = <span class="number">0</span> </span><br><span class="line">[  <span class="number">913.748943</span>] user pgtable: <span class="number">4</span>k pages, <span class="number">39</span>-bit VAs, pgdp = <span class="number">0000000054553f</span>c4</span><br><span class="line">[  <span class="number">913.755806</span>] [<span class="number">0000000000000070</span>] pgd=<span class="number">0000000000000000</span>, pud=<span class="number">0000000000000000</span></span><br><span class="line">[  <span class="number">913.762939</span>] Internal error: Oops: <span class="number">96000005</span> [#<span class="number">1</span>] PREEMPT SMP</span><br><span class="line">[  <span class="number">913.768679</span>] Modules linked in: wlan(O) machine_dlkm(O) wcd938x_slave_dlkm(O) wcd938x_dlkm(O) wcd9xxx_dlkm(O) mbhc_dlkm(O) tx_macro_dlkm(O) rx_macro_dlkm(O) va_macro_dlkm(O) wsa_macro_dlkm(O) swr_ctrl_dlkm(O) bolero_cdc_dlkm(O) wsa881x_dlkm(O) wcd_core_dlkm(O) stub_dlkm(O) hdmi_dlkm(O) swr_dlkm(O) pinctrl_lpi_dlkm(O) pinctrl_wcd_dlkm(O) usf_dlkm(O) native_dlkm(O) platform_dlkm(O) q6_dlkm(O) adsp_loader_dlkm(O) apr_dlkm(O) snd_event_dlkm(O) q6_notifier_dlkm(O) q6_pdr_dlkm(O) msm_11ad_proxy[  <span class="number">913.812968</span>] Process init (pid: <span class="number">1</span>, <span class="built_in">stack</span> limit = <span class="number">0x000000008e0451e0</span>)</span><br><span class="line">[  <span class="number">913.819426</span>] CPU: <span class="number">5</span> PID: <span class="number">1</span> Comm: init Tainted: G S      W  O      <span class="number">4.19</span><span class="number">.157</span>-perf #<span class="number">1</span>[  <span class="number">913.827125</span>] Hardware name: Qualcomm Technologies, Inc. kona-xr-overlay Standalone (DT)[  <span class="number">913.868118</span>] aw210xx_led <span class="number">1</span><span class="number">-0020</span>: usb: <span class="number">0</span>, pc_port: <span class="number">0</span></span><br><span class="line">[  <span class="number">913.938910</span>] usbpd usbpd0: Type-C Source (high - <span class="number">3.0</span>A) connected</span><br><span class="line">[  <span class="number">914.001246</span>] pstate: <span class="number">60400005</span> (nZCv daif +PAN -UAO)</span><br><span class="line">[  <span class="number">914.001260</span>] pc : kernfs_find_ns+<span class="number">0x10</span>/<span class="number">0x148</span></span><br><span class="line">[  <span class="number">914.001262</span>] lr : kernfs_find_and_get_ns+<span class="number">0x38</span>/<span class="number">0x88</span></span><br><span class="line">[  <span class="number">914.001262</span>] sp : ffffff800805bb10</span><br><span class="line">[  <span class="number">914.001263</span>] x29: ffffff800805bb10 x28: ffffffde008dc9c0 [  <span class="number">914.001264</span>] x27: <span class="number">0000000000000000</span> x26: <span class="number">0000000000000000</span></span><br><span class="line">[  <span class="number">914.001265</span>] x25: <span class="number">0000000056000000</span> x24: ffffffdf8c80dcb8 [  <span class="number">914.001265</span>] x23: ffffffded84ca520 x22: ffffffdf8c80b008 </span><br><span class="line">[  <span class="number">914.001266</span>] x21: <span class="number">0000000000000000</span> x20: ffffff9fb5de3848  </span><br><span class="line">[  <span class="number">914.001267</span>] x19: <span class="number">0000000000000000</span> x18: <span class="number">0000000005f</span>5e100</span><br><span class="line">[  <span class="number">914.001268</span>] x17: <span class="number">00000000002f</span>29cd x16: <span class="number">0000000000000001</span>  </span><br><span class="line">[  <span class="number">914.001268</span>] x15: fffffffffee3c95c x14: <span class="number">0000000000000010</span> [  <span class="number">914.001269</span>] x13: ffffff9fb4604e98 x12: <span class="number">0000000000000028</span> </span><br><span class="line">[  <span class="number">914.001270</span>] x11: <span class="number">0000000000000072</span> x10: <span class="number">00000000243f</span>d918 [  <span class="number">914.001271</span>] x9 : <span class="number">00000000243f</span>d916 x8 : ffffff9fb6a5b4b0 </span><br><span class="line">[  <span class="number">914.001271</span>] x7 : fefefefefefefefe x6 : <span class="number">0000000000808080</span> [  <span class="number">914.001272</span>] x5 : <span class="number">0000000000000000</span> x4 : ffffffffffffffff </span><br><span class="line">[  <span class="number">914.001273</span>] x3 : <span class="number">0000007265776f</span>70 x2 : <span class="number">0000000000000000</span> [  <span class="number">914.001273</span>] x1 : ffffff9fb5de3848 x0 : <span class="number">0000000000000000</span> </span><br><span class="line">[  <span class="number">914.001276</span>] Call trace:</span><br><span class="line">[  <span class="number">914.001278</span>]  kernfs_find_ns+<span class="number">0x10</span>/<span class="number">0x148</span></span><br><span class="line">[  <span class="number">914.001279</span>]  kernfs_find_and_get_ns+<span class="number">0x38</span>/<span class="number">0x88</span></span><br><span class="line">[  <span class="number">914.001282</span>]  sysfs_remove_group+<span class="number">0x30</span>/<span class="number">0xe0</span></span><br><span class="line">[  <span class="number">914.001287</span>]  dpm_sysfs_remove+<span class="number">0x64</span>/<span class="number">0x70</span></span><br><span class="line">[  <span class="number">914.001290</span>]  device_del+<span class="number">0x94</span>/<span class="number">0x4b0</span></span><br><span class="line">[  <span class="number">914.001290</span>]  device_unregister+<span class="number">0x14</span>/<span class="number">0x30</span></span><br><span class="line">[  <span class="number">914.001295</span>]  typec_unregister_partner+<span class="number">0x18</span>/<span class="number">0x20</span></span><br><span class="line">[  <span class="number">914.001297</span>]  handle_disconnect+<span class="number">0x24c</span>/<span class="number">0x2a0</span></span><br><span class="line">[  <span class="number">914.001297</span>]  disconnect_store+<span class="number">0x58</span>/<span class="number">0x88</span></span><br><span class="line">[  <span class="number">914.001299</span>]  dev_attr_store+<span class="number">0x18</span>/<span class="number">0x30</span></span><br><span class="line">[  <span class="number">914.001300</span>]  sysfs_kf_write+<span class="number">0x38</span>/<span class="number">0x50</span></span><br><span class="line">[  <span class="number">914.001301</span>]  kernfs_fop_write+<span class="number">0x130</span>/<span class="number">0x1d0</span></span><br><span class="line">[  <span class="number">914.001305</span>]  __vfs_write+<span class="number">0x44</span>/<span class="number">0x148</span></span><br><span class="line">[  <span class="number">914.001305</span>]  vfs_write+<span class="number">0xe0</span>/<span class="number">0x1a0</span></span><br><span class="line">[  <span class="number">914.001306</span>]  ksys_write+<span class="number">0x6c</span>/<span class="number">0xd0</span></span><br><span class="line">[  <span class="number">914.001307</span>]  __arm64_sys_write+<span class="number">0x18</span>/<span class="number">0x20</span></span><br><span class="line">[  <span class="number">914.001312</span>]  el0_svc_common+<span class="number">0x98</span>/<span class="number">0x160</span></span><br><span class="line">[  <span class="number">914.001313</span>]  el0_svc_handler+<span class="number">0x64</span>/<span class="number">0x80</span></span><br><span class="line">[  <span class="number">914.001315</span>]  el0_svc+<span class="number">0x8</span>/<span class="number">0x380</span></span><br><span class="line">[  <span class="number">914.001317</span>] Code: a9bd7bfd a90157f6 <span class="number">910003f</span>d a9024ff4 (<span class="number">7940e008</span>)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">crash&gt; </span><span class="language-bash">dis -l kernfs_find_ns+0x10</span></span><br><span class="line">/data/jenkins/workspace/StationPro_new/sxr2130p_repo/emdoor/LINUX/android/kernel/msm-4.19/include/linux/kernfs.h: 315</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="title function_">kernfs_ns_enabled</span><span class="params">(<span class="keyword">struct</span> kernfs_node *kn)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">return</span> kn-&gt;flags &amp; KERNFS_NS; <span class="comment">//空指针访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">crash&gt; <span class="class"><span class="keyword">struct</span> <span class="title">kernfs_node</span> -<span class="title">xo</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kernfs_node</span> &#123;</span></span><br><span class="line">   [<span class="number">0x0</span>] <span class="type">atomic_t</span> count;</span><br><span class="line">   [<span class="number">0x4</span>] <span class="type">atomic_t</span> active;</span><br><span class="line">   [<span class="number">0x8</span>] <span class="class"><span class="keyword">struct</span> <span class="title">kernfs_node</span> *<span class="title">parent</span>;</span></span><br><span class="line">  [<span class="number">0x10</span>] <span class="type">const</span> <span class="type">char</span> *name;</span><br><span class="line">  [<span class="number">0x18</span>] <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> <span class="title">rb</span>;</span></span><br><span class="line">  [<span class="number">0x30</span>] <span class="type">const</span> <span class="type">void</span> *ns;</span><br><span class="line">  [<span class="number">0x38</span>] <span class="type">unsigned</span> <span class="type">int</span> hash;</span><br><span class="line">         <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">  [<span class="number">0x40</span>]     <span class="class"><span class="keyword">struct</span> <span class="title">kernfs_elem_dir</span> <span class="title">dir</span>;</span></span><br><span class="line">  [<span class="number">0x40</span>]     <span class="class"><span class="keyword">struct</span> <span class="title">kernfs_elem_symlink</span> <span class="title">symlink</span>;</span></span><br><span class="line">  [<span class="number">0x40</span>]     <span class="class"><span class="keyword">struct</span> <span class="title">kernfs_elem_attr</span> <span class="title">attr</span>;</span></span><br><span class="line">         &#125;;</span><br><span class="line">  [<span class="number">0x60</span>] <span class="type">void</span> *priv;</span><br><span class="line">  [<span class="number">0x68</span>] <span class="class"><span class="keyword">union</span> <span class="title">kernfs_node_id</span> <span class="title">id</span>;</span></span><br><span class="line">  [<span class="number">0x70</span>] <span class="type">unsigned</span> <span class="type">short</span> flags; <span class="comment">//called</span></span><br><span class="line">  [<span class="number">0x72</span>] <span class="type">umode_t</span> mode;</span><br><span class="line">  [<span class="number">0x78</span>] <span class="class"><span class="keyword">struct</span> <span class="title">kernfs_iattrs</span> *<span class="title">iattr</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">SIZE: <span class="number">0x80</span></span><br></pre></td></tr></table></figure><p>说明kernfs_node为null</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sysfs_remove_group</span><span class="params">(<span class="keyword">struct</span> kobject *kobj,</span></span><br><span class="line"><span class="params"><span class="type">const</span> <span class="keyword">struct</span> attribute_group *grp)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kernfs_node</span> *<span class="title">parent</span> =</span> kobj-&gt;sd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kernfs_node</span> *<span class="title">kn</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (grp-&gt;name) &#123;</span><br><span class="line">kn = kernfs_find_and_get(parent, grp-&gt;name);</span><br><span class="line"><span class="keyword">if</span> (!kn) &#123;</span><br><span class="line">WARN(!kn, KERN_WARNING</span><br><span class="line">     <span class="string">&quot;sysfs group &#x27;%s&#x27; not found for kobject &#x27;%s&#x27;\n&quot;</span>,</span><br><span class="line">     grp-&gt;name, kobject_name(kobj));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">kn = parent;</span><br><span class="line">kernfs_get(kn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">remove_files(kn, grp);</span><br><span class="line"><span class="keyword">if</span> (grp-&gt;name)</span><br><span class="line">kernfs_remove(kn);</span><br><span class="line"></span><br><span class="line">kernfs_put(kn);</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL_GPL(sysfs_remove_group);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="keyword">struct</span> kernfs_node *</span><br><span class="line"><span class="title function_">kernfs_find_and_get</span><span class="params">(<span class="keyword">struct</span> kernfs_node *kn, <span class="type">const</span> <span class="type">char</span> *name)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">return</span> kernfs_find_and_get_ns(kn, name, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kernfs_find_and_get_ns</span><br><span class="line">kn = kernfs_find_ns(parent, name, ns);</span><br><span class="line"><span class="type">bool</span> has_ns = kernfs_ns_enabled(parent);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;mac充电器充电（应该是插好的），早上来看电量没增加，插拔一次，震动了几下后红灯&lt;/p&gt;
&lt;h2 id=&quot;日志&quot;&gt;&lt;a href=&quot;#日志&quot;</summary>
      
    
    
    
    
    <category term="problem" scheme="http://example.com/tags/problem/"/>
    
  </entry>
  
  <entry>
    <title>gpu hang detected</title>
    <link href="http://example.com/2024/03/27/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/gpu%20hang%20detected/"/>
    <id>http://example.com/2024/03/27/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/gpu%20hang%20detected/</id>
    <published>2024-03-27T07:12:51.837Z</published>
    <updated>2024-03-27T07:20:03.085Z</updated>
    
    <content type="html"><![CDATA[<p>gpu hang detected</p><h3 id="日志打印"><a href="#日志打印" class="headerlink" title="日志打印"></a>日志打印</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[16799.633153] kgsl kgsl-3d0: MISC: GPU hang detected</span><br><span class="line">[16799.638132] kgsl kgsl-3d0: maku.bilibilihd[22918]: gpu fault ctx 36 ctx_type GL ts 157287 status 00EF0CF5 rb 13e0/1510 ib1 0000000500C90000/0000 ib2 0000000500CA04F8/0000</span><br><span class="line">[16799.653814] kgsl kgsl-3d0: maku.bilibilihd[22918]: gpu fault rb 2 rb sw r/w 13e0/1644</span><br></pre></td></tr></table></figure><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>LINUX&#x2F;android&#x2F;kernel&#x2F;msm-4.19&#x2F;drivers&#x2F;gpu&#x2F;msm&#x2F;adreno.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * adreno_hang_int_callback() - Isr for fatal interrupts that hang GPU</span></span><br><span class="line"><span class="comment"> * @adreno_dev: Pointer to device</span></span><br><span class="line"><span class="comment"> * @bit: Interrupt bit</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">adreno_hang_int_callback</span><span class="params">(<span class="keyword">struct</span> adreno_device *adreno_dev, <span class="type">int</span> bit)</span></span><br><span class="line">&#123;</span><br><span class="line">        dev_crit_ratelimited(KGSL_DEVICE(adreno_dev)-&gt;dev,</span><br><span class="line">                                <span class="string">&quot;MISC: GPU hang detected\n&quot;</span>);</span><br><span class="line">        adreno_irqctrl(adreno_dev, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Trigger a fault in the dispatcher - this will effect a restart */</span></span><br><span class="line">        adreno_set_gpu_fault(adreno_dev, ADRENO_HARD_FAULT);</span><br><span class="line">        adreno_dispatcher_schedule(KGSL_DEVICE(adreno_dev));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="adreno-hang-int-callback定义位置"><a href="#adreno-hang-int-callback定义位置" class="headerlink" title="adreno_hang_int_callback定义位置"></a>adreno_hang_int_callback定义位置</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">adreno_irq_funcs</span> <span class="title">a6xx_irq_funcs</span>[32] =</span> &#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* 23 - MISC_HANG_DETECT */</span></span><br><span class="line">    ADRENO_IRQ_CALLBACK(adreno_hang_int_callback),</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADRENO_IRQ_CALLBACK(_c) &#123; .func = _c &#125;</span></span><br><span class="line">-&gt; .func = adreno_hang_int_callback</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">struct</span> adreno_irq a6xx_irq = &#123;</span><br><span class="line">        .funcs = a6xx_irq_funcs, <span class="comment">//called</span></span><br><span class="line">        .mask = A6XX_INT_MASK,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">adreno_gpudev</span> <span class="title">adreno_a6xx_gpudev</span> =</span> &#123;</span><br><span class="line">        .reg_offsets = &amp;a6xx_reg_offsets,</span><br><span class="line">        .start = a6xx_start,</span><br><span class="line">        .snapshot = a6xx_snapshot,</span><br><span class="line">        .irq = &amp;a6xx_irq, <span class="comment">//called</span></span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="adreno-irq-handler中断处理函数调用adreno-hang-int-callback"><a href="#adreno-irq-handler中断处理函数调用adreno-hang-int-callback" class="headerlink" title="adreno_irq_handler中断处理函数调用adreno_hang_int_callback"></a>adreno_irq_handler中断处理函数调用adreno_hang_int_callback</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#LINUX/android/kernel/msm<span class="number">-4.19</span>/drivers/gpu/msm/adreno.c</span><br><span class="line"><span class="type">static</span> <span class="type">irqreturn_t</span> <span class="title function_">adreno_irq_handler</span><span class="params">(<span class="keyword">struct</span> kgsl_device *device)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    adreno_readreg(adreno_dev, ADRENO_REG_RBBM_INT_0_STATUS, &amp;status);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Clear all the interrupt bits but ADRENO_INT_RBBM_AHB_ERROR. Because</span></span><br><span class="line"><span class="comment">         * even if we clear it here, it will stay high until it is cleared</span></span><br><span class="line"><span class="comment">         * in its respective handler. Otherwise, the interrupt handler will</span></span><br><span class="line"><span class="comment">         * fire again.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    int_bit = ADRENO_INT_BIT(adreno_dev, ADRENO_INT_RBBM_AHB_ERROR);</span><br><span class="line">    adreno_writereg(adreno_dev, ADRENO_REG_RBBM_INT_CLEAR_CMD,</span><br><span class="line">                                status &amp; ~int_bit);</span><br><span class="line"><span class="comment">/* Loop through all set interrupts and call respective handlers */</span></span><br><span class="line">    <span class="keyword">for</span> (tmp = status; tmp != <span class="number">0</span>;) &#123;</span><br><span class="line">        <span class="comment">//1.tmp从低位往左边数第24位非0</span></span><br><span class="line">        <span class="comment">//#define A3XX_INT_MISC_HANG_DETECT 24 (a3xx_reg.h)</span></span><br><span class="line">        <span class="comment">//2.i为23会回调adreno_hang_int_callback</span></span><br><span class="line">            i = fls(tmp) - <span class="number">1</span>; </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (irq_params-&gt;funcs[i].func != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (irq_params-&gt;mask &amp; BIT(i))</span><br><span class="line">                            irq_params-&gt;funcs[i].func(adreno_dev, i);</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                    dev_crit_ratelimited(device-&gt;dev,</span><br><span class="line">                                            <span class="string">&quot;Unhandled interrupt bit %x\n&quot;</span>,</span><br><span class="line">                                            i);</span><br><span class="line"></span><br><span class="line">            ret = IRQ_HANDLED;</span><br><span class="line"></span><br><span class="line">            tmp &amp;= ~BIT(i);</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kgsl_device_platform_probe</span><br><span class="line"><span class="title function_">kgsl_request_irq</span><span class="params">(device-&gt;pdev, device-&gt;pwrctrl.irq_name, kgsl_irq_handler, device)</span></span><br><span class="line">device-&gt;ftbl-&gt;irq_handler</span><br><span class="line">adreno_irq_handler</span><br><span class="line"></span><br><span class="line">kgsl_request_irq</span><br><span class="line"><span class="comment">//申请中断</span></span><br><span class="line">    <span class="comment">//devm_request_irq和request_irq区别在于前者是申请的内核“managed”资源，不需要自己手动释放，会自动回收资源，而后者需要手动调用free_irq来释放中断资源</span></span><br><span class="line"><span class="title function_">devm_request_irq</span><span class="params">(&amp;pdev-&gt;dev, num, handler, IRQF_TRIGGER_HIGH, name, data)</span>;           </span><br></pre></td></tr></table></figure><h4 id="adreno-fault-header打印gpu-fault-ctx"><a href="#adreno-fault-header打印gpu-fault-ctx" class="headerlink" title="adreno_fault_header打印gpu fault ctx"></a>adreno_fault_header打印gpu fault ctx</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">16799.633153</span>] kgsl kgsl<span class="number">-3</span>d0: MISC: GPU hang detected</span><br><span class="line">[<span class="number">16799.638132</span>] kgsl kgsl<span class="number">-3</span>d0: maku.bilibilihd[<span class="number">22918</span>]: gpu fault ctx <span class="number">36</span> ctx_type GL ts <span class="number">157287</span> status <span class="number">00</span>EF0CF5 rb <span class="number">13e1510</span> ib1 <span class="number">0000000500</span>C90000/<span class="number">0000</span> ib2 <span class="number">0000000500</span>CA04F8/<span class="number">0000</span></span><br><span class="line">[<span class="number">16799.653814</span>] kgsl kgsl<span class="number">-3</span>d0: maku.bilibilihd[<span class="number">22918</span>]: gpu fault rb <span class="number">2</span> rb sw r/w <span class="number">13e0</span>/<span class="number">1644</span></span><br><span class="line">[<span class="number">16799.661893</span>] kgsl kgsl<span class="number">-3</span>d0: GMU snapshot started at <span class="number">0xcce4dc5fd</span> ticks</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">adreno_fault_header</span><span class="params">(<span class="keyword">struct</span> kgsl_device *device,</span></span><br><span class="line"><span class="params">                <span class="keyword">struct</span> adreno_ringbuffer *rb, <span class="keyword">struct</span> kgsl_drawobj_cmd *cmdobj,</span></span><br><span class="line"><span class="params">                <span class="type">int</span> fault)</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">trace_adreno_gpu_fault(drawobj-&gt;context-&gt;id,</span><br><span class="line">        drawobj-&gt;timestamp,</span><br><span class="line">        status, rptr, wptr, ib1base, ib1sz,</span><br><span class="line">        ib2base, ib2sz, drawctxt-&gt;rb-&gt;id);</span><br><span class="line"></span><br><span class="line">    pr_fault(device, drawobj,</span><br><span class="line">            <span class="string">&quot;%s fault ctx %d ctx_type %s ts %d status %8.8X rb %4.4x/%4.4x ib1 %16.16llX/%4.4x ib2 %16.16llX/%4.4x\n&quot;</span>,</span><br><span class="line">            type, drawobj-&gt;context-&gt;id,</span><br><span class="line">            get_api_type_str(drawctxt-&gt;type),</span><br><span class="line">            drawobj-&gt;timestamp, status,</span><br><span class="line">            rptr, wptr, ib1base, ib1sz, ib2base, ib2sz);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="上层调用do-header-and-snapshot"><a href="#上层调用do-header-and-snapshot" class="headerlink" title="上层调用do_header_and_snapshot"></a>上层调用do_header_and_snapshot</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">do_header_and_snapshot</span><span class="params">(<span class="keyword">struct</span> kgsl_device *device, <span class="type">int</span> fault,</span></span><br><span class="line"><span class="params">                <span class="keyword">struct</span> adreno_ringbuffer *rb, <span class="keyword">struct</span> kgsl_drawobj_cmd *cmdobj)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">kgsl_drawobj</span> *<span class="title">drawobj</span> =</span> DRAWOBJ(cmdobj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Always dump the snapshot on a non-drawobj failure */</span></span><br><span class="line">        <span class="keyword">if</span> (cmdobj == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                adreno_fault_header(device, rb, <span class="literal">NULL</span>, fault); <span class="comment">//called</span></span><br><span class="line">                kgsl_device_snapshot(device, <span class="literal">NULL</span>, fault &amp; ADRENO_GMU_FAULT);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Skip everything if the PMDUMP flag is set */</span></span><br><span class="line">        <span class="keyword">if</span> (test_bit(KGSL_FT_SKIP_PMDUMP, &amp;cmdobj-&gt;fault_policy))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Print the fault header */</span></span><br><span class="line">        adreno_fault_header(device, rb, cmdobj, fault); <span class="comment">//called</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!(drawobj-&gt;context-&gt;flags &amp; KGSL_CONTEXT_NO_SNAPSHOT))</span><br><span class="line">                kgsl_device_snapshot(device, drawobj-&gt;context,</span><br><span class="line">                                        fault &amp; ADRENO_GMU_FAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">adreno_dispatcher_work</span><br><span class="line">    <span class="comment">//dispatcher_do_fault() returns 0 if no faults occurred. If that is the case, then clean up preemption and try to schedule more work</span></span><br><span class="line">dispatcher_do_fault</span><br><span class="line">    <span class="comment">//if (!(fault &amp; ADRENO_GMU_FAULT_SKIP_SNAPSHOT))</span></span><br><span class="line">do_header_and_snapshot</span><br><span class="line">    <span class="comment">//dmesg打印</span></span><br><span class="line">adreno_fault_header</span><br><span class="line">    <span class="comment">//kgsl_worker_thr PID290</span></span><br><span class="line">kgsl_device_snapshot</span><br><span class="line">    <span class="comment">//打快照</span></span><br><span class="line">    adreno_snapshot</span><br></pre></td></tr></table></figure><h4 id="dmesg打印完再打快照"><a href="#dmesg打印完再打快照" class="headerlink" title="dmesg打印完再打快照"></a>dmesg打印完再打快照</h4><p>kgsl_worker_thr内核线程正好在循环里面的usleep_range</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">crash&gt; </span><span class="language-bash">ps | grep UN</span></span><br><span class="line">      290       2   7  ffffffc4133a5880  UN   0.0        0        0  [kgsl_worker_thr]</span><br><span class="line">      540       2   0  ffffffc412223b00  UN   0.0        0        0  [hdcp_2x]</span><br><span class="line">      541       2   1  ffffffc4122249c0  UN   0.0        0        0  [dp_hdcp2p2]</span><br><span class="line"><span class="meta prompt_">crash&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">crash&gt;</span> </span><br><span class="line"><span class="meta prompt_">crash&gt; </span><span class="language-bash">bt 290</span></span><br><span class="line">PID: 290      TASK: ffffffc4133a5880  CPU: 7    COMMAND: &quot;kgsl_worker_thr&quot;</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">0 [ffffff80146839d0] __switch_to at ffffffacb348ac54</span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">1 [ffffff8014683a20] __schedule at ffffffacb48d33c8</span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">2 [ffffff8014683a80] schedule at ffffffacb48d368c</span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">3 [ffffff8014683b00] schedule_hrtimeout_range_clock at ffffffacb48d8160</span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">4 [ffffff8014683b30] schedule_hrtimeout_range at ffffffacb48d81f4</span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">5 [ffffff8014683b50] usleep_range at ffffffacb48d7e90</span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">6 [ffffff8014683bb0] a6xx_snapshot at ffffffacb3c07544</span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">7 [ffffff8014683c50] adreno_snapshot at ffffffacb3beff18</span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">8 [ffffff8014683ce0] kgsl_device_snapshot at ffffffacb3bd6a80</span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">9 [ffffff8014683da0] adreno_dispatcher_work at ffffffacb3becc40</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">10 [ffffff8014683e10] kthread_worker_fn at ffffffacb34ebdd8</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">11 [ffffff8014683e60] kthread at ffffffacb34ece6c</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;gpu hang detected&lt;/p&gt;
&lt;h3 id=&quot;日志打印&quot;&gt;&lt;a href=&quot;#日志打印&quot; class=&quot;headerlink&quot; title=&quot;日志打印&quot;&gt;&lt;/a&gt;日志打印&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    
    <category term="problem" scheme="http://example.com/tags/problem/"/>
    
  </entry>
  
  <entry>
    <title>crash arm64无法使用backtrace</title>
    <link href="http://example.com/2024/03/27/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/crash%20arm64%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8bt/"/>
    <id>http://example.com/2024/03/27/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/crash%20arm64%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8bt/</id>
    <published>2024-03-27T07:12:51.835Z</published>
    <updated>2024-03-27T07:19:40.574Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (KDUMP_DUMPFILE()) &#123;</span><br><span class="line">        error(WARNING, <span class="string">&quot;zyr KDUMP_DUMPFILE\n&quot;</span>);</span><br><span class="line">        note = netdump_get_prstatus_percpu(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!note) &#123;</span><br><span class="line">        error(WARNING, <span class="string">&quot;cpu %d: cannot find NT_PRSTATUS note\n&quot;</span>, i);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *</span><br><span class="line"><span class="title function_">netdump_get_prstatus_percpu</span><span class="params">(<span class="type">int</span> cpu)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> online;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((cpu &lt; <span class="number">0</span>) || (cpu &gt;= nd-&gt;num_prstatus_notes)) &#123;</span><br><span class="line">                error(WARNING, <span class="string">&quot;zyr cpu:%d, nd-&gt;num_prstatus_notes:%d\n&quot;</span>,cpu,nd-&gt;num_prstatus_notes);</span><br><span class="line">                error(WARNING, <span class="string">&quot;zyr netdump_get_prstatus_percpu1\n&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * If no cpu mapping was done, then there must be</span></span><br><span class="line"><span class="comment">         * a one-to-one relationship between the number</span></span><br><span class="line"><span class="comment">         * of online cpus and the number of notes.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> ((online = get_cpus_online()) &amp;&amp;</span><br><span class="line">            (online == kt-&gt;cpus) &amp;&amp;</span><br><span class="line">            (online != nd-&gt;num_prstatus_notes)) &#123;</span><br><span class="line">                error(WARNING, <span class="string">&quot;zyr netdump_get_prstatus_percpu2\n&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nd-&gt;nt_prstatus_percpu[cpu];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240314115410916.png" alt="image-20240314115410916"></p><p>nd-&gt;num_prstatus_notes:0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">diskdump.c:188:dd-&gt;num_prstatus_notes = </span><br><span class="line">diskdump.c:203:    dd-&gt;num_prstatus_notes * sizeof(void *))) == NULL)</span><br><span class="line">netdump.c:104:nd-&gt;num_prstatus_notes =</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    
    <category term="problem" scheme="http://example.com/tags/problem/"/>
    
    <category term="crash" scheme="http://example.com/tags/crash/"/>
    
  </entry>
  
  <entry>
    <title>wlan crash【bind报错ENOSPC】</title>
    <link href="http://example.com/2024/03/27/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/bind%E6%8A%A5%E9%94%99ENOSPC-20231030/"/>
    <id>http://example.com/2024/03/27/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/bind%E6%8A%A5%E9%94%99ENOSPC-20231030/</id>
    <published>2024-03-27T07:12:51.834Z</published>
    <updated>2024-03-27T07:18:58.366Z</updated>
    
    <content type="html"><![CDATA[<h2 id="wlan-crash"><a href="#wlan-crash" class="headerlink" title="wlan crash"></a>wlan crash</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[   <span class="number">66.175350</span>] cnss-daemon: interop issues ap: read_iot_ap_file: No such file /data/vendor/wifi/iotap_ps.bin</span><br><span class="line">[   <span class="number">66.175356</span>] cnss-daemon: interop issues ap: read_iot_ap_ps_from_file, read file error</span><br><span class="line">[   <span class="number">66.175469</span>] cnss-daemon: Fail to bind user socket No space left on device</span><br><span class="line">[   <span class="number">66.175477</span>] cnss-daemon: Failed to init user interface</span><br><span class="line">[   <span class="number">66.175517</span>] cnss-daemon: interop issues ap: save_iot_ap_file: Failed to open file /data/vendor/wifi/iotap_ps.bin</span><br><span class="line">[   <span class="number">66.175520</span>] cnss-daemon: interop issues ap: save_iot_ap_ps_to_file, save file error</span><br><span class="line">...</span><br><span class="line">[   <span class="number">70.558379</span>] init: Could not store persistent property: Could not open temporary properties file: No space left on device</span><br><span class="line">[   <span class="number">70.584538</span>] msm_qti_pp_get_rms_value_control, back not active to query rms be_idx:<span class="number">3</span></span><br><span class="line">[   <span class="number">70.596279</span>] core_get_license_status: cmdrsp_license_result.result = <span class="number">0x15</span> <span class="keyword">for</span> module <span class="number">0x131ff</span></span><br><span class="line">[   <span class="number">70.596637</span>] msm_ext_disp_update_audio_ops: Display not found (EXT_DISPLAY_TYPE_HDMI) ctld (<span class="number">0</span>) stream (<span class="number">0</span>)</span><br><span class="line">[   <span class="number">70.607535</span>] msm-ext-disp-audio-codec-rx soc:qcom,msm-ext-disp:qcom,msm-ext-disp-audio-codec-rx: msm_ext_disp_audio_device_get: invalid dai id: <span class="number">4</span></span><br><span class="line">[   <span class="number">70.624021</span>] cnss: fatal: Timeout waiting <span class="keyword">for</span> FW ready indication</span><br><span class="line">[   <span class="number">70.630204</span>] cnss: Update driver status: <span class="number">4</span></span><br><span class="line">[   <span class="number">70.630216</span>] cnss: Posting event: RECOVERY(<span class="number">9</span>), state: <span class="number">0x11</span> flags: <span class="number">0x0</span></span><br><span class="line">[   <span class="number">70.630217</span>] cnss: PM stay awake, state: <span class="number">0x11</span>, count: <span class="number">1</span></span><br><span class="line">[   <span class="number">70.630226</span>] cnss: PM relax, state: <span class="number">0x11</span>, count: <span class="number">0</span></span><br><span class="line">[   <span class="number">70.630230</span>] cnss: PM stay awake, state: <span class="number">0x11</span>, count: <span class="number">1</span></span><br><span class="line">[   <span class="number">70.630233</span>] cnss: Processing driver event: RECOVERY(<span class="number">9</span>), state: <span class="number">0x11</span></span><br><span class="line">[   <span class="number">70.630235</span>] cnss: Driver recovery is triggered with reason: TIMEOUT(<span class="number">3</span>)</span><br><span class="line">[   <span class="number">70.630240</span>] subsys-restart: subsystem_restart_dev(): Restart sequence requested <span class="keyword">for</span> wlan, restart_level = SYSTEM.</span><br><span class="line">[   <span class="number">70.630246</span>] cnss: PM relax, state: <span class="number">0x611</span>, count: <span class="number">0</span></span><br><span class="line">[   <span class="number">70.640767</span>] msm_adsp_stream_callback_get: ASM Stream PP event <span class="built_in">queue</span> is empty.</span><br><span class="line">[   <span class="number">70.655599</span>] msm_pcm_volume_ctl_get substream not found</span><br><span class="line">[   <span class="number">70.667346</span>] binder: <span class="number">6681</span>:<span class="number">6681</span> ioctl <span class="number">40046210</span> <span class="number">7f</span>c5227c24 returned <span class="number">-22</span></span><br><span class="line">[   <span class="number">70.732033</span>] Kernel panic - not syncing: subsys-restart: Resetting the SoC - wlan crashed.</span><br><span class="line">[   <span class="number">70.740438</span>] CPU: <span class="number">5</span> PID: <span class="number">78</span> Comm: kworker/<span class="number">5</span>:<span class="number">1</span> Tainted: G S      W  O      <span class="number">4.19</span><span class="number">.157</span>-perf #<span class="number">1</span></span><br><span class="line">[   <span class="number">70.748834</span>] Hardware name: Qualcomm Technologies, Inc. kona-xr-overlay Standalone (DT)</span><br><span class="line">[   <span class="number">70.756982</span>] Workqueue: events device_restart_work_hdlr</span><br><span class="line">[   <span class="number">70.762272</span>] Call trace:</span><br><span class="line">[   <span class="number">70.763745</span>] msm_qti_pp_get_rms_value_control, back not active to query rms be_idx:<span class="number">3</span></span><br><span class="line">[   <span class="number">70.810796</span>]  dump_backtrace+<span class="number">0x0</span>/<span class="number">0x208</span></span><br><span class="line">[   <span class="number">70.810798</span>]  show_stack+<span class="number">0x14</span>/<span class="number">0x20</span></span><br><span class="line">[   <span class="number">70.810801</span>]  dump_stack+<span class="number">0xb8</span>/<span class="number">0xf4</span></span><br><span class="line">[   <span class="number">70.810802</span>]  panic+<span class="number">0x158</span>/<span class="number">0x2d8</span></span><br><span class="line">[   <span class="number">70.810805</span>]  device_restart_work_hdlr+<span class="number">0x44</span>/<span class="number">0x48</span></span><br><span class="line">[   <span class="number">70.823290</span>] core_get_license_status: cmdrsp_license_result.result = <span class="number">0x15</span> <span class="keyword">for</span> module <span class="number">0x131ff</span></span><br><span class="line">[   <span class="number">70.825875</span>]  process_one_work+<span class="number">0x278</span>/<span class="number">0x440</span></span><br><span class="line">[   <span class="number">70.825876</span>]  worker_thread+<span class="number">0x260</span>/<span class="number">0x4a8</span></span><br><span class="line">[   <span class="number">70.825877</span>]  kthread+<span class="number">0x140</span>/<span class="number">0x150</span></span><br><span class="line">[   <span class="number">70.825878</span>]  ret_from_fork+<span class="number">0x10</span>/<span class="number">0x18</span></span><br><span class="line">[   <span class="number">70.825881</span>] SMP: stopping secondary CPUs</span><br></pre></td></tr></table></figure><p>日志推断空间不足导致cnss超时，最终restart soc导致crash</p><h3 id="考虑data分区内存不足"><a href="#考虑data分区内存不足" class="headerlink" title="考虑data分区内存不足"></a>考虑data分区内存不足</h3><p>看到ENOSPC首先想到是空间不足，但是kmem看free很多</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">crash&gt; </span><span class="language-bash">mount | grep data</span></span><br><span class="line">ffffffc70cd3ad80 ffffffc59e09f800 ext4   /dev/block/by-name/metadata /metadata </span><br><span class="line">ffffffc70cd3b640 ffffffc59e3c7000 ext4   /dev/block/dm-10 /apex/com.android.tzdata</span><br><span class="line">ffffffc736581180 ffffffc70bdfe000 f2fs   /dev/block/dm-15 /data     </span><br><span class="line">ffffffc713b48380 ffffffc70bdfe000 f2fs   /dev/block/dm-15 /data/user/0</span><br><span class="line">ffffffc736582840 ffffffc70bdff800 tmpfs  tmpfs     /data_mirror</span><br><span class="line">ffffffc736582680 ffffffc70bdfe000 f2fs   /dev/block/dm-15 /data_mirror/data_ce/null</span><br><span class="line">ffffffc736583640 ffffffc70bdfe000 f2fs   /dev/block/dm-15 /data_mirror/data_ce/null/user/0</span><br><span class="line">ffffffc736583800 ffffffc70bdfe000 f2fs   /dev/block/dm-15 /data_mirror/data_de/null</span><br><span class="line">ffffffc713b48fc0 ffffffc70bdfe000 f2fs   /dev/block/dm-15 /data_mirror/cur_profiles</span><br><span class="line">ffffffc736580000 ffffffc70bdfe000 f2fs   /dev/block/dm-15 /data_mirror/ref_profiles</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">crash&gt; </span><span class="language-bash">dev -d</span></span><br><span class="line">MAJOR GENDISK            NAME       REQUEST_QUEUE      TOTAL ASYNC  SYNC   DRV</span><br><span class="line">  254 ffffffc712f53800   zram0      ffffffc712e26b40       0     0     0     0</span><br><span class="line">    8 ffffffc7120f6800   sda        ffffffc59e17b0c0       0     0     0     0</span><br><span class="line">    8 ffffffc59e1f6800   sdb        ffffffc59e17c440       0     0     0     0</span><br><span class="line">    8 ffffffc59e1f7000   sdc        ffffffc59e17f500       0     0     0     0</span><br><span class="line">    8 ffffffc59e1f0800   sdf        ffffffc59e17ba80       0     0     0     0</span><br><span class="line">    8 ffffffc59e1f5000   sdd        ffffffc59e17ce00       0     0     0     0</span><br><span class="line">    8 ffffffc59e1f2800   sde        ffffffc59e17e180       0     0     0     0</span><br><span class="line">  252 ffffffc59e099800   dm-0       ffffffc59dd4ba80       0     0     0     0</span><br><span class="line">  252 ffffffc59dd7d800   dm-1       ffffffc59dd48000       0     0     0     0</span><br><span class="line">  252 ffffffc59dd7f800   dm-2       ffffffc59dd49380       0     0     0     0</span><br><span class="line">  252 ffffffc59dd7c000   dm-3       ffffffc59dd4eb40       0     0     0     0</span><br><span class="line">  252 ffffffc59dd79800   dm-4       ffffffc59dd4a700       0     0     0     0</span><br><span class="line">  252 ffffffc59dd7b000   dm-5       ffffffc59dd49d40       0     0     0     0</span><br><span class="line">  252 ffffffc59dd79000   dm-6       ffffffc59dd4d7c0       0     0     0     0</span><br><span class="line">  252 ffffffc59dd9f000   dm-7       ffffffc59dd489c0       0     0     0     0</span><br><span class="line">  252 ffffffc59dd9d000   dm-8       ffffffc59dd4b0c0       0     0     0     0</span><br><span class="line">  252 ffffffc59dd9a800   dm-9       ffffffc59dd4c440       0     0     0     0</span><br><span class="line">  252 ffffffc59dd98800   dm-10      ffffffc59dd4f500       0     0     0     0</span><br><span class="line">  252 ffffffc59e30d000   dm-11      ffffffc59e178000       0     0     0     0</span><br><span class="line">  252 ffffffc59d82d800   dm-12      ffffffc59e179380       0     0     0     0</span><br><span class="line">  252 ffffffc59d82c000   dm-13      ffffffc59e17eb40       0     0     0     0</span><br><span class="line">  252 ffffffc59d9dd800   dm-14      ffffffc59e17a700       0     0     0     0</span><br><span class="line">  252 ffffffc70c5cc000   dm-15      ffffffc707cace00       0     0     0     0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">crash&gt; kmem -i</span><br><span class="line">                 PAGES        TOTAL      PERCENTAGE</span><br><span class="line">    TOTAL MEM  3007109      11.5 GB         ----</span><br><span class="line">         FREE  1941920       7.4 GB   64% of TOTAL MEM</span><br><span class="line">         USED  1065189       4.1 GB   35% of TOTAL MEM</span><br><span class="line">       SHARED   114800     448.4 MB    3% of TOTAL MEM</span><br><span class="line">      BUFFERS     1407       5.5 MB    0% of TOTAL MEM</span><br><span class="line">       CACHED   208340     813.8 MB    6% of TOTAL MEM</span><br><span class="line">         SLAB    42807     167.2 MB    1% of TOTAL MEM</span><br><span class="line"></span><br><span class="line">   TOTAL HUGE        0            0         ----</span><br><span class="line">    HUGE FREE        0            0    0% of TOTAL HUGE</span><br><span class="line"></span><br><span class="line">   TOTAL SWAP        0            0         ----</span><br><span class="line">    SWAP USED        0            0    0% of TOTAL SWAP</span><br><span class="line">    SWAP FREE        0            0    0% of TOTAL SWAP</span><br><span class="line"></span><br><span class="line"> COMMIT LIMIT  1503554       5.7 GB         ----</span><br><span class="line">    COMMITTED  1772605       6.8 GB  117% of TOTAL LIMIT</span><br></pre></td></tr></table></figure><p>高通回复：</p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20231109143700131.png" alt="image-20231109143700131"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">utilization</span><span class="params">(<span class="keyword">struct</span> f2fs_sb_info *sbi)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">return</span> div_u64((u64)valid_user_blocks(sbi) * <span class="number">100</span>,</span><br><span class="line">                                        sbi-&gt;user_block_count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u64 <span class="title function_">div_u64</span><span class="params">(u64 dividend, u32 divisor)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> dividend / divisor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">block_t</span> <span class="title function_">valid_user_blocks</span><span class="params">(<span class="keyword">struct</span> f2fs_sb_info *sbi)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">return</span> sbi-&gt;total_valid_block_count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">total_valid_block_count/user_block_count</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">crash&gt; f2fs_sb_info  <span class="number">0xffffffc707cca000</span> | grep block_count</span><br><span class="line">  user_block_count = <span class="number">26074112</span>,</span><br><span class="line">  total_valid_block_count = <span class="number">26074112</span>,</span><br><span class="line">  last_valid_block_count = <span class="number">26074112</span>,</span><br><span class="line">  unusable_block_count = <span class="number">0</span>,</span><br><span class="line">  alloc_valid_block_count = &#123;</span><br><span class="line">  block_count = &#123;<span class="number">87</span>, <span class="number">267</span>&#125;,</span><br></pre></td></tr></table></figure><p>查看源码报错点发现是bind失败，继续分析bind内核源码</p><h3 id="用户态cnss报错函数"><a href="#用户态cnss报错函数" class="headerlink" title="用户态cnss报错函数"></a>用户态cnss报错函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">cnss_user_socket_init</span><span class="params">(<span class="type">int</span> sock_type)</span></span><br><span class="line">&#123;       </span><br><span class="line">        <span class="type">int</span> sockfd = <span class="number">-1</span>;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> <span class="title">un_address</span>;</span></span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span> (sock_type) &#123;</span><br><span class="line">        <span class="keyword">case</span> AF_UNIX:</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">strlen</span>(CNSS_USER_SERVER) &gt;</span><br><span class="line">                    (<span class="keyword">sizeof</span>(un_address.sun_path) - <span class="number">1</span>)) &#123;</span><br><span class="line">                        wsvc_printf_err(<span class="string">&quot;Invalid server path %s\n&quot;</span>,</span><br><span class="line">                                        CNSS_USER_SERVER);</span><br><span class="line">                        ret = -EINVAL;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (access(CNSS_USER_SERVER, F_OK) == <span class="number">0</span>) &#123;</span><br><span class="line">                        wsvc_printf_info(<span class="string">&quot;server %s exists, remove it \n&quot;</span>,</span><br><span class="line">                                         CNSS_USER_SERVER);</span><br><span class="line">                        remove(CNSS_USER_SERVER);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                sockfd = socket(AF_UNIX, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (sockfd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        wsvc_printf_err(<span class="string">&quot;Fail to create user socket %s\n&quot;</span>,</span><br><span class="line">                                        strerror(errno));</span><br><span class="line">                        ret = -errno;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="built_in">memset</span>(&amp;un_address, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_un));</span><br><span class="line">                un_address.sun_family = AF_UNIX;</span><br><span class="line">                <span class="comment">//CNSS_USER_SERVER赋值给sun_path</span></span><br><span class="line">                strlcpy(un_address.sun_path, CNSS_USER_SERVER,</span><br><span class="line">                        (<span class="keyword">sizeof</span>(un_address.sun_path) - <span class="number">1</span>));</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (bind(sockfd, (<span class="keyword">struct</span> sockaddr *)&amp;un_address,</span><br><span class="line">                         <span class="keyword">sizeof</span>(un_address)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        wsvc_printf_err(<span class="string">&quot;Fail to bind user socket %s\n&quot;</span>,</span><br><span class="line">                                        strerror(errno)); <span class="comment">//ERROR</span></span><br><span class="line">                        close(sockfd);</span><br><span class="line">                        sockfd = <span class="number">-1</span>;</span><br><span class="line">                        ret = -errno;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">                wsvc_printf_err(<span class="string">&quot;%s: Unknown sock type %d\n&quot;</span>,</span><br><span class="line">                                __func__, sock_type);</span><br><span class="line">                ret = -EINVAL;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        cnss_user_sock = sockfd;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="sun-path-CNSS-USER-SERVER"><a href="#sun-path-CNSS-USER-SERVER" class="headerlink" title="sun_path -&gt; CNSS_USER_SERVER"></a>sun_path -&gt; CNSS_USER_SERVER</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* LINUX/android/vendor/qcom/proprietary/wlan/cnss-daemon/cnss_cli.h */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ANDROID</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CNSS_USER_SERVER <span class="string">&quot;/data/vendor/wifi/sockets/cnss_user_server&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CNSS_USER_CLIENT <span class="string">&quot;/data/vendor/wifi/sockets/cnss_user_client&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CNSS_USER_SERVER <span class="string">&quot;/var/run/cnss_user_server&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CNSS_USER_CLIENT <span class="string">&quot;/var/run/cnss_user_client&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>正常环境：</p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20231030201034484.png" alt="image-20231030201034484"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">crash&gt; </span><span class="language-bash">ps | grep cnss</span></span><br><span class="line">     1392       1   5  ffffffcdafdbbb00  IN   0.1 12939508     9736  cnss-daemon</span><br><span class="line">     1446       1   2  ffffffcda12dd880  IN   0.1 12939508     9736  cnss-daemon</span><br><span class="line">     3676       1   6  ffffffcd8b220ec0  UN   0.1 12939508     9736  cnss-daemon</span><br><span class="line">     3904       1   1  ffffffcd7677e740  IN   0.1 12939508     9736  cnss-daemon</span><br><span class="line">     3978       1   5  ffffffcd72796740  UN   0.1 12939508     9736  cnss-daemon</span><br></pre></td></tr></table></figure><p>异常环境：没有cnss-daemon守护进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">crash&gt; </span><span class="language-bash">ps | grep cnss</span></span><br><span class="line">     1297       1   5  ffffffc6eaf83b00  IN   0.1 12927572     6560  cnss_diag</span><br></pre></td></tr></table></figure><p><code>cnss_diag</code> 和 <code>cnss-daemon</code> 是 Qualcomm 芯片上的两个不同的组件，它们在 Wi-Fi 和蓝牙功能的实现中扮演不同的角色。</p><p><code>cnss_diag</code> 是一个用于诊断 Qualcomm 芯片上 Wi-Fi 和蓝牙功能的工具，它可以帮助开发人员和工程师查找和解决与 Wi-Fi 和蓝牙相关的问题。它提供了一系列的命令和选项，可以用于获取和分析 Wi-Fi 和蓝牙的日志、统计信息和诊断数据等。</p><p><code>cnss-daemon</code> 是一个运行在 Qualcomm 芯片上的守护进程，它负责管理和控制 Wi-Fi 和蓝牙的硬件和软件资源。它与 Android 系统的 HAL 层和框架层进行交互，接收和处理来自应用程序和用户的 Wi-Fi 和蓝牙请求，同时也负责处理 Wi-Fi 和蓝牙的事件、状态和错误等。</p><h3 id="bind-unix"><a href="#bind-unix" class="headerlink" title="bind unix"></a>bind unix</h3><p>bind系统调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">SYSCALL_DEFINE3(bind, <span class="type">int</span>, fd, <span class="keyword">struct</span> sockaddr __user *, umyaddr, <span class="type">int</span>, addrlen)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">return</span> __sys_bind(fd, umyaddr, addrlen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* net/socket.c */</span></span><br><span class="line"><span class="type">int</span> __sys_bind(<span class="type">int</span> fd, <span class="keyword">struct</span> sockaddr __user *umyaddr, <span class="type">int</span> addrlen)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">socket</span> *<span class="title">sock</span>;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_storage</span> <span class="title">address</span>;</span></span><br><span class="line">        <span class="type">int</span> err, fput_needed;</span><br><span class="line"></span><br><span class="line">        sock = sockfd_lookup_light(fd, &amp;err, &amp;fput_needed);</span><br><span class="line">        <span class="keyword">if</span> (sock) &#123;</span><br><span class="line">                err = move_addr_to_kernel(umyaddr, addrlen, &amp;address);</span><br><span class="line">                <span class="keyword">if</span> (err &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        err = security_socket_bind(sock,</span><br><span class="line">                                                   (<span class="keyword">struct</span> sockaddr *)&amp;address,</span><br><span class="line">                                                   addrlen);</span><br><span class="line">                        <span class="keyword">if</span> (!err)</span><br><span class="line">                                err = sock-&gt;ops-&gt;bind(sock, <span class="comment">//called</span></span><br><span class="line">                                                      (<span class="keyword">struct</span> sockaddr *)</span><br><span class="line">                                                      &amp;address, addrlen);</span><br><span class="line">                &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="socket结构体"><a href="#socket结构体" class="headerlink" title="socket结构体"></a>socket结构体</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">crash&gt; </span><span class="language-bash">socket | grep ops</span></span><br><span class="line">    const struct proto_ops *ops;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* include/linux/socket.h */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PF_UNIX         AF_UNIX</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">proto_ops</span> <span class="title">unix_stream_ops</span> =</span> &#123;</span><br><span class="line">        .family =       PF_UNIX,</span><br><span class="line">        .owner =        THIS_MODULE,</span><br><span class="line">        .release =      unix_release,</span><br><span class="line">        .bind =         unix_bind, <span class="comment">//called</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="bind底层调用关系"><a href="#bind底层调用关系" class="headerlink" title="bind底层调用关系"></a>bind底层调用关系</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">unix_bind</span><span class="params">(<span class="keyword">struct</span> socket *sock, <span class="keyword">struct</span> sockaddr *uaddr, <span class="type">int</span> addr_len)</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="comment">//sun_path来源于uaddr</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> *<span class="title">sunaddr</span> =</span> (<span class="keyword">struct</span> sockaddr_un *)uaddr;</span><br><span class="line">    <span class="type">char</span> *sun_path = sunaddr-&gt;sun_path;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">if</span> (addr_len == <span class="keyword">sizeof</span>(<span class="type">short</span>)) &#123;</span><br><span class="line">            err = unix_autobind(sock);</span><br><span class="line">            <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="unix-autobind"><a href="#unix-autobind" class="headerlink" title="unix_autobind"></a>unix_autobind</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">unix_autobind</span><span class="params">(<span class="keyword">struct</span> socket *sock)</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">unix_address</span> *<span class="title">addr</span>;</span></span><br><span class="line">    ...</span><br><span class="line">    addr = kzalloc(<span class="keyword">sizeof</span>(*addr) + <span class="keyword">sizeof</span>(<span class="type">short</span>) + <span class="number">16</span>, GFP_KERNEL);</span><br><span class="line">    addr-&gt;name-&gt;sun_family = AF_UNIX;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">if</span> (__unix_find_socket_byname(net, addr-&gt;name, addr-&gt;len, sock-&gt;type,</span><br><span class="line">                                      addr-&gt;hash)) &#123;</span><br><span class="line">            spin_unlock(&amp;unix_table_lock);</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * __unix_find_socket_byname() may take long time if many names</span></span><br><span class="line"><span class="comment">             * are already in use.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            cond_resched();</span><br><span class="line">            <span class="comment">/* Give up if all names seems to be in use. */</span></span><br><span class="line">            <span class="keyword">if</span> (retries++ == <span class="number">0xFFFFF</span>) &#123;</span><br><span class="line">                    err = -ENOSPC;</span><br><span class="line">                    kfree(addr);</span><br><span class="line">                    <span class="keyword">goto</span> out;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">goto</span> retry;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">unix_address</span> &#123;</span></span><br><span class="line">    <span class="type">atomic_t</span> refcnt;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="type">unsigned</span> hash;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> <span class="title">name</span>[0];</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> &#123;</span></span><br><span class="line">        <span class="type">__kernel_sa_family_t</span> sun_family; <span class="comment">/* AF_UNIX */</span></span><br><span class="line">        <span class="type">char</span> sun_path[UNIX_PATH_MAX];   <span class="comment">/* pathname */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="unix-find-socket-byname"><a href="#unix-find-socket-byname" class="headerlink" title="__unix_find_socket_byname"></a>__unix_find_socket_byname</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *__<span class="title">unix_find_socket_byname</span>(<span class="keyword">struct</span> <span class="title">net</span> *<span class="title">net</span>,</span></span><br><span class="line"><span class="class">                                              <span class="keyword">struct</span> <span class="title">sockaddr_un</span> *<span class="title">sunname</span>,</span></span><br><span class="line"><span class="class">                                              <span class="title">int</span> <span class="title">len</span>, <span class="title">int</span> <span class="title">type</span>, <span class="title">unsigned</span> <span class="title">int</span> <span class="title">hash</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">s</span>;</span></span><br><span class="line"></span><br><span class="line">        sk_for_each(s, &amp;unix_socket_table[hash ^ type]) &#123;</span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">unix_sock</span> *<span class="title">u</span> =</span> unix_sk(s);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!net_eq(sock_net(s), net))</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">//sunname包含AF_UNIX和/data/vendor/wifi/sockets/cnss_user_server</span></span><br><span class="line">            <span class="comment">//表示这个socket名一直被占用</span></span><br><span class="line">                <span class="keyword">if</span> (u-&gt;addr-&gt;len == len &amp;&amp;</span><br><span class="line">                    !<span class="built_in">memcmp</span>(u-&gt;addr-&gt;name, sunname, len)) <span class="comment">//memcmp为0表示u-&gt;addr-&gt;name == sunname</span></span><br><span class="line">                        <span class="keyword">goto</span> found;</span><br><span class="line">        &#125;</span><br><span class="line">        s = <span class="literal">NULL</span>;</span><br><span class="line">found:</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> sk_for_each(__sk, list) \</span></span><br><span class="line"><span class="meta">        hlist_for_each_entry(__sk, list, sk_node)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * hlist_for_each_entry - iterate over list of given type</span></span><br><span class="line"><span class="comment"> * @pos:        the type * to use as a loop cursor.</span></span><br><span class="line"><span class="comment"> * @head:       the head for your list.</span></span><br><span class="line"><span class="comment"> * @member:     the name of the hlist_node within the struct.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> hlist_for_each_entry(pos, head, member)                         \</span></span><br><span class="line"><span class="meta">        for (pos = hlist_entry_safe((head)-&gt;first, typeof(*(pos)), member);\</span></span><br><span class="line"><span class="meta">             pos;                                                       \</span></span><br><span class="line"><span class="meta">             pos = hlist_entry_safe((pos)-&gt;member.next, typeof(*(pos)), member))</span></span><br></pre></td></tr></table></figure><h4 id="unix-socket-table"><a href="#unix-socket-table" class="headerlink" title="unix_socket_table"></a>unix_socket_table</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">unix_insert_socket</span><span class="params">(<span class="keyword">struct</span> hlist_head *<span class="built_in">list</span>, <span class="keyword">struct</span> sock *sk)</span></span><br><span class="line">&#123;</span><br><span class="line">        spin_lock(&amp;unix_table_lock);</span><br><span class="line">        __unix_insert_socket(<span class="built_in">list</span>, sk);</span><br><span class="line">        spin_unlock(&amp;unix_table_lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __unix_insert_socket(<span class="keyword">struct</span> hlist_head *<span class="built_in">list</span>, <span class="keyword">struct</span> sock *sk)</span><br><span class="line">&#123;</span><br><span class="line">        WARN_ON(!sk_unhashed(sk));</span><br><span class="line">        sk_add_node(sk, <span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">sk_add_node</span><span class="params">(<span class="keyword">struct</span> sock *sk, <span class="keyword">struct</span> hlist_head *<span class="built_in">list</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        sock_hold(sk);</span><br><span class="line">        __sk_add_node(sk, <span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> __sk_add_node(<span class="keyword">struct</span> sock *sk, <span class="keyword">struct</span> hlist_head *<span class="built_in">list</span>)</span><br><span class="line">&#123;</span><br><span class="line">        hlist_add_head(&amp;sk-&gt;sk_node, <span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sk_node                 __sk_common.skc_node</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">hlist_add_head</span><span class="params">(<span class="keyword">struct</span> hlist_node *n, <span class="keyword">struct</span> hlist_head *h)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> *<span class="title">first</span> =</span> h-&gt;first;</span><br><span class="line">        n-&gt;next = first;</span><br><span class="line">        <span class="keyword">if</span> (first)</span><br><span class="line">                first-&gt;pprev = &amp;n-&gt;next;</span><br><span class="line">        WRITE_ONCE(h-&gt;first, n);</span><br><span class="line">        n-&gt;pprev = &amp;h-&gt;first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">crash&gt; </span><span class="language-bash">sock_common -xo | grep skc_node</span></span><br><span class="line">  [0x68]     struct hlist_node skc_node;</span><br><span class="line"><span class="meta prompt_">crash&gt; </span><span class="language-bash">sock -xo | grep sock_common</span></span><br><span class="line">    [0x0] struct sock_common __sk_common;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">crash&gt; </span><span class="language-bash">unix_socket_table | grep -v 0x0 | grep first | <span class="built_in">head</span> -n 1</span></span><br><span class="line">    first = 0xffffffc59ddb5568</span><br><span class="line"></span><br><span class="line">first - 0x68 = sock</span><br></pre></td></tr></table></figure><p>解析unix_socket_table 居然没有cnss_user_server 不理解</p><blockquote><p>first &#x3D; 0xffffffc59ddb5568 &#x2F;dev&#x2F;socket&#x2F;property_service<br>first &#x3D; 0xffffffc7088004a8 &#x2F;dev&#x2F;socket&#x2F;logd<br>first &#x3D; 0xffffffc59ddb5de8 &#x2F;dev&#x2F;socket&#x2F;traced_consumer<br>first &#x3D; 0xffffffc59ddb4468 &#x2F;dev&#x2F;socket&#x2F;traced_producer<br>first &#x3D; 0xffffffc59ddb48a8 &#x2F;dev&#x2F;socket&#x2F;dpmd<br>first &#x3D; 0xffffffc59ddb7328 &#x2F;dev&#x2F;socket&#x2F;tcm<br>first &#x3D; 0xffffffc59ddb6668 &#x2F;dev&#x2F;socket&#x2F;dpmwrapper<br>first &#x3D; 0xffffffc708801e28 &#x2F;dev&#x2F;socket&#x2F;qwes_ipc<br>first &#x3D; 0xffffffc708a64028 &#x2F;dev&#x2F;socket&#x2F;ims_qmid<br>first &#x3D; 0xffffffc6efa6c028 &#x2F;dev&#x2F;socket&#x2F;location&#x2F;mq&#x2F;location-mq-s<br>first &#x3D; 0xffffffc708a61e28 &#x2F;dev&#x2F;socket&#x2F;thermal-send-client<br>first &#x3D; 0xffffffc708a62268 &#x2F;dev&#x2F;socket&#x2F;thermal-recv-client<br>first &#x3D; 0xffffffc708a60068 &#x2F;dev&#x2F;socket&#x2F;thermal-recv-passive-client<br>first &#x3D; 0xffffffc708a67ba8 &#x2F;dev&#x2F;socket&#x2F;thermal-send-rule<br>first &#x3D; 0xffffffc6e3bac468 &#x2F;dev&#x2F;socket&#x2F;ims_datad<br>first &#x3D; 0xffffffc708a66ee8 &#x2F;dev&#x2F;socket&#x2F;ipacm_log_file<br>first &#x3D; 0xffffffc59ddb7ba8 &#x2F;dev&#x2F;socket&#x2F;lmkd<br>first &#x3D; 0xffffffc708a648a8 &#x2F;dev&#x2F;socket&#x2F;ssgqmig<br>first &#x3D; 0xffffffc6dd5a6668 &#x2F;dev&#x2F;socket&#x2F;zygote<br>first &#x3D; 0xffffffc6dd5a6ee8 &#x2F;dev&#x2F;socket&#x2F;usap_pool_primary<br>first &#x3D; 0xffffffc708a65128 &#x2F;dev&#x2F;socket&#x2F;statsdw<br>first &#x3D; 0xffffffc6dd5a2268 &#x2F;dev&#x2F;socket&#x2F;zygote_secondary<br>first &#x3D; 0xffffffc6dd5a37a8 &#x2F;dev&#x2F;socket&#x2F;usap_pool_secondary<br>first &#x3D; 0xffffffc6dd5a48a8 &#x2F;dev&#x2F;socket&#x2F;dnsproxyd<br>first &#x3D; 0xffffffc6dd5a26a8 &#x2F;dev&#x2F;socket&#x2F;mdns<br>first &#x3D; 0xffffffc6dd5a59a8 &#x2F;dev&#x2F;socket&#x2F;fwmarkd<br>first &#x3D; 0xffffffc702bd0068 &#x2F;dev&#x2F;socket&#x2F;qvrservice_vndr<br>first &#x3D; 0xffffffc702bd7ba8 &#x2F;dev&#x2F;socket&#x2F;qvrservice_vndr_camera<br>first &#x3D; 0xffffffc708805de8 &#x2F;dev&#x2F;socket&#x2F;tombstoned_crash<br>first &#x3D; 0xffffffc708807328 &#x2F;dev&#x2F;socket&#x2F;tombstoned_intercept<br>first &#x3D; 0xffffffc708806668 &#x2F;dev&#x2F;socket&#x2F;tombstoned_java_trace<br>first &#x3D; 0xffffffc6e0996228 &#x2F;dev&#x2F;socket&#x2F;mlid<br>first &#x3D; 0xffffffc708a608e8 &#x2F;dev&#x2F;socket&#x2F;pps<br>first &#x3D; 0xffffffc6dd5a1e28 THERMALE_UIs0<br>first &#x3D; 0xffffffc6e0992268 &#x2F;dev&#x2F;socket&#x2F;adbd<br>first &#x3D; 0xffffffc6e3ba84a8 &#x2F;dev&#x2F;socket&#x2F;mdnsd<br>first &#x3D; 0xffffffc70bf4c468 &#x2F;dev&#x2F;socket&#x2F;port-bridge&#x2F;port_bridge_connect_socket<br>first &#x3D; 0xffffffc6d74ce228 &#x2F;data&#x2F;system&#x2F;unsolzygotesocket<br>first &#x3D; 0xffffffc6e3bad568 jdwp-control<br>first &#x3D; 0xffffffc708803be8 gplisnr</p></blockquote><h4 id="对比正常环境的unix-socket-table"><a href="#对比正常环境的unix-socket-table" class="headerlink" title="对比正常环境的unix_socket_table"></a>对比正常环境的unix_socket_table</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">PID: 1405     TASK: ffffffd55bc3d880  CPU: 6    COMMAND: &quot;cnss-daemon&quot;</span><br><span class="line">FD      SOCKET            SOCK       FAMILY:TYPE SOURCE-PORT DESTINATION-PORT</span><br><span class="line"> 4 ffffffd5b787cc00 ffffffd55bfba800 NETLINK/ROUTE:RAW </span><br><span class="line"> 5 ffffffd5b787d500 ffffffd588290440 UNIX:STREAM </span><br><span class="line"> 6 ffffffd5b787e700 ffffffd588292200 UNIX:STREAM </span><br><span class="line"> 7 ffffffd5b787e100 ffffffd588290000 UNIX:DGRAM  0</span><br><span class="line"> 8 ffffffd5b787c600 ffffffd55bfbd800 NETLINK/ROUTE:RAW </span><br><span class="line"> 9 ffffffd5b787ea00 ffffffd55bfbe000 NETLINK/ROUTE:RAW </span><br><span class="line">10 ffffffd565be5200 ffffffd5807ea000 NETLINK/ROUTE:RAW </span><br><span class="line">11 ffffffd565be7600 ffffffd5807ee800 NETLINK/ROUTE:RAW </span><br><span class="line">12 ffffffd565be6a00 ffffffd588326a40 UNIX:DGRAM   /data/vendor/wifi/sockets/cnss_user_server</span><br><span class="line">13 ffffffd565be7900 ffffffd5807e8000 NETLINK/ROUTE:RAW </span><br><span class="line">14 ffffffd570f50600 ffffffd581cf9a00 42:DGRAM  </span><br><span class="line">17 ffffffd541213600 ffffffd58b843a80 42:DGRAM  </span><br><span class="line">20 ffffffd53e1e7900 ffffffd581cfa080 42:DGRAM</span><br><span class="line"></span><br><span class="line">sock ffffffd588326a40</span><br><span class="line">first = sock + 0x68 = ffffffd588326aa8</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">crash&gt; </span><span class="language-bash">unix_socket_table | grep -v 0x0 | grep first | grep ffffffd588326aa8</span></span><br><span class="line">    first = 0xffffffd588326aa8</span><br><span class="line">    </span><br><span class="line">ffffffd588326a40 + 0x320 = ffffffd588326d60</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">crash&gt; </span><span class="language-bash">rd ffffffd588326d60</span></span><br><span class="line">ffffffd588326d60:  ffffffd564a38b00                    ...d....</span><br><span class="line"><span class="meta prompt_">crash&gt; </span><span class="language-bash">unix_address ffffffd564a38b00</span></span><br><span class="line">struct unix_address &#123;</span><br><span class="line">  refcnt = &#123;</span><br><span class="line">    refs = &#123;</span><br><span class="line">      counter = 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  len = 45,</span><br><span class="line">  hash = 256,</span><br><span class="line">  name = 0xffffffd564a38b0c</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">crash&gt; </span><span class="language-bash">sockaddr_un 0xffffffd564a38b0c</span></span><br><span class="line">struct sockaddr_un &#123;</span><br><span class="line">  sun_family = 1,</span><br><span class="line">  sun_path = &quot;/data/vendor/wifi/sockets/cnss_user_server\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="反推并没有走到unix-autobind函数，再次审视unix-bind函数"><a href="#反推并没有走到unix-autobind函数，再次审视unix-bind函数" class="headerlink" title="反推并没有走到unix_autobind函数，再次审视unix_bind函数"></a>反推并没有走到unix_autobind函数，再次审视unix_bind函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">unix_bind</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">    err = unix_mkname(sunaddr, addr_len, &amp;hash);</span><br><span class="line">        <span class="keyword">if</span> (err &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">goto</span> out;</span><br><span class="line">        addr_len = err;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sun_path[<span class="number">0</span>]) &#123;</span><br><span class="line">                <span class="type">umode_t</span> mode = S_IFSOCK |</span><br><span class="line">                       (SOCK_INODE(sock)-&gt;i_mode &amp; ~current_umask());</span><br><span class="line">                err = unix_mknod(sun_path, mode, &amp;path);</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (err == -EEXIST)</span><br><span class="line">                                err = -EADDRINUSE;</span><br><span class="line">                        <span class="keyword">goto</span> out;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        err = mutex_lock_interruptible(&amp;u-&gt;bindlock);</span><br><span class="line">        <span class="keyword">if</span> (err)</span><br><span class="line">                <span class="keyword">goto</span> out_put;</span><br><span class="line"></span><br><span class="line">        err = -EINVAL;</span><br><span class="line">        <span class="keyword">if</span> (u-&gt;addr)</span><br><span class="line">                <span class="keyword">goto</span> out_up;</span><br><span class="line"></span><br><span class="line">        err = -ENOMEM;</span><br><span class="line">        addr = kmalloc(<span class="keyword">sizeof</span>(*addr)+addr_len, GFP_KERNEL);</span><br><span class="line">        <span class="keyword">if</span> (!addr)</span><br><span class="line">                <span class="keyword">goto</span> out_up;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memcpy</span>(addr-&gt;name, sunaddr, addr_len);</span><br><span class="line">        addr-&gt;len = addr_len;</span><br><span class="line">        addr-&gt;hash = hash ^ sk-&gt;sk_type;</span><br><span class="line">        refcount_set(&amp;addr-&gt;refcnt, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sun_path[<span class="number">0</span>]) &#123;</span><br><span class="line">                addr-&gt;hash = UNIX_HASH_SIZE;</span><br><span class="line">                hash = d_backing_inode(path.dentry)-&gt;i_ino &amp; (UNIX_HASH_SIZE - <span class="number">1</span>);</span><br><span class="line">                spin_lock(&amp;unix_table_lock);</span><br><span class="line">                u-&gt;path = path;</span><br><span class="line">                <span class="built_in">list</span> = &amp;unix_socket_table[hash];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                spin_lock(&amp;unix_table_lock);</span><br><span class="line">                err = -EADDRINUSE;</span><br><span class="line">                <span class="keyword">if</span> (__unix_find_socket_byname(net, sunaddr, addr_len,</span><br><span class="line">                                              sk-&gt;sk_type, hash)) &#123;</span><br><span class="line">                        unix_release_addr(addr);</span><br><span class="line">                        <span class="keyword">goto</span> out_unlock;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">list</span> = &amp;unix_socket_table[addr-&gt;hash];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        err = <span class="number">0</span>;</span><br><span class="line">        __unix_remove_socket(sk);</span><br><span class="line">        smp_store_release(&amp;u-&gt;addr, addr);</span><br><span class="line">        __unix_insert_socket(<span class="built_in">list</span>, sk);</span><br><span class="line"></span><br><span class="line">out_unlock:</span><br><span class="line">        spin_unlock(&amp;unix_table_lock);</span><br><span class="line">out_up:</span><br><span class="line">        mutex_unlock(&amp;u-&gt;bindlock);</span><br><span class="line">out_put:</span><br><span class="line">        <span class="keyword">if</span> (err)</span><br><span class="line">                path_put(&amp;path);</span><br><span class="line">out:</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据返回值 关注unix_mkname unix_mknod</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">unix_mkname</span><span class="params">(<span class="keyword">struct</span> sockaddr_un *sunaddr, <span class="type">int</span> len, <span class="type">unsigned</span> <span class="type">int</span> *hashp)</span></span><br><span class="line">&#123;</span><br><span class="line">        *hashp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (len &lt;= <span class="keyword">sizeof</span>(<span class="type">short</span>) || len &gt; <span class="keyword">sizeof</span>(*sunaddr))</span><br><span class="line">                <span class="keyword">return</span> -EINVAL;</span><br><span class="line">        <span class="keyword">if</span> (!sunaddr || sunaddr-&gt;sun_family != AF_UNIX)</span><br><span class="line">                <span class="keyword">return</span> -EINVAL;</span><br><span class="line">        <span class="keyword">if</span> (sunaddr-&gt;sun_path[<span class="number">0</span>]) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * This may look like an off by one error but it is a bit more</span></span><br><span class="line"><span class="comment">                 * subtle. 108 is the longest valid AF_UNIX path for a binding.</span></span><br><span class="line"><span class="comment">                 * sun_path[108] doesn&#x27;t as such exist.  However in kernel space</span></span><br><span class="line"><span class="comment">                 * we are guaranteed that it is a valid memory location in our</span></span><br><span class="line"><span class="comment">                 * kernel address buffer.</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                ((<span class="type">char</span> *)sunaddr)[len] = <span class="number">0</span>;</span><br><span class="line">                len = <span class="built_in">strlen</span>(sunaddr-&gt;sun_path)+<span class="number">1</span>+<span class="keyword">sizeof</span>(<span class="type">short</span>);</span><br><span class="line">                <span class="keyword">return</span> len;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        *hashp = unix_hash_fold(csum_partial(sunaddr, len, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>unix_mkname没有ENOSPC</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">unix_mknod</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *sun_path, <span class="type">umode_t</span> mode, <span class="keyword">struct</span> path *res)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">dentry</span> *<span class="title">dentry</span>;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">path</span> <span class="title">path</span>;</span></span><br><span class="line">        <span class="type">int</span> err = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Get the parent directory, calculate the hash for last</span></span><br><span class="line"><span class="comment">         * component.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        dentry = kern_path_create(AT_FDCWD, sun_path, &amp;path, <span class="number">0</span>);</span><br><span class="line">        err = PTR_ERR(dentry);</span><br><span class="line">        <span class="keyword">if</span> (IS_ERR(dentry))</span><br><span class="line">                <span class="keyword">return</span> err;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * All right, let&#x27;s create it.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        err = security_path_mknod(&amp;path, dentry, mode, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">                err = vfs_mknod(d_inode(path.dentry), dentry, mode, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">                        res-&gt;mnt = mntget(path.mnt);</span><br><span class="line">                        res-&gt;dentry = dget(dentry);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        done_path_create(&amp;path, dentry);</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> dentry *<span class="title function_">kern_path_create</span><span class="params">(<span class="type">int</span> dfd, <span class="type">const</span> <span class="type">char</span> *pathname,</span></span><br><span class="line"><span class="params">                                <span class="keyword">struct</span> path *path, <span class="type">unsigned</span> <span class="type">int</span> lookup_flags)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">return</span> filename_create(dfd, getname_kernel(pathname),</span><br><span class="line">                                path, lookup_flags);</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL(kern_path_create);</span><br></pre></td></tr></table></figure><p>filename_create会去创建文件或者目录，会在data分区下面尝试写入，但是由于空间不足导致ENOSPC</p><h4 id="一句话结论"><a href="#一句话结论" class="headerlink" title="一句话结论"></a>一句话结论</h4><p>cnss等待加载fw超时，超时原因又是cnss daemon创建socket失败创建socket，也需要写入 socket fd</p><h3 id="那么谁占用了data分区？"><a href="#那么谁占用了data分区？" class="headerlink" title="那么谁占用了data分区？"></a>那么谁占用了data分区？</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">crash&gt; </span><span class="language-bash">mount | grep data</span></span><br><span class="line">ffffffc70cd3ad80 ffffffc59e09f800 ext4   /dev/block/by-name/metadata /metadata </span><br><span class="line">ffffffc70cd3b640 ffffffc59e3c7000 ext4   /dev/block/dm-10 /apex/com.android.tzdata</span><br><span class="line">ffffffc736581180 ffffffc70bdfe000 f2fs   /dev/block/dm-15 /data  </span><br></pre></td></tr></table></figure><p>得到&#x2F;data的super_block结构体地址</p><h4 id="super-block与f2fs-sb-info的联系"><a href="#super-block与f2fs-sb-info的联系" class="headerlink" title="super_block与f2fs_sb_info的联系"></a>super_block与f2fs_sb_info的联系</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="keyword">struct</span> f2fs_sb_info *<span class="title function_">F2FS_SB</span><span class="params">(<span class="keyword">struct</span> super_block *sb)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> sb-&gt;s_fs_info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//偏移0x440</span></span><br><span class="line">crash&gt; super_block -xo | grep s_fs_info</span><br><span class="line">  [<span class="number">0x440</span>] <span class="type">void</span> *s_fs_info;</span><br><span class="line"></span><br><span class="line">s_fs_info: ffffffc70bdfe000 + <span class="number">0x440</span> = ffffffc70bdfe440</span><br><span class="line"></span><br><span class="line"><span class="comment">//s_fs_info是指针，需要rd取内容</span></span><br><span class="line">crash&gt; rd ffffffc70bdfe440</span><br><span class="line">ffffffc70bdfe440:  ffffffc707cca000                    ........</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> f2fs_sb_info : <span class="number">0xffffffc707cca000</span> </span><br></pre></td></tr></table></figure><p>反推可以证明f2fs_sb_info地址的准确性</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">f2fs_sb_info</span> &#123;</span></span><br><span class="line">    [<span class="number">0x0</span>] <span class="class"><span class="keyword">struct</span> <span class="title">super_block</span> *<span class="title">sb</span>;</span></span><br><span class="line"></span><br><span class="line">crash&gt; rd <span class="number">0xffffffc707cca000</span></span><br><span class="line">ffffffc707cca000:  ffffffc70bdfe000                    ........</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">super_block</span> :</span> ffffffc70bdfe000</span><br></pre></td></tr></table></figure><h4 id="f2fs-superblock结构"><a href="#f2fs-superblock结构" class="headerlink" title="f2fs superblock结构"></a>f2fs superblock结构</h4><p><img src="https://github.com/RiweiPan/F2FS-NOTES/raw/master/img/F2FS-Layout/sb_layout2.png" alt="sb_layout"></p><p>整个磁盘区域被F2FS设计为6个区域：</p><p>分别是Superblock，Checkpoint，Segment Info Table，Node Address Table，Segment Summary Area，以及<strong>Main Area</strong>。</p><p>前5个区域总称为元数据区域，保存的是跟F2FS直接相关的元信息，而最后一个区域是<strong>保存文件数据的主要区域</strong>。</p><p>block: 4KB对齐且连续的物理存储空间<br>segment: 2M连续的物理存储空间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">struct f2fs_sb_info &#123;</span><br><span class="line">    [0x0] struct super_block *sb;</span><br><span class="line">    [0x8] struct proc_dir_entry *s_proc;</span><br><span class="line">   [0x10] struct f2fs_super_block *raw_super;</span><br><span class="line">   </span><br><span class="line"><span class="meta prompt_">crash&gt; </span><span class="language-bash">rd 0xffffffc707cca010</span></span><br><span class="line">ffffffc707cca010:  ffffffc707cc9000                    ........</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">crash&gt; </span><span class="language-bash">f2fs_super_block  ffffffc707cc9000</span></span><br><span class="line">struct f2fs_super_block &#123;</span><br><span class="line">  magic = 4076150800,</span><br><span class="line">  major_ver = 1,</span><br><span class="line">  minor_ver = 13,</span><br><span class="line">  log_sectorsize = 12,</span><br><span class="line">  log_sectors_per_block = 0,</span><br><span class="line">  log_blocksize = 12,</span><br><span class="line">  log_blocks_per_seg = 9,</span><br><span class="line">  segs_per_sec = 1,</span><br><span class="line">  secs_per_zone = 1,</span><br><span class="line">  checksum_offset = 0,</span><br><span class="line">  block_count = 26520121,</span><br><span class="line">  section_count = 51573,</span><br><span class="line">  segment_count = 51796,</span><br><span class="line">  segment_count_ckpt = 2,</span><br><span class="line">  segment_count_sit = 4,</span><br><span class="line">  segment_count_nat = 116,</span><br><span class="line">  segment_count_ssa = 101,</span><br><span class="line">  segment_count_main = 51573, //51573*2MB=100GB</span><br><span class="line">  segment0_blkaddr = 512,</span><br><span class="line">  cp_blkaddr = 512,</span><br><span class="line">  sit_blkaddr = 1536,</span><br><span class="line">  nat_blkaddr = 3584,</span><br><span class="line">  ssa_blkaddr = 62976,</span><br><span class="line">  main_blkaddr = 114688,</span><br><span class="line">  root_ino = 3,</span><br><span class="line">  node_ino = 1,</span><br><span class="line">  meta_ino = 2,</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><h4 id="疑问点：为啥没有gc出空间"><a href="#疑问点：为啥没有gc出空间" class="headerlink" title="疑问点：为啥没有gc出空间"></a>疑问点：为啥没有gc出空间</h4><p>垃圾回收在F2FS中，主要作用是回收无效的block，以供用户重新使用</p><p>[F2FS源码分析-4.1 <a href="https://blog.csdn.net/u011649400/article/details/100530006">F2FS GC部分] 垃圾回收机制源码分析-CSDN博客</a></p><h4 id="【换个思路】从进程打开的文件角度看"><a href="#【换个思路】从进程打开的文件角度看" class="headerlink" title="【换个思路】从进程打开的文件角度看"></a>【换个思路】从进程打开的文件角度看</h4><p>foreach files 命令可以看到所有进程打开的文件路径，dentry，inode地址</p><p>过滤&#x2F;data目录后得到</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/38919652/1699512190654-1f0f0643-c723-43d9-9797-769df05bbfff.png?x-oss-process=image/resize,w_750,limit_0" alt="image.png"></p><p>根据inode地址推导出文件i_size大小，单位为字节，最大文件为30M左右</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/38919652/1699512198798-efb86cd3-7c50-4b8a-baf3-128d965e4e5e.png" alt="image.png"></p><h4 id="一句话结论-1"><a href="#一句话结论-1" class="headerlink" title="一句话结论"></a>一句话结论</h4><p>&#x2F;data目录下打开的文件属于正常，所以导致data分区满的原因不是系统进程创建的文件，推测是外部导入的</p><h3 id="如何复现"><a href="#如何复现" class="headerlink" title="如何复现"></a>如何复现</h3><p>先使用dd命令把data分区塞满，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/zero of=/data/test bs=1g count=100</span><br></pre></td></tr></table></figure><p>若还剩M级别或者k级别的内存空间，将bs&#x3D;1g换成1m或者1k来继续填满【记得修改of后面的文件名】</p><p>之后就让设备放着跑，过会就复现红灯了</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>1、<a href="https://zhuanlan.zhihu.com/p/640917510">f2fs文件系统（八）文件布局 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;wlan-crash&quot;&gt;&lt;a href=&quot;#wlan-crash&quot; class=&quot;headerlink&quot; title=&quot;wlan crash&quot;&gt;&lt;/a&gt;wlan crash&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t</summary>
      
    
    
    
    
    <category term="problem" scheme="http://example.com/tags/problem/"/>
    
  </entry>
  
  <entry>
    <title>anr</title>
    <link href="http://example.com/2024/03/27/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/anr/"/>
    <id>http://example.com/2024/03/27/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/anr/</id>
    <published>2024-03-27T07:12:51.831Z</published>
    <updated>2024-03-27T07:16:18.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分析日志"><a href="#分析日志" class="headerlink" title="分析日志"></a>分析日志</h2><p>1.分析main主线程</p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240319102143757.png" alt="image-20240319102143757"></p><p>2.存在binder跨进程通信，看binder_info日志</p><pre><code>行 1057:incoming transaction 540396: 00000000f34d0d1d from 1019:1019 to 977:1211 code 23 flags 10 pri 1:98 r1 node 1294 size 140:16 data 000000004f5a8a4a行 1117:outgoing transaction 540396: 00000000f34d0d1d from 1019:1019 to 977:1211 code 23 flags 10 pri 1:98 r1</code></pre><p>可以看出当前进程1019正在等待977进程的1211线程执行操作</p><p>3.查看1211线程</p><p>—– pid 977 at 2024-03-18 17:41:15.690162978+0800 —–<br>Cmd line: &#x2F;vendor&#x2F;bin&#x2F;hw&#x2F;vendor.qti.hardware.display.composer-service</p><p><img src="C:\Users\rokid\AppData\Roaming\Typora\typora-user-images\image-20240319102453966.png" alt="image-20240319102453966"></p><h2 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h2><h3 id="1-symbol-path"><a href="#1-symbol-path" class="headerlink" title="1.symbol path"></a>1.symbol path</h3><p>LINUX&#x2F;android&#x2F;out&#x2F;target&#x2F;product&#x2F;kona&#x2F;symbols&#x2F;vendor&#x2F;bin&#x2F;hw&#x2F;vendor.qti.hardware.display.composer-service</p><h3 id="2-add-mutex-owner-in-android-bionic-libc"><a href="#2-add-mutex-owner-in-android-bionic-libc" class="headerlink" title="2.add mutex owner in android bionic libc"></a>2.add mutex owner in android bionic libc</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/core/libutils/include/utils/Mutex.h b/core/libutils/include/utils/Mutex.h</span><br><span class="line">index <span class="number">1325b</span>f3.<span class="number">.4481</span>d82 <span class="number">100644</span></span><br><span class="line">--- a/core/libutils/include/utils/Mutex.h</span><br><span class="line">+++ b/core/libutils/include/utils/Mutex.h</span><br><span class="line">@@ <span class="number">-160</span>,<span class="number">10</span> +<span class="number">160</span>,<span class="number">20</span> @@ class <span class="title function_">CAPABILITY</span><span class="params">(<span class="string">&quot;mutex&quot;</span>)</span> Mutex &#123;</span><br><span class="line"> <span class="meta">#<span class="keyword">if</span> !defined(_WIN32)</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">inline</span> <span class="title function_">Mutex::Mutex</span><span class="params">()</span> &#123;</span><br><span class="line">-    pthread_mutex_init(&amp;mMutex, nullptr);</span><br><span class="line">+    <span class="comment">//pthread_mutex_init(&amp;mMutex, nullptr);</span></span><br><span class="line">+    <span class="type">pthread_mutexattr_t</span> attr;</span><br><span class="line">+    pthread_mutexattr_init(&amp;attr);</span><br><span class="line">+    pthread_mutexattr_settype(&amp;attr, PTHREAD_MUTEX_ERRORCHECK);</span><br><span class="line">+    pthread_mutex_init(&amp;mMutex, &amp;attr );</span><br><span class="line">+    pthread_mutexattr_destroy(&amp;attr);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">inline</span> <span class="title function_">Mutex::Mutex</span><span class="params">(__attribute__((unused)) <span class="type">const</span> <span class="type">char</span>* name)</span> &#123;</span><br><span class="line">-    pthread_mutex_init(&amp;mMutex, nullptr);</span><br><span class="line">+    <span class="comment">//pthread_mutex_init(&amp;mMutex, nullptr);</span></span><br><span class="line">+    <span class="type">pthread_mutexattr_t</span> attr;</span><br><span class="line">+    pthread_mutexattr_init(&amp;attr);</span><br><span class="line">+    pthread_mutexattr_settype(&amp;attr, PTHREAD_MUTEX_ERRORCHECK);</span><br><span class="line">+    pthread_mutex_init(&amp;mMutex, &amp;attr );</span><br><span class="line">+    pthread_mutexattr_destroy(&amp;attr);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">inline</span> <span class="title function_">Mutex::Mutex</span><span class="params">(<span class="type">int</span> type, __attribute__((unused)) <span class="type">const</span> <span class="type">char</span>* name)</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (type == SHARED) &#123;</span><br><span class="line">@@ <span class="number">-173</span>,<span class="number">7</span> +<span class="number">183</span>,<span class="number">12</span> @@ <span class="keyword">inline</span> <span class="title function_">Mutex::Mutex</span><span class="params">(<span class="type">int</span> type, __attribute__((unused)) <span class="type">const</span> <span class="type">char</span>* name)</span> &#123;</span><br><span class="line">         pthread_mutex_init(&amp;mMutex, &amp;attr);</span><br><span class="line">         pthread_mutexattr_destroy(&amp;attr);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">-        pthread_mutex_init(&amp;mMutex, nullptr);</span><br><span class="line">+        <span class="comment">//pthread_mutex_init(&amp;mMutex, nullptr);</span></span><br><span class="line">+       <span class="type">pthread_mutexattr_t</span> attr;</span><br><span class="line">+       pthread_mutexattr_init(&amp;attr);</span><br><span class="line">+       pthread_mutexattr_settype(&amp;attr, PTHREAD_MUTEX_ERRORCHECK);</span><br><span class="line">+       pthread_mutex_init(&amp;mMutex, &amp;attr );</span><br><span class="line">+       pthread_mutexattr_destroy(&amp;attr);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">inline</span> Mutex::~Mutex() &#123;</span><br></pre></td></tr></table></figure><h3 id="3-compile-libutils-and-get-libutils-so"><a href="#3-compile-libutils-and-get-libutils-so" class="headerlink" title="3.compile libutils and get libutils.so"></a>3.compile libutils and get libutils.so</h3><blockquote><p>1.cd to LINUX&#x2F;android and run source build&#x2F;envsetup.sh</p><p>2.lunch and choose qssi-userdebug</p><p>3.cd to system&#x2F;core&#x2F;libutils and run mm</p></blockquote><p>libutils.so file path is follows:</p><p>out&#x2F;target&#x2F;product&#x2F;qssi&#x2F;system&#x2F;lib64&#x2F;libutils.so</p><h3 id="4-start-gdbserver-and-bind-to-the-display-process"><a href="#4-start-gdbserver-and-bind-to-the-display-process" class="headerlink" title="4.start gdbserver and bind to the display process"></a>4.start gdbserver and bind to the display process</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell gdbserver :8888 --attach pid</span><br></pre></td></tr></table></figure><h3 id="5-map-the-pc-port-to-specified-port-in-android-system"><a href="#5-map-the-pc-port-to-specified-port-in-android-system" class="headerlink" title="5.map the pc port to specified port in android system"></a>5.map the pc port to specified port in android system</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:8888 tcp:8888</span><br></pre></td></tr></table></figure><h3 id="6-start-gdb-client-in-wins"><a href="#6-start-gdb-client-in-wins" class="headerlink" title="6.start gdb client in wins"></a>6.start gdb client in wins</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prebuilts/gdb/linux-x86/bin/gdb.exe out/target/product/kona/symbols/vendor/bin/hw/vendor.qti.hardware.display.composer-service</span><br></pre></td></tr></table></figure><h3 id="7-set-symbols-path"><a href="#7-set-symbols-path" class="headerlink" title="7.set symbols path"></a>7.set symbols path</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) set solib-absolute-prefix out/target/product/kona/symbols/vendor/bin/hw/vendor.qti.hardware.display.composer-service</span><br><span class="line">(gdb) set solib-search-path out/target/product/kona/symbols/vendor/bin/hw/vendor.qti.hardware.display.composer-service</span><br></pre></td></tr></table></figure><h3 id="8-connect-gdb-to-gdbserver"><a href="#8-connect-gdb-to-gdbserver" class="headerlink" title="8.connect gdb to gdbserver"></a>8.connect gdb to gdbserver</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(gdb)target remote :8888</span><br></pre></td></tr></table></figure><h2 id="perfetto"><a href="#perfetto" class="headerlink" title="perfetto"></a>perfetto</h2><h3 id="1-record-trace"><a href="#1-record-trace" class="headerlink" title="1.record trace"></a>1.record trace</h3><p>adb shell perfetto -o &#x2F;data&#x2F;misc&#x2F;perfetto-traces&#x2F;trace_file.perfetto-trace -t 20s sched freq idle am wm view binder_driver hal dalvik input res memory gfx</p><p>adb pull &#x2F;data&#x2F;misc&#x2F;perfetto-traces&#x2F;trace_file.perfetto-trace</p><ol start="2"><li></li></ol><p>参考链接：</p><p>1.<a href="https://blog.csdn.net/aa787282301/article/details/104693152">native 解析死锁方法___futex_wait_ex-CSDN博客</a></p><p>2.<a href="https://blog.csdn.net/liu362732346/article/details/80406772">binder ANR案例-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;分析日志&quot;&gt;&lt;a href=&quot;#分析日志&quot; class=&quot;headerlink&quot; title=&quot;分析日志&quot;&gt;&lt;/a&gt;分析日志&lt;/h2&gt;&lt;p&gt;1.分析main主线程&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;C:&#92;Users&#92;rokid&#92;AppData&#92;Roaming&#92;Ty</summary>
      
    
    
    
    
    <category term="problem" scheme="http://example.com/tags/problem/"/>
    
  </entry>
  
</feed>
